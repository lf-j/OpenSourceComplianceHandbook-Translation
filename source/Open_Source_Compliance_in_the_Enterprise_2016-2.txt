Chapter 5

COMPLIANCE PROCESSES AND POLICIES

For the purpose of this book, the focus of the discussion is using and integrating open source with proprietary and third-party source code in a commercial product. The discussions exclude policies and processes for using open source solely inside your organization for testing and evaluation purposes. This chapter discusses usage policy and process in addition to the base and incremental compliance process, and guidelines for achieving incremental compliance.

POLICY

The usage policy is an essential building block in a compliance program. This policy does not have to be lengthy or complicated. A simple policy can be as effective as a complex one as long as it mandates the following:

. Engineers must receive approval from OSRB before integrating any open source in a product. . Software received from third-party vendors must be audited to identify any open source included, which will ensure license obligations can be fulfilled before product ships.
. All software must be audited and reviewed, including proprietary software components, software received from third-party providers, and open source software.
. Product must fulfill open source licensing obligations prior to customer receipt.
. Approval for one product is not approval for another deployment, even if the open source component is the same.
. All changed components must go through the approval process.






These rules ensure that any software (proprietary, third-party, open source) that makes its way into the product base has been audited, reviewed, and approved. Furthermore, it ensures that the company has a plan to fulfill the license obligations resulting from using the various software components prior to customer receipt. 
PROCESS

The compliance usage process includes scanning the source code of the software package in question, identifying and resolving any discovered issues, performing legal and architectural reviews, and making a decision regarding the usage approval for a given software package.

Figure 14 illustrates a simplistic view of a compliance usage process. This figure does not demonstrate the iterative nature of such a process; a more elaborate view is provided in Figure 17 (page 89). 
 
Figure 14. A sample compliance usage process

Source Code Scan

In the source code scanning phase, all the source code is scanned using a source code scanning tool. Figure 15 (page 81) illustrates some of the factors that can trigger a source code scan, which include:





. An incoming OSRB usage form, usually filled out by engineering staff. This is a simple online form that an engineer or a developer fills out, providing basic information about the source code in question. Upon the submission of the form, a compliance ticket (in a system such as JIRA or Bugzilla) will be created automatically, and a source code scanning request will be sent to the auditing staff. . A periodically scheduled full-platform scan: Such scans are very useful to uncover open source that may have snuck into your software platform without an OSRB form. . Changes in previously approved software components: In many cases, engineers start evaluating and testing with a certain version of an OSS component, and later adopt that component when a new version is available.
. Source code received from a third-party software provider who may or may not have disclosed open source
. Source code downloaded from the web with unknown author and/or license, which may or may not have incorporated open source in it
. A new proprietary software component entering the build system where engineering may or may not have borrowed open source code and used it in a proprietary software component





 



Figure 15. Events that trigger a source code scan

In preparation for legal review, the individual who runs the source code scan should attach to the compliance ticket all the license information found in the package, such as any COPYING, README, or LICENSE files, in addition to any files stating copyright and attribution notices. 
Identification and Resolution

In the identification and resolution phase, the auditing team inspects and resolves each file or snippet flagged by the scanning tool. 
Legal Review 
In the legal review phase, the legal counsel (member of the OSRB) reviews reports generated by the scanning tool, the license information of the software component, and any comments left in the compliance ticket by engineers and members of the OSRB. If there were no issues with the licensing, the legal counsel would then decide on the incoming and outgoing licenses of the software component, and would forward the compliance ticket into the compliance architectural phase. If a licensing issue is found, for example mixed source code with incompatible licenses, the legal counsel will flag these issues and reassign the compliance ticket to Engineering to rework the code. In some cases, if the licensing information is not clear or if it is not available, the legal counsel contacts the project maintainer or the open source developer to clarify the ambiguities and to receive a confirmation of the license under which that specific software component is licensed.

Architecture Review 
In the architecture review, the compliance officer and the engineering OSRB representative perform an analysis of the interaction between the open source, proprietary, and third-party code. This is accomplished by examining an architectural diagram that identifies:

. Open source components (used “as is” or modified) . Proprietary components
. Components originating from third-party software providers . Component dependencies
. Communication protocols
. Other open source packages that the specific software component interacts with or depends on, especially if they are governed by a different open source license


The result of the architecture review is an analysis of the licensing obligations that may extend from open source to proprietary or third-party software components (and across open source components as well). If the compliance officer discovers any issues, such as a proprietary software component linking to a GPL licensed component, the compliance officer forwards the compliance ticket to Engineering for resolution. If there are no issues, then the compliance officer moves the ticket to the final stage in the approval process. 




Final Review

The final review is usually an OSRB face-to-face meeting during which the OSRB approves or denies usage. In most cases, if a software component reaches the final review, it will be approved unless a condition has presented itself (such as the software component no longer being in use). Once approved, the compliance officer will prepare the list of license obligations for the approved software component and pass it to appropriate departments for fulfillment. 
PROCESS STAGES’ INPUTS AND OUTPUTS

In this section, we discuss the inputs and outputs of each of the five phases in the OSRB usage process, as illustrated in Figure 16. Please note that these phases are for illustration purposes and may not be exactly the same as the ones in your specific scenario. 


Figure 16. Inputs and outputs of the usage process





Source Code Scan Phase

Input

The input to the scan phase is the OSRB usage form that an engineer has filled out online and submitted. Table 6 (on page 97) provides details on the form. It includes all information about the open source component in question, in addition to the location of the source code in the source code repository system. Periodic full-platform scans should also take place every few weeks to ensure that no open source software component has been included into the platform without a corresponding OSRB form.

Output

The output from the scan phase is a report produced by the source code scanning tool that provides information on:

. Known software components in use, also known as the software Bill of Materials (BoM) . Licenses in effect, license texts and summary of obligations . License conflicts to be verified by legal
. File inventory
. Identified files
. Dependencies
. Code matches
. Files pending identification . Source code matches pending identification






Identification and Resolution Phase

Input

The input to this phase is the report generated by the scanning tool in the previous phase. The report flags issues such as conflicting and incompatible licenses. If there are no issues, then the compliance office will move the compliance ticket forward to the legal review phase. If there are issues to be resolved, then the compliance officer creates subtasks within the compliance tickets and assigns them to the appropriate engineers to be resolved. In some cases, a code rework is needed; in other cases, it may simply be a matter of clarification. The subtasks should include a description of the issue, a proposed solution to be implemented by engineering, and a specific timeline for completion.

Output

In this phase, subtasks are closed, and the output is the resolution of all issues. The compliance officer may order a re-scan of the source code and generate a new scan report confirming that earlier issues have now been resolved. Then the compliance officer forwards the compliance ticket to the representative from the Legal department for review and approval.

Legal Review Phase 
Input

When a compliance ticket reaches the legal review phase, it already contains:

. A source code scan report and confirmation that all the issues identified in the scanning phase have been resolved.
. Copies of the license information attached to the ticket: Typically, the compliance officer attaches the README, COPYING, and AUTHORS files available in the source code packages to the compliance ticket. Other than the license information, which for OSS components are usually available in a COPYING or a LICENSE file, you need to capture copyright and attribution notices as well. This information will provide appropriate attributions in your product documentation. . Feedback from the compliance officer regarding the compliance ticket (concerns, additional questions, etc.).
. Feedback from the engineering representative in the OSRB or from the engineer (package owner) who follows/maintains this package internally.


Output

The output of this phase is a legal opinion of compliance, and a decision on the incoming and outgoing license(s) for the software component in question. The incoming and outgoing licenses are in the plural form because in some cases, a software component can include source code available under different licenses.

Incoming and outgoing licenses

The incoming license is the license under which you received the software package. The outgoing license is the license under which you are licensing the software package. In some cases, when the incoming license is a permissive license that allows relicensing (such as BSD), companies will relicense that software under their own proprietary license. A more complex example would be a software component that includes proprietary source code, source code licensed under License-A, source code that is available under License-B, and source code available under License-C. During legal review, the legal counsel will need to decide on the incoming and outgoing license(s):

Incoming licenses = Proprietary License + License A + License B + License C
Outgoing license(s) = ?





Architecture Review Phase

The goal of the architecture review is to analyze the interactions between the open source code and third-party and proprietary code. The result of the architecture review is an analysis of the licensing obligations that may extend from the open source components to the proprietary components. The internal package owner, the OSRB engineering representative, and the Compliance Officer usually perform the architecture review. If they identify a dependency resulting in a licensing conflict, the Compliance Officer will issue a ticket to Engineering to resolve the dependency problem by reworking the source code.
Input

Source code has been audited and all issues have been resolved.

Output

OSRB members perform an architecture review for the specific component, and mark it as ready for the next step (i.e., Final Approval) if no issues were uncovered.

Final Approval Phase

Input

The input to this phase is the complete compliance record of the software component, which includes the following:

. A source code scan report generated by the scanning tool . The list of discovered issues, information on how they were resolved, and who verified that these issues were successfully resolved
. Architectural diagrams and information on how this software component interacts with other software components 





. Legal opinion on compliance, and decision on incoming and outgoing licenses
. Dynamic and static linkage analysis, if applicable in an embedded environment (C/C++). 

Output

The output of this phase is a decision to either approve or deny the usage of the software component.

DETAILED USAGE PROCESS

Of course there are many possible circumstances that can affect compliance procedures. Figure 17 (next page) provides a detailed process that highlights several possible scenarios, and how to move from one step to another in the compliance process. We then discuss eight possible scenarios. These scenarios are not mutually exclusive and are not the only possible scenarios; however, they are used for illustration and discussion purposes. 
Scenario 1: The source code scanned is 100% proprietary 
Scenario 2: The source code scanned includes code with incompatible licenses 
Scenario 3: Issue with linkages identified during architectural review

Scenario 4: A source code package is not used anymore 
Scenario 5: Due diligence identified IP that will be released to meet license obligations

Scenario 6: Verification step has identified an issue that needs to be resolved

Scenario 7: Source code is approved for use 
Scenario 8: Source code is rejected



Figure 17. Specific compliance scenarios





Scenario 1: Source code is 100% proprietary 
The scanned software component contains 100% proprietary code, and no open source code is declared or identified. In this case, we assume the fast track, and the compliance ticket for that specific component will be forwarded for legal review. Legal counsel attaches a license to this proprietary component, and forwards it to the compliance officer to perform architectural and linkage analysis.

Scenario 2: Incompatible licenses 
The scanned software component includes source code that originated from multiple sources with incompatible licenses. Another example would be a software component with a mix of proprietary source code and source code licensed under the GPL. In this scenario, the scan report will be attached to the compliance ticket and assigned to the developers who internally own that software component, with a request to rework the code by removing the GPL source code from the proprietary software component. Once the developer reworks the code, the software component will be scanned again to verify that the GPL code has been removed before the ticket proceeds for legal review. 
Scenario 3: Identified issue with linkages

In this scenario, the compliance ticket has passed legal review and is now in the architectural and linkages review. The compliance officer discovers a linkages issue. In this case, the compliance officer moves the compliance ticket back into the resolution phase, assigning it to a developer to resolve the linkage issue. 
Scenario 4: Source code no longer used 
In this scenario, Engineering decides that a software component is not going to be included in the product while the software component is in transit through the compliance process. As a result, its compliance ticket is closed (rejected). The next time this component is going to be used, it must re-enter the compliance process and progress as approved before it is integrated in the product or service source code repository. 
Scenario 5: IP at risk of requiring release 
In this scenario, legal review uncovered that closely-held intellectual property has been combined with an open source code package. Legal counsel will flag this and reassign the compliance ticket to engineering to remove the proprietary source code from the open source component. In the event that engineering insists on keeping the proprietary source code in the open source component, the OSEC will have to release the proprietary source code under an open source license.

Scenario 6: Unresolved issue found

In every case, when an OSRB member discovers a compliance issue in the software component, the component goes through the same life cycle:

. Engineering fixes the identified issue.
. Auditing team re-scans the software component and provides a new scan report.
. Legal examines the new audit report. . Compliance office ensures that there are no open issues in the architecture and linkage analyses. 

Scenario 7: Source code is approved

Once a software component has received the audit, legal, and compliance approvals, it will be reviewed during an OSRB meeting. If nothing has changed in its status . that is, it is still in use, is the same version, and has the same usage model (Figure 18, next page) . the compliance officer will:

. Update the software inventory to reflect that the specific OSS software component version x is approved for usage in product y, version z.





. Issue a ticket to the documentation team to update end user notices in the product documentation, to reflect that open source is being used in the product or service.
. Trigger the distribution process before the product ships.


 
Figure 18. Steps accomplished after the OSRB approval

Scenario 8: Source code is rejected

In this scenario, the OSRB decides to reject usage of a specific software component. There are several reasons that might lead to such a rejection:

. The software component is no longer used.
. There are linkage issues that cannot be resolved easily. The decision is to stop development and design a better solution.






. There are license incompatibility issues that cannot be resolved easily. The decision is stop development and design a better solution.
. There are intellectual property issues preventing the use or release of the specific component.
. Other reasons: each depends on the specifics of the software component in question and its usage model in the final commercial product or service.


INCREMENTAL COMPLIANCE PROCESS

Incremental compliance is the process by which compliance is maintained when product features are added to a baseline version that has already completed initial compliance. (Initial compliance, also called baseline compliance, happens when development starts, and goes until the release of the first version of the product.) Incremental compliance requires a comparatively small effort in comparison to the efforts involved in establishing baseline compliance.

Figure 19 illustrates product development and incremental compliance. 
 
Figure 19. Incremental compliance
In this example, the compliance team identifies all open source included in the software baseline (here called v 1.0), and drives all of the open source components through the compliance end-to-end process. Once the product ships, development begins on a new branch that includes additional features and/or bug fixes . in this example, v 1.1. 
Several challenges arise with incremental compliance. Specifically, you must correctly identify the source code that changed between version 1.0 and version 1.1, and verify compliance on the delta between the releases: 
. New software components may have been introduced. . Existing software components may have been retired. . Existing software components may have been upgraded to a newer version. . The license on a software component may have changed between versions.
. Existing software components may have code changes involving bug fixes or changes to functionality and architecture. 

The obvious question is “How can I keep track of all of these changes?” 
The answer is simple: a bill of material difference tool (BOM diff tool), as discussed in Chapter 7. Briefly, for the purpose of this discussion, the tool provides you the delta between two BOMs for the same product or service. Given the BOM for product v1.1 and the BOM for v1.0, we compute the delta, and the output of the tool is the following:

. Names of new software components added in v1.1
. Names of updated software components
. Names of retired software components






Knowing this information, achieving incremental compliance becomes a relatively easy task:

. Enter new software components into the compliance end-to-end process.
. Compute a line-by-line diff of the source code in changed software components, and decide if you want to scan the source code again or rely on the previous scan.
. Update the software registry by removing the software components that are not used anymore.


Figure 20 (next page) provides an overview of the incremental compliance process. The BOM file for each product release is stored on the build server. The BOM diff tool takes two BOM files as input, each corresponding to a different product release, and computes the delta to produce a list of changes as previously discussed. At this point, the compliance officer will create new compliance tickets for all new software components in the release, update compliance tickets where source code has changed and possibly re-run them through the process, and finally update the software registry to remove retired software components from the approved list. 
OSRB USAGE FORM

Completing the OSRB usage form (also called a request form) is one of the most important steps when bringing open source software into a company (ingress), and should be taken very seriously. Developers fill out the online form requesting approval to use a given open source component. The form comprises several questions that will provide necessary information for the OSRB, allowing it to approve or disapprove the usage of the proposed open source component. Table 6 (page 97) highlights the information requested in an OSRB usage form. Usually, these values are chosen from a pull-down menu to make the data entry efficient.










Figure 20. Example of an incremental compliance process

Note on Downloaded Open Source Packages

It is vital to archive open source packages downloaded from the web in their original form. These packages will be used in a later stage (prior to distribution) to verify and track any changes introduced to the source code by computing the difference between the original package and the modified package. If a third-party software provider uses open source, the product team integrating that code into the product must submit an OSRB usage form describing the open source to be used. If the third-party software provider provides only binaries, not source code, then the product team and/or the software supplier manager who manages the relationship with the third-party software provider must obtain a confirmation (for instance, a scan report) that there is no open source in the provided software. 




Table 6. Information requested as part of the OSRB usage form

Field

Description

Submitter Information 
Company ID of employee submitting the form (facilitating retrieval of employee name, phone, email, manager, location, and team from a company directory)

OSS Code Information 
Package name and version

Software class: open source, internally developed, third-
party shrink-wrap

Website URL

Description

License name and version

License website URL

Software category: OS/kernel, driver, middleware, library, utility, other (explain), etc.

Benefits of using the OSS component

Alternatives to using the component/package

Consequences of not using the software

Location of the software in the SCMS

Use Case

Internal (tools, IT, etc.)

Distributed as part of a product

Enabling an outward-facing service

Modification

Modified (Y/N)?

Includes company IP?

Exposes IP?









Note on Architecture Diagram

The architectural diagram illustrates the interactions between the various software components in an example platform. Figure 21 provides an example architectural diagram that shows:

. Module dependencies
. Proprietary components
. Open source components (modified versus as-is)
. Dynamic versus static linking
. Kernel space versus user space
. Shared header files
. Communication protocols . Other open source components that the software component in question interacts with or depends on, especially if it is governed by a different open source license 

Figure 21. Template for architectural diagram (applies to an embedded environment that relies on C or C++) 




Rules Governing the OSRB Usage Form 
There are several rules governing the OSRB usage form. Here are a few.

. The form applies only to the usage of open source in a specific product and in a specific context. It is not a general approval of the open source component for all use cases in all products.
. The form is the basis of audit activity and provides information the OSRB needs to verify if the implementation is consistent with the usage plan expressed in the form, and with the audit and architectural review results. . The form must be updated and resubmitted whenever the usage plans for that specific open source component changes.
. The OSRB must approve the form before engineering integrates the open source into the product build.
. The OSEC must approve the usage of any open source package where licensing terms require granting a patent license or patent non-assertion. 

AUDITING

Good audit practices ensure a thorough understanding of the provenance of all software that will be deployed as part of a product or service. With this understanding comes the ability for your organization to meet its open source software license obligations. The auditing policy is usually simple and straightforward: All source code included in the portfolio/stack must be audited and have an audit report attached to its compliance ticket. The audit process consists of the workflow that requests follow after engineering has submitted an OSRB usage form for a specific software component. 




The audit process consists of the following phases (Figure 22):

Receive the OSRB usage form, which includes the location of the source code to audit.

. Perform a scan of the source code. . Perform analysis of components flagged by the scanning tool.
. Produce final auditing report. 



Figure 22: Basic audit process

SOURCE CODE DISTRIBUTION

The goals of the source code distribution process and policy are to ensure that:

. Customers who buy the product or use the service containing open source software are informed of their rights to receive the source code when applicable
. The source code distributed is the correct version, corresponds to the binary version included in the product transmission of the software to the distribution site, and is labeled appropriately


Distribution Incentives 
There are three major business incentives to distribute open source code: Meeting license obligations, contributing enhancements to an open source project, and creating and contributing code to a new open source project.





Meeting License Obligations

In this instance, your organization has incorporated open source into a product or service, and due to the open source component license, you have the obligation to make source code available, including any modifications to it. This is informally considered a one-way distribution, versus a two-way that involves full community interaction. 
Contributing modifications to an existing open source project

In some cases, the open source license does not include an obligation to make your modifications available for license compliance purposes. However, you may consider releasing your modifications and possibly upstreaming them to reduce your technical debt, or, in other words, the cost of maintaining those modifications. 
Creating a new open source project

Organizations may have a business need to create a new open source project and contribute source code to it. This case is different from contributing source code (in the form of bug fixes or new feature implementation) to an existing open source project. 
Distribution Policy and Process

The goal of a distribution policy is to govern the process of supplying source project code and to provide guidelines on the various logistical aspects of meeting open source license obligations regarding the availability of open source code. The distribution policy applies to any software package where the license requires redistributing source code, and it covers the publication process, publication methods, modes, and checklists.

Prior to triggering the process, you need to decide on the method and mode of providing source. Subsequently, the process begins with preparing source code for external distribution, following a pre- distribution checklist, ensuring source code package availability, and then completing the post-distribution checklist. 




Figure 23 illustrates a sample distribution process. It includes: 
. Deciding on the source code supply method . Deciding on a distribution mode
. Preparing the source code packages for external distribution
. Completing a pre-distribution checklist to ensure that all prior steps have been successfully completed and that the source code packages are ready for external distribution
. Executing the distribution . Completing a post-distribution checklist to capture any possible errors that took place as part of the distribution process 

 
Figure 23. Sample publication process 




Distribution Methods and Modes

There are three main distribution methods for making source code packages available. 
Instant Compliance Method

Following this distribution method, you provide the code when or shortly after your product or software stack ships, and make it made available to anyone who wishes to get it, typically via a website download. This is usually the preferred method of distribution for developers (and compliance enforcers), as it gives them direct access to the source code without having to pass the eligibility requirement (i.e., they don’t need to buy the product to be eligible to receive the source code). In some cases, the instant compliance method can be accomplished by including the source code packages on the product/device in a media directory.

There are two drawbacks to this method of distribution. Firstly, it requires a lot of effort to package all source code and make it available on the website by the date the product ships, at a time when all hands are on deck getting the product out the door. Secondly, you will be building up an expectation that future source code distributions will use this method as well. This is a very high expectation to meet every single time.

Online Supply Method

Following this distribution method, you provide exclusive access to your customers only, as they are the only entities eligible to receive the source code. This method is best managed via a secure website that requires a certain authentication on the part of the client to access and download the source code packages.

On-demand Compliance

This distribution method is a variation of the online supply method in which you rely on the written offer (in the case of the GPL/LGPL family of licenses) to communicate to your clients how they can request or access the source code. Some organizations prefer to have a written request, sent to a corporate email address or a postal address (specified in the written offer), the result of which is that the client receives a copy of the source code, after the verification of their eligibility. This compliance method often gives the organization additional buffer time to finish packaging the source code after the product has shipped. However, generally speaking, it is not regarded as a preferred method of distribution, due to the overhead it poses in verifying the eligibility of the people asking to access the source code and the resources required to fulfill the requests. In addition, with the specific cases of the GPL/LGPL family of licenses, the written offer to access the source code must be valid for three years. Therefore, you will need to administer the distribution of the code for at least three years from the date you have last shipped your product. If you opt for providing the source code on a CD-ROM, this will introduce some additional cost to you and additional verification steps to ensure the correctness of the process of burning the CD-ROM containing the source code packages.

Distribution Checklists

There are many checkpoints for validating the open source package before it makes its way to the website for customer and/or public consumption. And additional validation is required after source code becomes publicly available. Below we outline the pre- and post- distribution process.

Pre-Conditions for Distribution 
The following is a list of conditions that should be met before source code packages are ready for distribution (aka distribution hygiene):

. The open source package has been approved by OSRB for usage that corresponds to what was declared in the usage form. . The product containing the open source packages is ready to ship or has shipped already.






. If you are making GPL/LGPL licensed code available, ensure you are providing and documenting the modifications you have introduced. . You’ve performed a linguistic review. Although this is not compliance-related, there have been issues in the past related to future product code-names used, obscene or vulgar language, and references to individuals, email addresses, and/or internal URLs left in the code.


Pre-Distribution Checklist

The following is a sample checklist to follow before publishing or distributing source code:

. Verify that the modifications that were introduced to the open source package are documented and included in the open source release notes as part of the change log. Ensure that each modified source code file contains an additional entry for a copyright notice, disclaimer, and a generic “change log” entry.
. Confirm that all contents of the source code package have been reviewed by Engineering and confirmed by OSRB. . Ensure that the open source package compiles on a non-corporate machine. It is often the case when compiling packages on a company-configured machine that environment and compiler settings are all preconfigured and set. However, when you try to compile the package on another system, the compilation settings, makefile options, include paths, etc. may break. The goal with this step is to ensure that the open source package you are about to distribute compiles on a vanilla, end-user system. . Update the product manual to:
. Mention that the product includes open source software.
. Include a listing of all licenses that correspond to the different open source software included in the product.









. Offer proper copyright and attribution notices.
. Indicate how to access the code of the open source package (written offer) either through a web page download or by contacting your company via email or postal mail at a specified address provided in the product manual.



. Verify that the written offer is sufficient to cover all parts of the source code that require such an offer (principally, code licensed under any of the GPL/LGPL family of licenses).
. Perform a linguistic review to ensure that there are no inappropriate comments in the source code. Some companies forget to go through a linguistic review and when/if their product is hacked, they face embarrassment from exposure of inappropriate comments left in the source code. Another important reason to perform a linguistic review is to ensure that the source code and comments do not make reference to future product code names or capabilities. . Ensure that existing license, copyright, and attribution notices are not disturbed. . Verify that the source code to be distributed corresponds to the binary that goes with the product, that the source code builds into the same library distributed with the product, and that build instructions are included in the source distribution (derived binaries are usually identical except for time/date stamp).
. Verify that the package adheres to the linkage relationships and interactions defined in the OSRB usage form. For instance, if the developer declared that they will dynamically link that component to an LGPL licensed library, then we need to verify they’ve done so, and have not used a static linkage method instead. This is verified by using the linkage dependency-mapping tool. 





. Ensure inclusion of a copy of the license text, if not already present, in a LICENSE file in the source code root folder of the open source package.
. If the source code package requires special build tools or environment, then include the details in a README file or similar. 

Post-Publication Checklist

The following is a sample checklist to go through after publishing source code, to validate the source code packages being made available:


. Source code packages have been successfully uploaded to the website and can be downloaded on an external computer.
. Source code packages can be uncompressed on an external computer without errors.
. Source code packages can be compiled and built on an external computer without errors.


Written Offer 
Below is an example of a written offer to provide the source code:

To obtain a copy of the source code being made publicly available by FooBar, Inc. (“FooBar”) related to software used in this FooBar product (“Product”), you should send your request in writing to:

FooBar Inc.

Attention: Open Source Compliance Inquiries 




Street Address
City, State, Postal Code
Country 
FooBar makes every possible effort to make the source code publicly available at http://opensource.foobar.com (“Website”) within reasonable business delays. Before sending your written request, please check the Website, as the source code may already be published there.


Alternatively, if you prefer receiving requests via email and not via postal mail, the wording of the written offer would change slightly to: 

To obtain a copy of the source code being made publicly available by FooBar, Inc. (“FooBar”) related to software used in this FooBar product (“Product”), you should send your request in writing to opensourcecompliance@foobar.com.

FooBar makes every possible effort to make the source code publicly available at http://opensource.foobar.com (“Website”) within reasonable business delays. Before sending your written request, please check the Website, as the source code may already be published there.





Chapter 6

RECOMMENDED PRACTICES FOR COMPLIANCE PROCESS MANAGEMENT

This chapter highlights some of the recommended practices and various considerations when integrating open source in commercial products. It is divided into three parts:

. Recommended practices that map to the various steps within an open source compliance management end-to-end process. . Compliance considerations in relation to source code modifications, notices, distribution, software design, usage, linkages, and code mixing. . Recommended practices related to the various building blocks in an open source compliance program.


COMPLIANCE PROCESS 
As a refresher, the compliance management process includes the various steps a software component goes through before it is approved for inclusion in a product software stack. The process starts by identifying the various software components integrated into the product’s build system, and ends by compiling a list of resulting license obligations. 
The following sections provide recommended practices for processing compliance requests. The recommended practices map directly to the steps illustrated in the compliance process shown in Figure 24 (next page).

Identification Phase 
In the identification phase of a compliance process, organizations identify all of the components or elements entering the build system, origin, and license information. There are three main sources for incoming source code:





. Proprietary software created by internal developers, which may include snippets of open source or which integrates open source at the component level, with dependencies on or links to open source code
. Third-party software developed by independent providers or consultants and made available under a commercial or open source license. This software category may include snippets or dependencies as above.
. Open source software developed by members of an open source project




Figure 24. Compliance end-to-end management process 

It is recommended to identify all the incoming software components and run them through the compliance process. 




Source Code Auditing 
There are three core recommended practices for source code auditing or scanning:

Scan all source code

Scan every bit of source code incorporated into products and services, because development teams may have introduced open source into proprietary or third-party source code. Furthermore, development teams may have made modifications to open source components, triggering the need for additional due diligence and potential additional obligations. Therefore, it is critical to audit and identify all source code included in a product.

Scan newer versions of previously approved packages

Sometimes a previously approved package is either modified and used again (in the same or in a different context) or used as-is or with modifications in a different product or service, or a new version is downloaded and applied in the software stack. Since compliance is verified on a product-by-product, service-by-service basis, approving for use in one case does not necessarily serve for all cases.

As a rule, each time developers modify a previously approved component or plan to use a previously approved component in a different context, component source code should be rescanned, and the component should pass the approval process again. 
Ensure review and approval of each new version of open source components 
License changes can occur between version upgrades. When developers upgrade versions of open source packages, make sure that licenses of new versions are the same as those employed with older versions. 
There is an open source adage that goes “release early and release often.” 




The open source development model encourages frequent releases, starting on project day one, to give users opportunities to experiment and report bugs. The goal is to make quality assurance activities a regular part of the development process. 
“Scan early and often” follows the same spirit. Scanning source code early in the development process and continuing to do so regularly ensures that compliance efforts are not lagging behind the development efforts. Organizations should also create a list of conditions that define when a new scan is required, to make the process more efficient. 
The “scan early and often” approach has several advantages: 
. It aids in the discovery of compliance issue very early in the process.
. It accelerates providing solutions to discovered problems within acceptable timeframes without posing a serious threat to the delivery timeline. . It improves the efficiency of processing incremental, scans since it reduces the delta of source code that needs to be scanned from previous source code scans.


Resolving Issues 
When source code is scanned and compliance issues are discovered and flagged, there are a number of ways to resolve issues:


. When in doubt with the scan results, discuss with Engineering (interview developers responsible for specific software components in question). . Inspect and resolve each file or snippet flagged by the scanning tool; matching source code may come from sources that surprise you.
. Identify modifications to open source. Ideally, you should not rely on engineers to remember if they made code changes (let alone document them). You should rely on your build tools (SCM, build automation, etc.) to identify code changes, who made them, and when.
. If, for instance, the source code scanning tool identifies the use of unauthorized GPL licensed source code (a snippet) within a proprietary component, this will be reported to Engineering with a request for correction. It is highly recommended to re-scan the source code after Engineering has resolved the issue, to confirm removal of the problem source code and its replacement with appropriate and compatible code.
. In preparation for the legal review, it is best to provide attorneys with all discovered licensing information for specific components:
. The source code audit report generated by the scanning tool
. The COPYING, README, or LICENSE files for open source components
. The licensing agreement for software components received from a third-party software provider





Reviews

There are different types of reviews that occur as part of a compliance process. In this section, we discuss architecture review and linkage analysis review. 
The architecture review is an analysis of the interaction among open source, proprietary, and third-party software components. Companies often conduct architecture reviews with the architect responsible for the product in question, plus developers responsible for the various key software components. 




The goal of this review is to identify:

. Components that are open source (used as-is or modified) . Proprietary components . Third-party components under a commercial license
. Component dependencies
. Communication protocols among components and subsystems
. Dynamic versus static linking (discussed in the following section)
. Components deployed in kernel space (drivers, etc.) versus user space (libraries, middleware, applications)
. Components that use shared header files
. Other open source that the specific software component interacts with or depends on, especially if it is governed by a different open source license


The result of the architecture review is an analysis of the licensing obligations that may extend from open source to proprietary or third-party components. 
Approvals

As part of the approval step in the compliance process, there are two main recommended practices:

. Verify that all subtasks related to the compliance ticket have been completed and closed before approving the compliance ticket. It’s easy to forget subtasks or pending subissues, but doing so may lead to prematurely closing a compliance ticket even though open issues remain.
. Record a summary of discussions that lead to approval or denial. Such documentation can prove very useful when attempting to determine on which basis approval was provided for a given component and how issues were resolved. 





Notices

Organizations using open source in products and services need to:

. Acknowledge the use of open source by providing full copyright and attribution notices. . Inform end users how to obtain a copy of the open source code (when applicable, for example in the case of GPL and LGPL licensed source code).
. Reproduce the entire text of the license agreements for the open source code included in the product. 

Some recommended practices in this area include:

. Collect attribution and license notices incrementally, as open source is approved for inclusion. Following this method, the required notices file will always be up to date and will include lists of all open source, license information, copyright, and attributions notices.
. Use clear language in the written offer and be inclusive of all open source included in the product.
. Ensure that the end users of the product know how to locate this information, whether on the product itself, in the product documentation (user manual or CD-ROM), and/or on a website.


Verifications

It is very helpful and efficient to develop, maintain, and evolve checklists that cover the verification steps that the compliance team follows, both to ensure consistency and to ensure that no verification steps are overlooked. Examples of pre-distribution verifications include:





. Open source packages destined for distribution have been identified and approved
. Inappropriate comments have been removed from the source code packages (this is not strictly a compliance issue; however, comments may reveal a compliance issue that is not as visible) . Source code packages made available (including modifications) match the binary(ies) shipping in the product or software stack
. Appropriate notices have been included in the product documentation, in addition to the availability of a written offer to inform end users of their right to request source code for identified open source (when applicable)


Once open source packages are uploaded to the distribution website (and/or stored on equivalent media), your work is not complete. You still need to verify that:

. Packages have been uploaded correctly
. Packages can be downloaded and uncompressed on an external computer without error
. Included packages compile/build properly
. Developers did not leave comments about future products, product code names, mention of competitors, or any inappropriate comments


TOOLS AND AUTOMATION

Tools are an essential element in a compliance program in that they can help organizations perform compliance activities efficiently and accurately. Many tools can prove very useful in an open source compliance program:





. Source code scanning and license identification tools
. Project management tools
. Bill of material difference tools
. Linkage analysis tools


In the following subsections we provide basic information about such tools and how their use can contribute to compliance activities. In the market, there are multiple commercial/proprietary and open source tools that provide the various functionalities described below. 
Source Code Identification Tools 
Source code and license identification tools provide recognition and analysis capabilities to assist users in identifying the origin of source code and licenses associated with open source software components. 
. Antelink Reporter: http://www.antelink.com/
. Black Duck Protex: https://www.blackducksoftware.com/products/protex
. The Black Duck Hub: https://www.blackducksoftware.com/products/hub
. FOSSology: http://www.fossology.org/projects/fossology . nexB DejaCode: http://www.nexb.com/products.html
. Open Logic Exchange: http://www.openlogic.com/products-services/openlogic-exchange
. Palamida Enterprise: http://www.palamida.com/products/enterprise 
. Protecode Enterprise: http://www.protecode.com/our-products/ 
. WhiteSource: http://www.whitesourcesoftware.com




Project Management Tools

A project management tool is essential to managing and tracking compliance activities. Some companies use bug tracking tools (see list below) already in place with a customized compliance workflow; other companies rely on specific project management tools or even in-house solutions. Whatever your preference, tools should reflect the workflow of compliance processes, facilitating moving compliance tickets from one phase of the process to another, providing task and resource management, time tracking, email notifications, project statistics, and reporting capabilities. 
Example bug-tracking tools commonly employed for compliance: 
. Bugzilla: https://www.bugzilla.org/ . IBM Rationale ClearQuest: http://www.ibm.com/software/products/
en/clearquest/
. JIRA: https://www.atlassian.com/software/jira 
. Redmine: http://www.redmine.org/ 
. Bugzilla: https://www.bugzilla.org/ 

Software Bill of Material (BOM) Difference Tools

The goal of a Software BOM difference tool is to compute the difference between two BOMs and produce a list of changes. Such a tool enables efficient incremental compliance when facing newer versions of an existing base code (for instance, going from release 1.1 to 1.2). The inputs to a BOM difference tool are two BOM files that represent the list of components available on two different versions of a product or service code base. The output of the BOM difference checker documents the list of new components, retired components, and modified components.

BOM management tools are plentiful in the world of physical manufacturing, but less so for managing use of open source software. In this author’s experience, BOM difference tools that support open source management 


processes are usually home-grown and/or built as mash-ups of existing tools and capabilities. Depending on the form and format of the bill of materials, it is possible to use command-line diff tools, productivity tools (spreadsheets, etc.), directory comparison tools, and reports from build and continuous integration tools, plus scripting “glue,” to create web-based BOM version comparisons. Figure 25, created for illustration purposes, shows the sample output of a homegrown BOM difference tool. 
 
Figure 25. Example BOM difference report 
Linkage Analysis Tool 
The goal of the dependency checker is to flag problematic code combinations at the dynamic and static link level, specific to C and C++ programming languages. The tool identifies a linkage conflict between the license of the binaries and the license of the libraries it links to, based on predefined license policies that the user of the tool has already defined. 
There are many tools that can be used together to fulfill the function of dependency checking, including the Source Code Identification Tools listed above, many static analysis tools, reporting tools from build and integration suites, and many home-grown code analysis tools. The main requirements for dependency mapping are the abilities to:

. Identify linking among binaries and libraries
. Identify licenses for binaries and libraries




. Connect with license scanning tools or consume the output thereof
. Configure to match company policy preferences to flag linkages that violate those policies (e.g., linking with GPL-licensed code) 

In this author’s experience, Dependency Mapping tools, much like BOM tools, are usually home-grown and/or built as mash-ups of existing tools and capabilities. 
One off-the-shelf open source tool of this type is The Linux Foundation Dep-Checker (http://git.linuxfoundation.org/dep-checker.git/).



CHAPTER 7

MANAGING COMPLIANCE INQUIRIES

This chapter presents guidelines for handling compliance inquires. These guidelines aim to maintain a positive and collaborative attitude with requesters while investigating allegations and ensuring proper actions when violations actually occur.

Several organizations have received negative publicity and/or have been subject to legal action after ignoring requests to provide compliance information; did not know how to handle compliance inquires; lacked or had a poor compliance program; or simply refused to cooperate, thinking (incorrectly) that license terms were not enforceable. Today, best practices inform us that none of these approaches are beneficial to any party involved. Therefore, companies should not ignore compliance inquiries . rather, they should acknowledge receipt of inquiries, inform inquiring parties of pending response, and provide an estimated date for follow-up. 
Compliance inquiries can include requests for:

. Access to source code in accordance with a written offer to provide source code licensed under GPL, LGPL, or other licenses
. Access to source code for an undisclosed component that was discovered in a product
. Verification of whether a specific open source component is used in a product or service
. Update to an out-of-date attribution or copyright notice
. Providing files missing from open source packages made available as part of license obligations




Companies usually receive compliance inquiries through a dedicated email address that they advertise in their written offer or as part of their open source notices.

RESPONDING TO COMPLIANCE INQUIRIES 
This section introduces a method for responding to compliance inquiries. Figure 26 presents a sample inquiry response process that illustrates the steps a compliance inquiry goes through, from receiving the inquiry until its closure.

 
Figure 26. Process of responding to compliance inquiries 
Acknowledge

Once you receive the compliance inquiry, you should respond immediately, confirming receipt and committing to investigate by a specific date. 


It is important to understand the inquirer’s identity and motive and to verify whether the complaint is justifiable, accurate, and current. Realize that inquirers often don’t fully understand licenses, leading to mistaken assumptions and submissions. If an inquiry is missing information, request additional clarification, such as:

. The name of the affected product(s) or service(s) or the exact code of concern . The reason why a violation is believed to exist
. The name of the project code and license that may have been violated . A link to the project site 

Inform

It is recommended to maintain an open a dialog with inquirers. Always highlight your open source compliance practices and demonstrate historical good faith efforts toward compliance. Inform inquirers about your compliance program and practices, and assure them that you will investigate their question. It is also advisable to send updates of your internal investigation as they become available. 
Investigate

In this step, investigating reported allegations, you should refer to the compliance record for the component in question, review it, and verify if and how the compliance record compares with the inquiry. 
Report

After concluding the internal investigation within an acceptable period of time, and creating an internal record of the findings, you need to inform the inquirer of the results.



Close Inquiry

If the compliance inquiry was a false alarm, you can close the compliance inquiry ticket without any further action (other than informing the inquirer of that resolution).

Rectify

If the investigation uncovers an actual compliance issue, you should report back to the inquirer confirming that fact, with assurances that your organization will take all the necessary steps to bring your product or service back to compliance, specifying a date by which you expect to complete this task. It is your responsibility to resolve the issue with the inquirer, while being collaborative and showing good will. You need to show that you understand the obligations under the applicable license, communicate how . and when . you will meet the obligations.

Once you fix the problem, you should notify the inquirer immediately, and invite them to verify the solution.

Improve

If there was a compliance issue, you should call for an OSRB meeting to discuss the case, learn how this non-compliance occurred, and improve existing process and practices to ensure that such errors do not happen again.

General Considerations

. Treat all inquiries as formal inquiries, and work under the assumption that any information you disclose as part of the interactions with the inquirer can become public.
. Consider how your existing open source compliance efforts would measure up in an enforcement action, and work to improve your processes.




CHAPTER 8

OTHER COMPLIANCE-RELATED PRACTICES

This chapter highlights compliance best practices and various considerations outside of the actual compliance process.

EMPLOYEE APPRAISAL 
There are four challenges that all companies face with regard to engineering and compliance enforcement:

. Ensuring engineers consistently fill out request forms for each open source component they want to use
. Requiring engineers to respond in a timely fashion to compliance tickets . Verifying engineers are following the guidelines set by the OSRB
. Mandating engineers to take your internal open source compliance training 

A practice that has proved to be effective in helping companies face these four challenges is to include open source and compliance metrics as part of employee performance reviews. As a result, part of the developers’ yearly bonus will depend on the extent to which they have followed the compliance policies and procedures. Reviews may evaluate performance on whether employees: 


. Fill out OSRB forms for each open source component they use . Respond to compliance tickets without significant delays
. Complete the open source and compliance training within a time limit set by the manager
. Use open source within the guidelines that the OSRB has set and do not cause a compliance violation


In turn, to use compliance as a factor in employee performance reviews, the OSRB must track these issues for each developer:

. Components that were included in the software BOM that don’t have a corresponding approval
. Response time to compliance tickets
. Course completion . Compliance violations reported to the executive team


WEB PORTALS

Some companies maintain both an internal and an external open source web portal. The internal portal hosts compliance policies, guidelines, training material, announcements, and access to related mailing lists. The external portal offers a consistent means of posting source code of open source packages they use, in fulfillment of license obligations.

MESSAGING

The single most important recommendation with respect to messaging is to be clear and consistent, whether internally . explaining company goals and concerns around open source, or externally . facing community participants. Having a community-facing site is particularly important when responding to compliance inquiries.



TRAINING

The goal of open source and compliance training is to raise awareness of open source policies and strategies and to build a common understanding of the issues and facts of open source licensing. Training may also cover the business and legal risks of incorporating open source in products. It also serves as a way to publicize and promote an organization’s compliance policies and processes, and to promote a culture of compliance. 
There are formal and informal training methods. Formal methods include instructor-led training courses where employees have to pass a knowledge exam to pass the course. Informal methods include webinars, brown bag seminars, and presentations to new hires as part of the new employee orientation session.

Informal Training

Brown Bag Seminars

Brown bag seminars are usually presentations offered during lunchtime by either a company employee (in-house legal counsel, open source expert, compliance officer, etc.) or an invited speaker (most commonly a high profile open source developer). The goal of these seminars is to present and elicit discussions about the various aspects of incorporating open source in products or software stacks. These sessions can also include discussions of the company’s compliance program, policies, and processes. 
New Employee Orientation 
In some instances, the Compliance Officer presents on organization compliance efforts, rules, policies, and processes to all new employees as part of the new employee orientation session. On their first day, new employees would receive a 30-minute training on open source and compliance. As a result, the new employees will have all the necessary information they need, such as who are the internal subject matter experts, what intranet resources exist, and how to sign up for open source and compliance training. 


Formal Training

Depending on the size of the organization and the extent to which open source is used in commercial offerings, the organization can mandate that employees working with open source take formal instructor-led courses and be tested on their subject-matter proficiency.

SOURCE CODE MODIFICATION CONSIDERATIONS

It is strongly recommended to publish an internal-only set of guidelines in plain, non-legalistic language that establishes basic rules for modifying existing source code. For example:

. Source code modifications that will remain proprietary must not be made within an open source package, especially one that has derivative work obligations (e.g., GPL or LGPL). . Proprietary source code must not link to an open source library that has a derivative work obligation. Companies usually request formal OSRB approval for such action. . Ensure that any modifications to source code are documented in compliance with the open source license prior to distribution. . All modifications to open source code modules shall be captured in the revision history of the module (change log file). 

NOTICES CONSIDERATIONS 
One of the key obligations when using open source is to ensure clear and accurate documentation of copyright, attribution, and license information, and the availability of a written offer (for GPL/LGPL licensed source code). The sum of all of these documentation obligations is often referred to as open source notices. 


Companies using open source in their offerings must acknowledge the use of open source by providing full copyright attribution, and, in most cases, reproducing the entire text of the licenses of the open source software included in the product or service. Therefore, companies must fulfill documentation obligations by including copyright, attribution, and license notices text in the documentation of every product they ship and service they provide. 
There are two primary options for fulfilling documentation obligations requirements:

. Display the open source notices on the product itself. This is a viable option if the product has a user interface that allows the user to interact with it and pull up or display licensing information. An example of this option is a cell phone or a tablet. . Include the open source notices in the product manual or any kind of documentation accompanying the product. 

Some companies opt for both options when possible, in addition to maintaining these notices on a given website (optional, but also often adopted, and it’s low maintenance . basically just hosting the notices file on the website). The important takeaway from the notices considerations is to ensure that all open source notice requirements are satisfied prior to a product distribution or service launch.

DISTRIBUTION CONSIDERATIONS 
Generally speaking, companies want to ensure that any source code subject to open source distribution obligations is compliance-ready prior to product shipment. By thoroughly integrating compliance practices into the development cycle, distribution considerations can be greatly simplified and streamlined.



USAGE CONSIDERATIONS 
The following sections address considerations and caveats for using open source in a fully compliant manner.

Clean Bill of Materials (BOM)

Ensure that any inbound software does not contain undeclared open source. Always audit source code upon receipt from providers; alternatively, make it a company policy that software providers must deliver source code audit reports for code they supply.

OSRB Form for Each Open Source Component

Fill out an OSRB usage request form for each open source component in use. Avoid using any open source without explicit OSRB approval. 
Understand the Risks During Mergers and Acquisitions (M&A)

Understand the open source code in use and its implications as part of the due diligence performed prior to any corporate transaction.

Retired Open Source Packages

If an approved open source package is no longer in use, engineers must inform the OSRB to update the open source inventory; alternatively, the OSRB will discover that the package is not used anymore when they run the BOM diff tool.

Major Source Code Changes

If an approved package went through a major change, inform the OSRB to re-scan the source code; alternatively, the OSRB will discover that the package has been modified when they run the BOM diff tool. A major change in the design or implementation often impacts architecture, APIs, and use cases, and in some cases may have an impact on the compliance aspect.



Reference Original Source Code

Document the URL from which you downloaded the open source package in addition to saving an original copy of the downloaded package.

Upgrading to Newer Versions of open source 
Ensure that each new version of the same open source component is reviewed and approved. When you upgrade the version of an open source package, make sure that the license of the new version is unchanged from the prior version, as license changes can occur between version upgrades. If the license changed, contact the OSRB to ensure that compliance records are updated and that the new license does not create a conflict.

Compliance Verification Golden Rule

Compliance is verified on a product-by-product, service-by-service basis: Just because an open source package is approved for use in one context does not necessarily mean it will be approved for use in a second one.

Copy/Paste 
Avoid using source code snippets, and avoid copying/pasting open source code into proprietary or third-party source code (or vice versa) without prior documented OSRB approval. Such actions have serious implication on compliance.

Mixing Source Code with Different Licenses

Avoid mixing different open source licenses in a derivative work, as many open source licenses are incompatible with one another. It is highly recommended to seek legal support from your Counsel on this topic. 
Source Code Comments

Do not leave inappropriate comments in the source code (private comments, product code names, mention of competitors, etc.). 


Existing Licensing Information

Do not remove or in any way disturb existing copyrights or other licensing information from any open source components that you use. All copyright and licensing information must remain intact in all open source components, unless you are completely certain the license allows it to be changed.

ATTRIBUTION CONSIDERATIONS

Companies that include open source in a product need to provide required attribution to the end user. This section provides guidelines of how to fulfill open source attribution obligations. 
Attribution Types

Open source attribution requirements differ from license to license, but can generally be grouped into four categories:

Full License Text

A verbatim copy of the full license text is required for almost all open source licenses.

Copyright Notices

A verbatim copy of the copyright notices is required for many open source licenses. 
Acknowledgments Notices

Some open source licenses explicitly require author attribution. In most cases, open source projects maintain a file called AUTHORS that includes the list of contributors; you can use this information as part of the attribution notice. 


Information on Obtaining the Source Code

Most licenses with a source code redistribution obligation require that either the source code accompany the product or that the user receive a written offer with details on how to obtain the source code. The GPL and LGPL are examples of licenses in this category.

Presentation of Attributions

For each product or service containing or using open source, the attributions must be included in published user documentation (such as the product manual) distributed in printed or electronic form, such as a CD or a download from a website. If products or services possess a graphical user interface or a command line administrative interface, you can also provide the option to display the attributions via that UI. For product updates such as over-the-air (OTA) updates for cell phones, the attributions must also be revised when the product update includes new or updated open source components.

SPECIFIC LICENSE OBLIGATIONS 
“Must include a copy of the license in documentation available to the end user” 
The license of the open source component in question must be included in the user documentation for all products using this open source. 
RECOMMENDATIONS

. In some instances, such as with mobile phones or tablets, manufacturers are able to provide the notices on the actual device via a web browser or a PDF viewer (i.e., licensing text is available on the device either in HTML or PDF format). . For products with a user accessible file system, it is recommended that the license is included in the file system with a filename LICENSE to make it stand out and to be similar to the open source license filename. 



. For product updates, license information must also be updated. For instance, when a new software release becomes available, the updated release must include an update license information file to reflect any open source changes introduced in the new release. Changes may include:
. New open source used
. Deprecated/removed open source . Open source upgraded to a new version, which may require updating the attribution/copyright notices, and, in some rare cases, updating the license





“Must include copyright notices in documentation available to the end user”

The license of the open source component in question may require including copyright notices in the product document available to the end user.

RECOMMENDATIONS

. For all products, copyright information must be included in printed documentation (such as a user manual).
. If the use case includes a graphical user interface, the end user should be able to view the copyright information from an ABOUT or a LICENSE screen. . If the product has a user-accessible file system, the copyright information should be included in the file system in a file containing, for instance, all the copyright notices for all open source used in the product.
. For products updates, the copyright information must also be updated. 

“Advertising materials may need special acknowledgments” 


This advertising clause from the original BSD license is written as follows:

All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the University of California, Berkeley and its contributors.

Where applicable, all marketing and advertising material (including web-
based, magazines, newspapers, flyers, etc.) must display the acknowledgement.

GENERAL GUIDELINES

You’re probably already familiar with some of the guidelines that apply to open source licenses, such as not using the name of the open source project for endorsement, marking the source code modifications you have introduced, and preserving the original licensing, copyright, and attribution information. The following sections expand on these general guidelines in more detail. 
No Endorsing or Promoting

You cannot use the name of the open source project, authors, or contributors in any marketing, advertising, or documentation (hard copy, digital, or on the web) without prior written permission. 
Source Code Modifications Markup

When redistributing modified open source code, your modifications need to be clearly marked as such, including a copyright line for those modifications (company, year) while preserving the existing copyright lines. 
Some companies elect a different approach . providing the original open source code along with the company’s contributed patch files that apply against the original open source code. Following this approach, the company’s modifications are clearly separated from the original open source code.



Preserving Original License, Copyright, and Attribution

Whenever you are redistributing open source code, with or without modifications, you must preserve the original licensing information, copyright lines, and other attributions.

Source Code Comments

Do not leave any inappropriate comments in the source code, such as private comments, product code names, mention of competitors, etc. 
Existing Licensing Information

Do not remove or in any way disturb existing open source licensing copyrights or other licensing information from any open source components that you use. All copyright and licensing information is to remain intact in all open source components. 


Chapter 9

SCALING OPEN SOURCE LEGAL SUPPORT

Open source compliance is often more of an operational and logistical challenge than a legal challenge. Achieving compliance requires the proper policies and processes, training, tools, and proper staffing that enable an organization to effectively use open source and contribute to open source projects and communities, all while respecting copyrights of their respective holders, complying with license obligations, and protecting the organization’s intellectual property and that of its customers and suppliers.

However, legal counsel plays an indispensable role in supporting the open source compliance programs and core teams that most organizations create to ensure proper compliance. In this chapter, we look closely at the role of the Legal Counsel in ensuring open source compliance, and offer practical advice that a Legal Counsel can provide to the software development team. Such practical advice will enable software developers to make day-to-day decisions related to open source licenses without having to go back to Legal Counsel for every single question. 
PRACTICAL LEGAL ADVICE

Practical advice from Legal Counsel to software developers may include:

. License Playbooks: Easy-to-read, digest-form summaries of open source licenses intended for software developers . License compatibility matrix: A grid to help determine whether License-A is compatible with License-B. Software developers can use such a matrix as they merge incoming code from different projects under different licenses into a single body of code.
. License classification: An easy way to understand the different licenses, and the course of action needed when using source code provided under these licenses 



. Software interaction methods: A guide to understanding how software components available under different licenses interact, and if the method of interaction is allowed per company compliance policies
. Checklists: A consistent, foolproof way to remember what needs to be done at every point in the development and compliance processes 

In the following sections, we examine these five pieces of advice, provide examples, and discuss how they help software developers working with open source.

LICENSE PLAYBOOKS

License playbooks are summaries of commonly used open source licenses. They provide easy-to-understand information about these licenses, such as license grants, restrictions, obligations, patent impact, and more. License playbooks minimize the number of basic questions sent to Legal Counsel and provide developers with immediate legal information about these licenses.

Figure 27 (next page) provides an example license playbook for the GPL v2. Please note that this playbook is provided for illustration purposes only and its content should not be considered definitive. 




Figure 27. Example license playbook for GPL v2 (for illustration purposes only)

LICENSE COMPATIBILITY MATRIX

License compatibility is the determination of whether a software component and its license are compatible with one or more other components and their licenses (i.e., that their licensing terms do not conflict). Compatibility also 


addresses the appropriate licenses for works that combine two or more licenses (combined outlicensing). 
License compatibility challenges can arise when combining diverse open source software components, in source and/or object form, that are distributed under licenses with incompatible terms. The result of such combination is a licensing chimera, an aggregation of software components that for purely legalistic reasons cannot be redistributed.

An example of licensing incompatibility can be found in attempting to combine code distributed under the Apache version 2 license with software under the GNU GPL version 2.0 (due to patent termination and indemnification provisions not present in the older GPL license ). An example of license compatibility is combining code licensed under the X11 license, which is explicitly compatible with the GPL version 2.

Figure 28 illustrates the creation of a single source component that originated from multiple sources under different licenses. In this scenario, you must ensure the sources have compatible license terms that allow you to join them in a binary or an object file without any conflict.



Figure 28. Combining source coming under different licenses into a single binary



License compatibility is an area where development teams need detailed guidance from Legal Counsel and should never be left to draw their own conclusions. Such guidance can be provided via a License Compatibility Matrix that covers most popular licenses. An example matrix is provided in Table 7.

Table 7. Example license compatibility matrix (for illustration purposes only)

License-A

License-B

License-C

License-D

License-E

License-F

License-G

License-A

a

a

a

License-B

a

License-C

a

License-D

a

a

a

License-E

a

License-F

a

License-G

a

a





When development teams need to combine code under different open source licenses, they can refer to this matrix to determine if joining the software components in question creates a licensing conflict. When a new or novel license is encountered that isn’t included in the matrix, that license should be analyzed by the Legal Counsel, who should update the table accordingly.

LICENSE CLASSIFICATION

In an effort to reduce the number of questions received by Legal Counsel and to increase license and compliance process education, some companies opt to classify the most-used licenses in their products under a handful of categories. Figure 29 (next page) presents an example license classification, in which most-used licenses are divided into four categories.



Pre-approved Licenses 
Permissive open source licenses often fall under this category. Source code available under these licenses may be pre-approved for use by developers without having to go through the approval process with their manager and/
or legal counsel. Such pre-approvals usually also require the developer to capture any notices and to make sure they are sent to the documentation team.

Licenses Requiring Manager Approval

Manager approval is required for components distributed under these licenses, since in addition to notices fulfillment (publishing license text, attribution notice, copyright notice, etc.), you have the obligation to release any source code modifications.



Figure 29. Example license categories (for illustration purposes only) 
Licenses Requiring Legal Counsel Approval

Source code available under these licenses requires legal review and approval. This usually applies to licenses that have a patent clause. 


Prohibited Licenses

Some companies flag certain licenses as “not allowed” . usage not allowed by company policy. 
How can classifying licenses be helpful? 
The above license categories are a way to classify licenses to make it easier for developers to know the proper course of action when integrating code under these licenses. Furthermore, it makes it easy to create an association between a license and what needs to be done. Table 8 shows one easy way developers can remind themselves of the proper actions associated with various licenses.

Table 8. A simple how-to for license classifications

Which License

Action

License A

Use with no problem

License E

Get my manager’s approval

License I

Consult with Legal

License M

Can’t use this source code

Other

Ask my manager for course of action





Please note that these different scenarios are provided for illustration purposes only. You can set up a different classification model with different actions depending on your organization’s policies and guidelines.

SOFTWARE INTERACTION METHODS 
As part of the compliance process, there is usually an architecture review, the goal of which is to understand how any specific software component interacts with any other software component, and the method of interaction. Architecture review should identify:

. Components that are open source (used “as is” or modified) . Proprietary components






. Components originating from third-party software providers (both open source and proprietary)
. Component dependencies
. Use of shared header files
. Component run-time context (kernel/drivers/modules, middleware, libraries, applications, etc.)
. Inter-component dependencies beyond APIs (s/w buses, IPCs, web APIs, etc.)
. Inter-language bindings


Tables 9 and 10 (next page) provide additional information that Legal Counsel can provide to software developers. The tables illustrate which licenses can dynamically or statically link to which others, while respecting company policies. 
Table 9. Sample dynamic linkage matrix

Can Dynamically Link To

License-A

License-B

License-C

License-D

License-A

a

a

a

a

License-B

a

a

License-C

a

a

License-D

a

[Requires Pre-Approval]

a





For example, looking at Table 9, source code licensed under License-B can dynamically link to source code license under License-D. However, source code licensed under License-C cannot dynamically link to source code licensed under License-B. Also, note that linkages may not always be reciprocal between licenses.

Similarly, looking at Table 10, source code licensed under License-A can statically link to source code license under License-C. However, source code licensed under License-A cannot statically link to source code licensed under License-B. Some linkage combination may be allowed on a case-by case basis, which is why certain combinations note “[Requires pre-approval].”

Table 10. Sample static linkage matrix 
Can Statically Link To

License-A

License-B

License-C

License-D

License-A

a

a

License-B

a

[Requires Pre-Approval]

License-C

a

a

License-D

[Requires Pre-Approval]

a





In the event that the architecture review reveals any linkage issue (i.e., a static or dynamic linkage that does not follow company policy as defined in the linkage matrices), then the person responsible for driving the architecture review (usually the compliance officer) would notify the software developer responsible for that software component and request a correction. 
CHECKLISTS

Most companies establish checklists that are used within the development process at every major milestone. When it comes to open source compliance, several checklists can be developed and used before committing new external open source code to the product’s source code repository. One example is the following checklist, used before making source code available on an external website:

. All source code components have a corresponding compliance ticket.
. All compliance tickets have been approved by engineering and legal.
. All compliance tickets are clear of any unresolved subtasks attached to them.






. Notices for all of the software components have been sent to the Documentation team and included in product documentation.
. Legal has approved the written offer notice and overall compliance documentation.
. Source code packages have been prepared and tested to compile on a standard development machine.
. Source code provided is complete and corresponds to the binaries in the product.


Such checklists minimize the probability of error and ensure that everyone involved in open source management is aware of what needs to be done before moving to the next step in the process.

CONCLUSION 
Software developers need to be educated about the licenses on the various open source components they integrate and employ. Having Legal Counsel provide this education in a very practical way is extremely helpful, as it allows software developers to have access to documented practical advice that will help answer most of their daily legal-related questions. This practical advice usually revolves around:

. Inclusion of open source components into proprietary or third-party source code or vice versa
. Linking open source components into proprietary or third-party source code or vice versa
. Interaction methods between various software components (proprietary, third-party, open source)
. License obligations that must be met when using open source components






Open source compliance is easy to achieve once you have built up your compliance program, created a compliance policy and process, established staffing to ensure execution, and enabled your team with various tools to assist in the compliance automation aspect. 




ABOUT THE AUTHOR

Ibrahim Haddad (Ph.D.) is Vice President of R&D, and the Head of the Open Source Group at Samsung Research America, a wholly owned R&D subsidiary of Samsung Electronics Co. Ltd., South Korea. He is responsible for overseeing Samsung’s Open source strategy and execution, internal and external collaborative R&D projects, participation in key open source development projects, and representing Samsung in various open source foundations and open standards organizations. Prior to joining Samsung, Haddad was a member of the management team at The Linux Foundation responsible for technical and legal compliance projects and initiatives. Haddad’s career started at Ericsson Research where he spent five years focusing on advanced research for system architecture of wireless IP networks and on furthering the adoption of Linux and Open source software in carrier grade environments. He then joined Motorola as Technical Director managing the Open Source Technology Group and contributing to Motorola’s Open source initiatives. After Motorola, he ran the Open Source function at Palm as Director of Open Source responsible for the webOS open source strategy and compliance. He later supported Hewlett Packard in a consulting role with open sourcing webOS to become the open webOS project.

Haddad graduated with Honors from Concordia University (Montreal, Canada) with a Ph.D. in Computer Science. He completed his B.Sc. and M.Sc. (both in Computer Science) at the Lebanese American University. He is a Contributing Editor to the Linux Journal, Co-Author of two books on Red Hat Linux and Fedora, and Technical Editor for four books on Linux System Administration, Fedora Linux and Ubuntu Linux. He is known for his writing and speaking on topics ranging from open source legal compliance to using open source as a business strategy and an R&D tool to drive collaboration and innovation. 
Haddad is fluent in Arabic, English, and French. 
Twitter: @IbrahimAtLinux



The Linux Foundation promotes, protects and standardizes Linux by providing unified resources and services needed for open source to successfully compete with closed platforms.

To learn more about The Linux Foundation, please visit us at linuxfoundation.org.



