第5章

コンプライアンス プロセスとポリシー

本書の目的から、ここでの議論の焦点は、商用製品におけるオープン ソースとプロプライエタリやサード パーティ ソースコードとの統合や利用に当てます。ここでの議論では、テストや評価目的など組織内だけで利用されるオープン ソースのためのポリシーやプロセスは除外されますこの章では、基本コンプライアンス プロセスとインクリメンタル コンプライアンス プロセスや、インクリメンタル コンプライアンスを達成するためのガイドラインに加えて、利用ポリシーや利用プロセスも議論します。

ポリシー

利用ポリシーは、コンプライアンス プログラムの不可欠要素です。このポリシーは、長文や複雑なものである必要はありません。単純なポリシーでも、以下の項目を要求するものであれば、複雑なポリシーと同じように効果的であることができます。

. 技術者は、いかなるオープン ソースであっても製品に統合する前には、OSRBから承認を得ることが必要です。. サード パーティ企業から受け取るソフトウェアは、含まれているオープン ソースを全て特定しなければなりません。このことは、製品出荷前までにライセンス義務を実施することを確実にしてくれます。
. 全てのソフトウェアは、監査とレビューを受ける必要があります。これにはプロプライエタリ ソフトウェア、サード パーティ プロバイダーから受け取ったソフトウェア、そしてオープン ソース ソフトウェアを含みます。
. 製品は、顧客が受け取る前に、オープン ソース ライセンス義務を実施しておく必要があります。
. 一つの製品に対する承認は、たとえ同じオープン ソース コンポーネントを利用していても、別の製品への承認とはなりません。
. 全ての変更されたコンポーネントは、承認プロセスを通過しなければなりません。






これらの規則は、いずれのソフトウェア（プロプライエタリ、サード パーティ、オープン ソース）も製品基盤へ導入されるまでに監査され、レビューされ、承認されることを確実にします。さらに、それは、顧客が製品を受け取る前に、様々なソフトウェア コンポーネント利用に起因するライセンス義務を実行する計画を、企業が持つことを確実にします。
プロセス

コンプライアンス利用プロセスは、問題となるソフトウェア パッケージのソースコードのスキャン、発見された課題の特定と解決、法務レビューおよびアーキテクチャー レビューの実施、そのソフトウェア パッケージに対する利用許可に関する判断を含みます。

図14は、コンプライアンス利用プロセスの簡略化された図を示しています。この図は、プロセスの反復的な性質は示していません。より詳しい図は、図17（90ページ）に示します。.

図14. コンプライアンス利用プロセスの例

ソース コード スキャン

ソース コード スキャン フェーズで、全てのソース コードはソース コード スキャン ツールを使用してスキャンされます。図15（82ページ）は、ソース コード スキャンを開始する要因を示しています。それらは、





. 通常、技術スタッフによって記入されるOSRB利用フォームの到着。これは、技術者や開発者が、問題となるソース コードについての基本情報を提供するために記入する簡単なオンラインのフォームです。フォームの提出によって、（JIRAやBugzillaなどのシステムで）コンプライアンス チケットが自動的に生成され、ソース コード スキャン要求が監査スタッフへ送られます。. 定期的に計画された全プラットフォーム スキャン：こうしたスキャンは、ソフトウェア プラットフォームにOSRBフォーム無しで忍び込んでいるかもしれないオープン ソースを明らかにするのに非常に役に立ちます。. 前に承認されたソフトウェア コンポーネントに対する変更：多くの場合、技術スタッフは特定のバージョンのOSS コンポーネントを評価やテストして、新しいバージョンが利用可能になった時にそのコンポーネントを採用します。
. オープン ソースを開示しているか不明なサード パーティ ソフトウェア プロバイダーから受け取ったソース コード。作者やライセンスが不明であり、オープン ソースが含まれているかもしれないウェブからダウンロードしたソース コード。技術者がオープン ソース コードを模倣しているかもしれないし、プロプライエタリ ソフトウェアにオープン ソース コード使っているかもしれないようなビルドシステムに、入ってくる新しいプロプライエタリ ソフトウェア コンポーネント。





 



図15. ソース コード スキャンを開始するイベント

法務レビューへの準備中に、ソース コード スキャンを実施する担当者は、著作権や帰属を表記しているファイルに加えて、COPYING, README, LICENSEファイルなど、パッケージで見つかった全てのライセンス情報をコンプライアンス チケットに付けておくべきです。
特定と解決

特定と解決フェーズで、監査チームは、スキャン ツールでフラグをつけられたファイルやコード断片を検査し解決します。
Legal Review 
In the legal review phase, the legal counsel (member of the OSRB) reviews reports generated by the scanning tool, the license information of the software component, and any comments left in the compliance ticket by engineers and members of the OSRB. ライセンスに問題が無いならば、法務担当は、ソフトウェア コンポーネントに関して、入るライセンスと出るライセンスを決定し、コンプライアンス アーキテクチャー レビュー フェーズへコンプライアンス チケットを進めます。例えば両立しないライセンスをもつソース コードを組み合わせるなど、ライセンスに課題が発見されたときには、法務担当はこれらの課題にフラグをつけて、コードの再作業のためにコンプライアンス チケットを技術担当へ再割り当てします。ライセンス情報が不明確である、ライセンス情報が入手できない等、いくつかの場合には、法務担当は、不明瞭な点を明確にするとともに特定のソフトウェアに付与されているライセンスの確認をするために、プロジェクトのメインテナーやオープン ソース開発者にコンタクトします。

Architecture Review 
In the architecture review, the compliance officer and the engineering OSRB representative perform an analysis of the interaction between the open source, proprietary, and third-party code. これは特定されたアーキテクチャー図を検査することで実行されます。

. オープン ソース コンポーネント (そのままで利用、又は変更して利用) . プロプライエタリ コンポーネントサード パーティ ソフトウェア プロバイダー由来のコンポーネントコンポーネントの依存状態通信プロトコル特に、異なるオープン ソース ライセンスによって許諾されているような場合で、特定のソフトウェア コンポーネントが相互作用するか、または依存するような、他のオープン ソース パッケージ。


アーキテクチャー レビューの結果は、オープン ソースからプロプライエタリやサード パーティ ソフトウェア コンポーネントへ（同様にオープン ソース コンポーネント間で）影響を与えるようなライセンス義務の分析となります。コンプライアンス オフィサーは、例えば、プロプライエタリ ソフトウェア コンポーネントとGPLで許諾されたコンポーネントがリンクされるような課題を見つけたら、解決のためにコンプライアンス チケットを技術担当へ送ります。課題が無いならば、コンプライアンス オフィサーは、チケットを承認プロセスの最終段階へ送ります。 




最終レビュー

最終レビューは、通常はOSRBメンバが対面する会議で行い、OSRBは利用の許可または却下を決めます。ほとんどのケースでは、ソフトウェア コンポーネントが最終レビューの段階まで到達したら、（そのソフトウェア コンポーネントがもう使われていないなどの）何かの条件が現れない限り、そのコンポーネントは承認されます。承認されたら、コンプライアンス オフィサーは、承認されたソフトウェア コンポーネントのライセンス義務リストを準備し、義務実施のために適切な部署へ送ります。
プロセスの各ステージにおけるインプットとアウトプット

この節では、図16で示されるOSRB利用プロセスの5つのフェーズにおけるインプットとアウトプットについて議論します。これらのフェーズは、説明目的のものであって、実際のシナリオとは正確には一致しないかもしれません。 


図16利用プロセスのインプットとアウトプット





ソース コード スキャン段階

インプット

スキャン フェーズへのインプットは、技術者がオンラインで記入して提出するOSRB利用フォームとなります。表6 (98ページ)はフォームの詳細です。フォームは、ソース コード リポジトリ システムの中でのソース コードの位置も含めて、問題となっているオープン ソース コンポーネントに関する全ての情報を含んでいます。定期的な全プラットフォーム スキャンは、対応するOSRBフォーム無しにプラットフォームへソフトウェア コンポーネントが入らないことを確実にするために、数週間に1回程度実施されるべきです。

アウトプット

スキャン フェーズのアウトプットは、ソース コード スキャン ツールによって生成される報告です。これには、次のような情報が書かれます。

. 利用されている既知のソフトウェア コンポーネント、ソフトウェア構成リスト（BoM）として知られているもの影響があるライセンス、ライセンス文、義務の要約法務担当によって検証されるべきライセンス矛盾ファイル一覧表特定されたファイル依存関係コード一致特定保留中のファイル特定保留中のソース コード一致






特定と解決フェーズ

インプット

このフェーズへのインプットは、前フェーズでスキャン ツールによって生成された報告書になります。この報告書は、矛盾を起こしているライセンスや両立しないライセンスのような課題にフラグを付けています。課題がないならば、コンプライアンス オフィサーは、コンプライアンス チケットを法務レビュー フェーズへと進めます。. 解決すべき課題がある時には、コンプライアンス オフィサーは、コンプライアンス チケットにサブタスクを設定し、解決のために適切な技術者に担当を割り当てます。ある場合にはコードの再作業が必要となりますし、別の場合には単に状況を明確にするだけで解決することもあります。サブタスクは、課題の説明、技術担当によって実施されるべき解決提案、そして完了までの具体的な日程を含んでいるべきです。

アウトプット

このフェーズでは、サブタスクはクローズされた上で、全課題の解決がアウトプットとなります。コンプライアンス オフィサーは、ソース コードの再スキャンを依頼してスキャン報告書を作成し、前に上がった課題が解決済みになっていることを確認するかもしれません。コンプライアンス オフィサーは、レビューと承認を受けるために、コンプライアンス チケットを法務代表へ送ります。

Legal Review Phase 
Input

コンプライアンス チケットが法務レビュー フェーズへ届いた時には、コンプライアンス チケットは以下を含んでいます。

. ソース コード スキャン報告、スキャン フェーズで発見された課題が全て解決済みであることの確認
. チケットに付けられたライセンス情報のコピー：通常、コンプライアンス オフィサーは、ソース コード パッケージに含まれているREADME, COPYING, AUTHORSなどのファイルをコンプライアンス チケットに付与します。通常COPYING, LICENSEファイルに含まれているOSSコンポーネントに関するライセンス情報以外にも、著作権や帰属情報を入手することが必要です。この情報は、製品ドキュメントに適切に入れられます。. コンプライアンス チケットに関するコンプライアンス オフィサーからの（懸念点や追加の質問などの）フィードバック
. OSRBの技術代表や、内部的にこのパッケージを担当／保守する技術者（パッケージのオーナー）からのフィードバック


アウトプット

このフェーズのアウトプットは、コンプライアンスに関する法務の意見、問題となっているソフトウェア コンポーネントについての入るライセンスと出るライセンスに対する決定となりまソフトウェア コンポーネントは、異なるライセンスによって許諾されるソース コードを含むことがあるので、入るライセンスと出るライセンスは、複数のフォーム入ることがあります。

入るライセンス、出るライセンス

入るライセンスは、受け取ったソフトウェア パッケージに対するライセンスです。出るライセンスは、使用許諾するソフトウェア パッケージに対するライセンスです。あるケースでは、入るライセンスが（BSDのように）再許諾を許すような許容型ライセンスである場合には、企業はそのソフトウェアをプロプライエタリ ライセンスで再許諾します。より複雑な例としては、プロプライエタリ ソース コード、ライセンスAで許諾されているがライセンスBでも許諾可能なソース コード、ライセンスCで許諾されたソース コードが含まれるものがあります。法務レビュー期間に、法務担当は出るライセンスと入るライセンスを決める必要があります。

入るライセンス = プロプライエタリ ライセンス + ライセンスA + ライセンスB + ライセンス
出るライセンス = ?





アーキテクチャー レビュー

アーキテクチャー レビューの目的は、オープン ソース コードとサード パーティ、プロプライエタリ コードの間の相互作用を解析することです。アーキテクチャー レビューの結果は、オープン ソース コンポーネントがプロプライエタリ コンポーネントへ影響を与えるかもしれないライセンス義務の分析です。企業内のパッケージ オーナー、OSRB技術代表とコンプライアンス オフィサーが、通常アーキテクチャー レビューを実施します。もしライセンスの矛盾になるような依存関係を発見した場合、コンプライアンス オフィサーは、ソース コードの再作業によって依存関係問を題解決するためにチケットを技術担当に発行する。
インプット

監査されたソース コード、解決されている全ての課題。

アウトプット

OSRBメンバは、特定のコンポーネントに対してアーキテクチャ レビューを実施し、次のステップ（つまり最終承認）への準備が整っているという印をつけます。

最終承認フェーズ

インプット

このフェーズへのインプットは、ソフトウェア コンポーネントに関する全てのコンプライアンス記録です。それには以下が含まれます。

. スキャン ツールによって生成されたソース コード スキャン報告発見された課題、課題が解決された経緯に関する情報、課題が解決されたことを確認した人アーキテクチャー図、ソフトウェア コンポーネントが他のソフトウェア コンポーネントとどのように相互作用するかの情報 





. コンプライアンスに関する法務の意見、入るライセンスと出るライセンスに関する決定組み込み環境（C/C++）で適用可能であれば、動的リンクと静的リンクの解析 

アウトプット

このフェーズのアウトプットは、ソフトウェア コンポーネントの利用に関する、承認または却下の判断です。

詳細な利用プロセス

勿論、コンプライアンス手順に影響を与える多くの事情があります。図17（次ページ）は、いくつかの可能なシナリオと、コンプライアンス プロセスにおいて、一つのステップから別のステップへどのように状態遷移するかについて、詳細なプロセスを示しています。8つの可能なプロセスを議論します。これらのシナリオは、相互に排他的ではありませんし、唯一の可能なプロセスでもありません。これらは、図示と議論の目的のために提示します。
Scenario 1: The source code scanned is 100% proprietary 
Scenario 2: The source code scanned includes code with incompatible licenses 
Scenario 3: Issue with linkages identified during architectural review

Scenario 4: A source code package is not used anymore 
Scenario 5: Due diligence identified IP that will be released to meet license obligations

シナリオ6：検証ステップで解決すべき課題が特定される

Scenario 7: Source code is approved for use 
Scenario 8: Source code is rejected



図17コンプライアンス シナリオの一例





Scenario 1: Source code is 100% proprietary 
The scanned software component contains 100% proprietary code, and no open source code is declared or identified. このケースでは、迅速な処理を想定し、特定のコンポーネントのコンプライアンス チケットは、法務レビューに進められます。法務担当は、ライセンスをこのプロプライエタリ コンポーネントに付与し、アーキテクチャー解析とリンク解析の実施のためにコンプライアンス オフィサーへ送ります。

Scenario 2: Incompatible licenses 
The scanned software component includes source code that originated from multiple sources with incompatible licenses. 他の例としては、プロプライエタリ ソース コードとGPLで許諾されたソース コードとが組み合わされたものがあります。このシナリオでは、コンプライアンス チケットにスキャン報告が付けられ、プロプライエタリ ソフトウェア コンポーネントからGPLソース コードを取り去るという作業要求と共に、企業内でそのソフトウェア コンポーネントを管理している開発者に作業が割り当てられます。いったん開発者がコードの再作業を行った後は、そのソフトウェア コンポーネントは、法務レビューへ進む前に、GPLコードが取り除かれたことを確認するために、再スキャンされます。
シナリオ3：リンクに関する課題が特定される

このシナリオでは、コンプライアンス チケットは、法務レビューをパスして、アーキテクチャー レビューとリンク レビューに進みます。コンプライアンス オフィサーは、リンクに関する課題を見つけます。このケースでは、コンプライアンス オフィサーは、コンプライアンス チケットを解決フェーズに送り、リンクに関する課題を解決するように開発者に割り当てます。
Scenario 4: Source code no longer used 
In this scenario, Engineering decides that a software component is not going to be included in the product while the software component is in transit through the compliance process. 結果として、そのコンプライアンス チケットは（却下として）クローズされます。当該コンポーネントが次に利用される場合には、そのコンポーネントが製品に組み込まれるか、ソース コード リポジトリに入る前に、コンプライアンス プロセスに再入力して承認を得なければなりません。
Scenario 5: IP at risk of requiring release 
In this scenario, legal review uncovered that closely-held intellectual property has been combined with an open source code package. 法務担当は、この件にフラグを付けて、オープン ソース コンポーネントからプロプライエタリ ソース コードを取り除くために、コンプライアンス チケットを技術担当に割り当てます。技術担当がオープン ソース コンポーネント中にプロプライエタリ ソース コードを保持し続けることを固辞した場合には、OSECはプロプライエタリ ソース コードをオープン ソース ライセンスの下でリリースする決定をしなければならなくなるでしょう。

シナリオ6：未解決の課題が見つかる

OSRBメンバーがソフトウェア コンポーネント中にコンプライアンスに関する課題を発見したような全てのケースは、コンポーネントは同じライフ サイクルを進みます。

. 技術担当は、特定された課題を解決します。
. 監査チームは、ソフトウェア コンポーネントを再スキャンし、新しいスキャン報告を提出します。
. 法務担当は、新しい監査報告を確認します。. コンプライアンス オフィサーは、アーキテクチャー解析、リンク解析において未解決の課題がないことを確認します。 

シナリオ7：ソースコードは、承認される

ソフトウェア コンポーネントが、監査、法務レビュー、コンプライアンス承認を全て受けたら、OSRB会議でその結果をレビューします。もし、状況に何も変更が無いならば、つまり、まだ使用されており、同じバージョンであり、利用形態が同じであること（次ページの図18）コンプライアンス オフィサーは、

. あるOSSソフトウェア コンポーネントのバージョンXは、製品YのバージョンZでの使用が承認されたことをソフトウェア一覧表に反映させます。





. 製品に付属する文書中のエンド ユーザーへの通知を更新して、製品やサービスにオープン ソースが使用されていることを反映させるため、文書チームへチケットが発行されます。
. 製品出荷前に、頒布プロセスを開始させます。


 
図18OSRB承認後に実施されるステップ

シナリオ8：ソース コードは利用が却下される

このシナリオでは、OSRBは、特定のソフトウェア利用の却下を決定します。そういう却下につながるような理由がいくつかあります。

. そのソフトウェア コンポーネントは、もはや使われない。
. 容易に解決できないリンクに関する課題がある。このケースの結論は、開発を中止し、より良いソリューションを設計しなおすというものです。






. 容易に解決できない両立しないライセンスがある。このケースの結論は、開発を中止し、より良いソリューションを設計し直すというものです。
. 特定のコンポーネントの利用やリリースを阻害する知的財産に関する課題がある。
. その他の理由：それぞれのケースは、問題となっているソフトウェア コンポーネントの個別条件や、最終製品やサービスでの利用形態に依存します。


インクリメンタル コンプライアンス プロセス

インクリメンタル コンプライアンスは、すでに初期コンプライアンスが完了しているベースライン版に製品フィーチャーを追加する時に、コンプライアンスを維持するために実施されるプロセスです。（ベースライン コンプライアンスとも呼ばれる、初期コンプライアンスは、開発が開始された時に発生し、製品の初期版が出荷されるまで継続します。）インクリメンタル コンプライアンスは、ベースライン コンプライアンスを確立するために必要とする努力と比べると小さな努力ですみます。

図19は、製品開発とインクリメンタル コンプライアンスを示しています。

図19インクリメンタル コンプライアンス
この例では、コンプライアンス チームは、ソフトウェア ベースライン（ここでは仮にV 1.0と呼びます）に含まれる全てのオープン ソースを特定し、オープン ソース コンポーネント全てが、コンプライアンス プロセス全体を通るようにします。製品が出荷されたら、追加機能や不具合修正などを含む開発は、新しいブランチで行われます。この例では、V 1.1です。
インクリメンタル コンプライアンスに関しては、解決すべきいくつかの課題が発生します。Specifically, you must correctly identify the source code that changed between version 1.0 and version 1.1, and verify compliance on the delta between the releases: 
. 新しいソフトウェア コンポーネントが、導入されているかもしれません。. 既存のソフトウェア コンポーネントが、既に使用中止になっているかもしれません。. 既存のソフトウェア コンポーネントが、新しいバージョンに更新されているかもしれません。. ソフトウェア コンポーネントのライセンスが、バージョンの間で変更されているかもしれません。
. 既存のソフトウェア コンポーネントが、不具合修正を含むコード変更や、機能やアーキテクチャーに対する変更を含んでいるかもしれません。 

The obvious question is “How can I keep track of all of these changes?” 
The answer is simple: a bill of material difference tool (BOM diff tool), as discussed in Chapter 7. ここでの議論のために簡単に言うと、そのツールは、同じ製品やサービスに使う2つのBOMの差分を与えてくれます。製品V1.1のBOMと製品V1.0のBOMがあると、その差分を計算します。ツールの出力は以下のようなものです。

. V1.1で追加された新しいソフトウェア コンポーネントの名前更新されているソフトウェア コンポーネントの名前使用されなくなったソフトウェア コンポーネントの名前






この情報を知ることで、インクリメンタル コンプライアンスの達成は、比較的容易なタスクになります。

. 新しいソフトウェア コンポーネントをコンプライアンス プロセスに入力します。
. 変更されたソフトウェア コンポーネントのソース コードの差異を計測し、再度ソース コードをスキャンするか、あるいは前のスキャンは信頼に足るものかを、決定します。
. もはや使われなくなったソフトウェア コンポーネントをソフトウエア管理表から除いて更新します。


図20（次ページ）は、インクリメンタル コンプライアンス プロセスの全体像を示しています。それぞれの製品リリースに対するBOMファイルは、ビルド サーバーに保存されます。BOM差分ツールは、異なる製品リリースに対応する2つのBOMファイルを入力として受け取り、前に議論したように、変更リストを生成します。この時点で、コンプライアンス オフィサーは、リリースに含まれる全ての新しいソフトウェア コンポーネントに対して新しいチケットを発行し、ソース コードが変更されている部分はコンプライアンス チケットを更新した上で、できればプロセスを再実行し、使用中止になったソフトウェア コンポーネントを承認リストから削除して、ソフトウェア管理表を更新します。
OSRB利用フォーム

OSRB利用フォーム（要求フォームとも呼ばれます）を記入することは、オープン ソース ソフトウェアを企業へ導入する際の最も重要なステップの一つです。ですから、真剣に取り扱うべきものです。開発者は、該当するオープン ソース コンポーネントの利用の承認を要求するオンライン フォームを記入します。そのフォームは、提案されているオープン ソース コンポーネントの利用をOSRBが承認または却下することを決めるのに必要な情報を与えるような、いくつかの質問から構成されています。図6（97ページ）は、OSRB利用フォームで要求されている情報を示しています。通常、これらの値は、データ入力を効率的に行うために、プルダウン メニューで選べるようにします。










図20インクリメンタル コンプライアンス プロセスの例

ダウンロードされたオープン ソース パッケージに対する注意

ウェブからダウンロードしたオープン ソース パッケージをオリジナル形式で保管しておくことは不可欠なことです。これらのパッケージは、後の段階で（頒布の前に）、オリジナル パッケージと変更されたパッケージの差異を計算することによって、ソース コードに加えられた全ての変更を検証し追跡するために、使用されます。もし、サード パーティ ソフトウェア プロバイダーがオープン ソース コードを使っていれば、そのコードを製品に統合する製品チームは、OSRB利用フォームに、利用するオープン ソースを記載して提出しなければなりません。もし、サード パーティ ソフトウェア プロバイダーが、ソースコード無しにバイナリだけを提供している場合には、製品チームと、そのサード パーティ ソフトウェア プロバイダーと連絡を取っているソフトウェア供給マネージャは、両方、またはどちらかが、（例えばスキャン報告などによって）提供されたソフトウェアにオープン ソースが含まれていないことを確認しなければなりません。 




表6OSRB利用フォームの一部として要求される情報

区分

説明

Submitter Information 
Company ID of employee submitting the form (facilitating retrieval of employee name, phone, email, manager, location, and team from a company directory)

OSS Code Information 
Package name and version

ソフトウェア区分：オープンソース、内製、サード パーティ パッケージ

ウェブサイトURL

説明

ライセンス名とバージョン

ライセンス ウェブサイトURL

ソフトウェア カテゴリ：OS/kernel, driver, middleware, library, utility, other (explain), etc.

OSSコンポーネントを利用する利点

コンポーネントやパッケージとは別の手段

ソフトウェアを利用しないことによって発生すること

SCMSでのソフトウェアの位置

ユースケース

内部利用（ツール、IT等）

製品の一部として出荷

外部向けサービスを可能にする

変更

変更されているか (Y/N)?

会社IPは含まれるか?

IPを開示するか?









アーキテクチャー図に対する注意

アーキテクチャー図は、あるプラットフォーム上での様々なソフトウェア コンポーネント間の相互作用を示します。図21は、アーキテクチャー図の一例です。この図では、以下を示します。

. モジュールの依存関係プロプライエタリ コンポーネントオープン ソース コンポーネント（変更後とオリジナル）動的リンクと静的リンクカーネル空間とユーザー空間共有されているヘッダ ファイル通信プロトコル課題となっているソフトウェア コンポーネントが、相互作用する、または依存関係にあるような、他のオープン ソース コンポーネント。特に、別のオープン ソース ライセンスによって許諾されている場合。 

図21（CやC++に依存するような組み込み環境へ適用する）アーキテクチャー図のテンプレート 




Rules Governing the OSRB Usage Form 
There are several rules governing the OSRB usage form. ここにいくつか挙げます。

. フォームは、特定の利用状況における、特定の製品でのオープン ソースの利用に対して適用します。それは、全製品の全ユースケースに対するそのオープン ソース コンポーネントの全般的な承認ではありません。
. フォームは、監査活動の基礎となり、OSRBが、フォームで表現された利用計画と、監査やアーキテクチャー レビューの結果とに矛盾が無いかを確認するための情報を提供します。. フォームは、該当するオープン ソース コンポーネントの利用計画が変更になった場合には、更新して再提出されなければなりません。
. 技術担当がそのオープン ソースを製品ビルドに統合する前に、OSRBがフォームを承認しなければなりません。
. ライセンスが特許許諾条項や非係争条項を要求している時には、OSECがオープン ソース利用の承認をしなければなりません。 

監査

良い監査プラクティスは、製品やサービスの一部として採用される全てのソフトウェアの由来を完全に把握することを確実にします。このことを理解することによって、オープン ソース ソフトウェアライセンス義務を果たす組織能力が出来上がります。監査ポリシーは、単純でわかりやすいものです：ポートフォリオ／スタックに含まれる全てのソース コードは、監査され、コンプライアンス チケットに監査報告がつけられなければなりません。監査プロセスは、技術担当が特定のソフトウェア コンポーネントに対するOSRB利用フォームを提出した後に、続いて実行されるワークフローから構成されます。 




監査プロセスは、次のフェーズで構成されます。（図22）

監査すべきソース コードの場所を含む、OSRB利用フォームを受け取ります。

. ソース コードのスキャンを実施します。. スキャン ツールでフラグがつけられたコンポーネントの分析を実施します。
. 最終監査報告を作成します。 



図22：基本監査プロセス

ソース コード頒布

ソース コード頒布プロセスとポリシーの目的は、以下を確実にすることです。

. オープン ソース ソフトウェアを含む製品を購入する顧客やサービスを利用するユーザは、適用可能な場合に、ソース コードを受け取る権利があることを通知される。頒布したソース コードは、頒布サイトに転送されるソフトウェアのバイナリ バージョンと照らし合わせて正しいバージョンであり、また、適切にラベル付けされている。


Distribution Incentives 
There are three major business incentives to distribute open source code: Meeting license obligations, contributing enhancements to an open source project, and creating and contributing code to a new open source project.





ライセンス義務の順守

この例では、組織は、オープン ソースを製品やサービスに組み込んでおり、オープン ソース コンポーネントライセンスにより、ソース コードに加えた変更を含めて、ソース コードの開示義務を持っています。コミュニティとの相互関係が双方向であるのに対して、このことは一方向頒布と略式に考えられます。
既存のオープン ソース プロジェクトへの修正の貢献

あるケースでは、オープン ソース ライセンスは、ライセンス コンプライアンスの目的からすると、修正を開示する義務を含んでいません。しかしながら、技術的な負荷、言い換えればこれらの修正を保守するコストを抑えるために、修正をリリースし、可能なアップストリームに載せます。
新しいオープン ソース プロジェクトの設立

組織は、ビジネス的な必要性から、新しいオープン ソース プロジェクトを設立し、ソース コードの貢献をするかもしれません。このケースは、既存のオープン ソース プロジェクトへ、（不具合修正や新規機能追加の形で）ソース コードの貢献をすることとは異なります。
頒布プロセスとポリシー

頒布ポリシーの目的は、ソース プロジェクト コード（＊＊＊）の供給プロセスに強い影響を与え、オープン ソース コードの入手性に関するオープン ソース ラインセンス義務の遵守するために、様々な流通[ロジスティックス]に対するガイドラインを提供することです。この頒布ポリシーは、ライセンスがソース コードの再頒布を要求するようなソフトウェア パッケージに適用されます。公開プロセス、公開方法、モード、チェックリストなどをカバーします。

プロセスを開始させる前に、ソース提供の方法と様式を決めなければなりません。プロセスは、外部へ頒布するソース コードの準備をもって始まり、頒布前チェックリストの確認、ソース コード パッケージの入手性の確認、そして、頒布後チェックリストの確認と続きます。 




図23は、頒布プロセスの例を示します。It includes: 
. ソース コード提供方法を決めます。頒布様式を決めます。外部頒布のためにソース コード パッケージの準備をします。前に置かれた全ステップが問題なく完了していることと、外部頒布に向けてソース コード パッケージの準備が整っていることを確実にするために、頒布前チェックリストを全て確認します。. 頒布を実行します。頒布プロセスの一部で発生するかもしれない誤りを把握するために、頒布後のチェックリストを確認します。 

 
図23公開プロセスの例 




頒布方法と様式

ソース コード パッケージを入手可能な状態にする、3つの主な頒布方法があります。
即時コンプライアンス方法

この頒布方法に従い、製品やソフトウェア スタックの出荷時または直後にコードを提供し、一般的にはウェブサイトからダウンロードによって、コードを欲しい人は誰でも入手できるようにします。開発者は、入手資格を確認されることなく（つまりソース コードの入手資格を得るために製品を購入する必要なく）、直接ソースコードにアクセスが許されますので、このやり方は通常開発者にとって頒布の好ましい方法となります。あるケースでは、即時コンプライアンス方法は、メディアのディレクトリproduct/deviceにソース コードを含めることで、達成することができます。

この頒布方法には2つの不利な点があります。まず第1に、全てのソース コードをパッケージ化し、製品出荷の準備を整える出荷日までに、ウェブサイト上でソース コードを入手可能にするという多大な努力が必要です。第2に、将来のソース コード頒布でも同じ方法が取られるだろうという期待を築いてしまいます。これは、毎回満足させるべきとても高い期待となります。

オンライン供給方法

この頒布方法によれば、ソース コードを入手する資格を持っている顧客だけが、排他的にアクセス権を与えられます。この方法は、アクセスしてソース コード パッケージをダウンロードするための認証を必要とするセキュアなウェブサイトにより最もよく管理されます。

オン デマンド コンプライアンス

この頒布方法は、オンライン供給方法の変形で、書面による通知(GPL/LGPL系のライセンスの場合)を利用して、どのようにすればソース コードを要求したりアクセスしたりできるかを顧客に伝えます。ある組織は、企業窓口emailや郵便アドレス(書面による通知に書かれている)に対して書面で要求が送られるのを好みます。結果として、顧客は、入手資格を確認された後で、ソース コードのコピーを受け取ります。このコンプライアンス方法は、製品出荷後に、ソース コード パッケージ化終了のための追加の予備時間を組織に与えてくれます。しかしながら、一般的に言って、ソース コードへのアクセスを要求してくる人たちの入手資格を確認するのにかかるオーバーヘッドや、要求を満たすために必要となる資源を考えると、好ましい頒布方法とは言えません。加えて、GPL/LGPL系のライセンスに特有のケースとして、書面による通知は3年間有効でなければなりません。それゆえ、製品を最後に出荷した日から少なくとも3年間は、コード頒布を管理しなければなりません。CD-ROMでのソース コード頒布を選んだ場合には、追加のコストがかかりますし、ソース コード パッケージを格納したCD-ROMを生成するプロセスを確認する追加の検証ステップも必要になります。

頒布チェックリスト

顧客や一般向けのウェブサイトで公開する前に、オープン ソース パッケージの正当性を確認するための多くのチェックポイントがあります。更に、追加の正当性確認は、一般に入手可能になった後にも必要になります。以下では、頒布前、頒布後のプロセスについて概要を示します。

Pre-Conditions for Distribution 
The following is a list of conditions that should be met before source code packages are ready for distribution (aka distribution hygiene):

. オープン ソース パッケージは、利用フォームで宣言された範囲で、その利用をOSRBによって承認されています。. オープン ソース パッケージを含む製品は、出荷可能か、すでに出荷されています。






. もし、GPL/LGPLで許諾されたコードを開示するのであれば、自分たちが加えた変更について、コードと文書を提供することを確実にします。. リンギスティック レビューを実施しています。このことはコンプライアンス関連ではないですが、将来使用予定の製品コード名、下品または粗野な言葉づかい、個人やemailアドレスやURLへの参照などがコードに残されたままであったというような課題が過去にありました。


頒布前チェックリスト

以下は、ソース コードの一般公開や頒布の前に行うチェックリスト例です。

. オープン ソース パッケージに加えられた変更は、文書化されて、オープン ソースのリリース ノートに変更履歴として含まれていることを検証します。変更されたソース コード ファイルは、著作権表記や免責事項の記載や一般的な変更履歴への記載を含んでいることを確認します。
. ソース コード パッケージに含まれている全ての内容物は、技術担当によってレビューされ、OSRBによって確認されていることを、確認します。. オープン ソース パッケージは、企業のものでないマシンでコンパイルできることを確認します。企業で初期設定したマシン上でパッケージをコンパイルする時に、環境やコンパイラが全て事前に構成されたり設定されているということがよくあります。しかしながら、別のシステムでパッケージをコンパイルしようとする場合には、コンパイラの設定や、Makefileのオプションや、Include path等が適切でないかもしれません。このステップの目的は、頒布しようとしているオープン ソース パッケージが、平凡なエンド ユーザー システム上でコンパイルできることを確実にすることです。. 製品マニュアルを更新します。：製品がオープン ソース ソフトウェアを含むことを言及します。
. 製品に含まれる異なるオープン ソース ソフトウェアに対応する全てのライセンスのリストを含めます。









. 適切な著作権と帰属に関する通知を提供します。
. オープン ソース パッケージのコードへのアクセス方法（書面による申し出）、ウェブページからのダウンロードや、製品マニュアルで提供される特定のアドレス宛てのemailや郵便による問い合わせなどを提示します。



. 書面による申出が、そういう通知を必要とするソース コード（基本的に、GPL/LGPL系ライセンスで許諾されたコード）全てを包含しているかを検証します。
. ソース コードに不適切なコメントが残っていないことを確実にするために、リンギスティック レビューを実施します。ある企業では、リンギスティック レビューを通すことを忘れてしまい、製品がハックされた時に、ソース コード中に残っていた不適切なコメントが発覚し、困惑しました。リンギスティック レビューを実施する他の重要な理由は、ソース コードやコメントが、将来使用する開発コード名や機能を言及していないことを確実にすることです。. 既存のライセンス表記、著作権表記、帰属表記に手が入っていないことを確実にします。. 製品に搭載されて出荷されるバイナリに対応したソース コードであること、そのソース コードが製品とともに出荷されるライブラリを構成していること、ビルド手順がソース頒布（派生するバイナリは、タイム スタンプを除いて通常同一のものになります）に含まれていること、を検証します。
. パッケージが、OSRB利用フォームで定義されたリンク関係や相互作用を守っていることを検証します。例えば、開発者がコンポーネントをLGPLで許諾されたライブラリと動的にリンクすると宣言したならば、その通りになっていて、代わりに静的リンクを使っていないことを検証する必要があります。これは、リンク依存関係マッピング ツールを使って検証されます。 





. もし、まだ入っていなければ、オープン ソース パッケージのソース コード ルート フォルダにあるLICENSEファイルに、ライセンス文のコピーを追加します。
. もし、ソース コード パッケージが、特別なビルド ツールや環境を必要とするならば、READMEファイル等にその詳細を記載します。 

一般公開後のチェックリスト

以下は、ソース コードを一般公開した後に、ソース コード パッケージが入手可能になっているかを検証するチェックリストの例です。


. ソース コード パッケージは、ウェブサイトに問題なくアップロードされ、外部コンピュータからダウンロード可能になっています。
. ソース コード パッケージは、外部コンピュータでエラー無しに圧縮解凍できます。
. ソース コード パッケージは、外部コンピュータでエラー無しにコンパイルとビルドができます。


Written Offer 
Below is an example of a written offer to provide the source code:

To obtain a copy of the source code being made publicly available by FooBar, Inc. (“FooBar”) related to software used in this FooBar product (“Product”), you should send your request in writing to:

Foobar株式会社

Attention: Open Source Compliance Inquiries 




Street Address
City, State, Postal Code
Country 
FooBar makes every possible effort to make the source code publicly available at http://
opensource.foobar.com (“Website”) within reasonable business delays. 書面による要求を出される前に、ソース コードが既に公開されているか、このウェブサイトを確認して下さい。


代替手段として、郵便ではなくemailにて要求を受けたいならば、書面による通知の文言を少し変更します。 

To obtain a copy of the source code being made publicly available by FooBar, Inc. (“FooBar”) related to software used in this FooBar product (“Product”), you should send your request in writing to opensourcecompliance@foobar.com.

FooBarは、妥当な遅延の範囲で、http://opensource.foobar.com (“Website”)にてソース コードが入手可能になるように可能な全ての努力をいたします。書面による要求を出される前に、ソース コードが既に公開されているか、このウェブサイトを確認して下さい。





第6章

コンプライアンス プロセス管理の推奨プラクティス

この章では、オープン ソースを商用製品に統合する際の、推奨プラクティスや様々な考察を扱います。3つの部分に分かれます。

. 推奨プラクティスは、オープン ソース コンプライアンス管理の一貫プロセスの中の様々なステップに配置されます。. ソース コード改変、告知、頒布、ソフトウェア設計、利用、リンク、コード結合など関連したコンプライアンスについての考察。. 推奨プラクティスは、オープン ソース コンプライアンス プログラムの中の様々な不可欠要素に関連します。


COMPLIANCE PROCESS 
As a refresher, the compliance management process includes the various steps a software component goes through before it is approved for inclusion in a product software stack. プロセスは、製品ビルド システムへ統合する様々なソフトウェア コンポーネントを特定することで始まり、結果として発生するライセンス義務をリスト化することで終わります。
以下の節では、コンプライアンス要求を処理するための推奨プラクティスを示します。推奨プラクティスは、図24（次ページ）に示したコンプライアンス プロセスの中のステップに直接配置されます。

Identification Phase 
In the identification phase of a compliance process, organizations identify all of the components or elements entering the build system, origin, and license information. 入るソース コードには、主に3つの由来があります。





. 内部開発者によって作られたプロプライエタリ ソフトウェア。オープン ソースのコード断片を含んでいるかもしれません。コンポーネント レベルでオープン ソース コードと依存関係を持ったり、リンクされたりして、オープン ソースと統合されているかもしれません。独立プロバイダやコンサルタントによって開発され、商用ライセンスやオープン ソース ライセンスで許諾されたサード パーティ ソフトウェア。このソフトウェア カテゴリは上と同様にコード断片や依存関係を含んでいるかもしれません。
. オープン ソース プロジェクトのメンバーによって開発されたオープン ソース ソフトウェア。




図24コンプライアンス一貫管理プロセス 

入るソフトウェア コンポーネントは、全て特定され、コンプライアンス プロセスを通されることが推奨されます。 




Source Code Auditing 
There are three core recommended practices for source code auditing or scanning:

全ソース コードスキャン

開発チームがオープン ソースをプロプライエタリ ソース コードやサード パーティ ソースコードに使用しているかもしれないので、製品やサービスに統合される全てのソース コードをスキャンします。更に、開発チームは、オープン ソース コンポーネントに変更を入れているかもしれませんが、これは、追加の精査を必要とするかもしれませんし、潜在的に追加義務を負うかもしれません。従って、製品に組み込まれている全てのソース コードを監査し、特定することが重要です。

前に承認されているパッケージの新しいバージョンのスキャン

ある場合には、前に承認されているパッケージが変更されて（同じ条件や異なる条件で）再利用されたり、そのまま再利用されたり、変更されて異なる製品やサービスに再利用されたり、新しいバージョンがダウンロードされてソフトウェア スタックに使用されたりします。コンプライアンスは、製品ごと、サービスごとに確認されますので、一つのケースでの利用承認は、必ずしも全てのケースに適用されることにはなりません。

規則として、開発者が前に承認されたコンポーネントを変更する時や、別の条件で前に承認されたコンポーネントの利用を計画する時には、その都度、ソース コードは再スキャンし直し、コンポーネントは再度承認プロセスを通過するべきです。
Ensure review and approval of each new version of open source components 
License changes can occur between version upgrades. 開発者がオープン ソース パッケージのバージョンを更新するときには、新しいバージョンに適用されているライセンスが、古いバージョンに適用されていたものと同じであることを確認します。
「早めのリリース、頻繁なリリース“release early and release often.”」というオープン ソースに関する格言があります。 




オープン ソース開発モデルは、プロジェクト初日に始める頻繁なリリースを推奨しています。これによってユーザーに評価実験や不具合報告の機会を与えます。その目的は、品質保証活動が開発プロセスの定常的な一部となることです。
「早めに、そして頻繁にスキャン“Scan early and often”」は、同じ精神に従っています。開発プロセスにおいて早期にソースコードスキャンを行い、それを定常的に継続することは、コンプライアンスの取り組みが開発の取り組みに後れを取らないようにします。組織は、プロセスがより効率的になるように、新しいスキャンが必要とされる時を定義した条件リストを作成すべきです。
The “scan early and often” approach has several advantages: 
. それは、プロセスの早い段階でのコンプライアンス課題の発見を助けます。
. それは、出荷スケジュールへ深刻な問題を与えないような許容できる期間で、発見された問題へ解決をもたらすことを促進します。. それは前に実行したソース コード スキャンの中でスキャンが必要なソース コード差分を減らすので、インクリメンタル スキャンの実行効率を改善します。


Resolving Issues 
When source code is scanned and compliance issues are discovered and flagged, there are a number of ways to resolve issues:


. スキャン結果に疑問がある場合は、技術担当者と検討します。（問題となっているソフトウェア コンポーネントの担当開発者にインタビューします。）. スキャン ツールでフラグを付けられた各ファイルやコード断片を精査し、解決します。驚くような由来のソース コードと一致することがあります。
. オープン ソースに施された変更を特定します。理想的には、コード変更をしたかどうか、（ドキュメントはいうに及ばず、）技術者の記録に依存するべきではありません。誰が、いつ、コード変更を行ったかを特定するには、ビルド ツール(SCM, build automation, etc.)に頼るべきです。
. 例えば、ソース コード スキャン ツールが、プロプライエタリ コンポーネントの中に未承認のGPL許諾されたソース コード（コード断片）の利用を発見したならば、このことについて、技術担当に訂正要求を提出します。技術担当が課題を解決した後、問題のソース コードが削除され、適切で同等のコードによって置き換えられていることを確認するために、ソース コードを再スキャンすることを推奨します。
. 法務レビューの準備としては、特定のコンポーネントに対して発見されたライセンス情報の全てを、法務担当に提供するのが最も良い方法です。スキャン ツールによって生成されたソース コード監査報告
. オープン ソース コンポーネントに対するCOPYING, README, LICENSE ファイルサード パーティ ソフトウェア プロバイダから受け取るソフトウェア コンポーネントに対するライセンス契約





レビュー

コンプライアンス プロセスの一部として行われる、異なるタイプのレビューがあります。この節では、アーキテクチャー レビューとリンク解析レビューを議論します。
アーキテクチャー レビューは、オープン ソースとプロプライエタリやサード パーティ ソフトウェア コンポーネントとの相互作用に関する解析です。企業は、しばしば、問題となっている製品に責任を持つアーキテクトと、様々な重要ソフトウェア コンポーネントに責任を持つ開発者を参加させて、アーキテクチャー レビューを実施します。 




このレビューの目的は、特定することです。

. オープン ソース コンポーネント（そのまま利用、または変更利用）プロプライエタリ コンポーネント商用ライセンスで許諾されたサード パーティ コンポーネントコンポーネントの依存状態コンポーネントとサブシステム間の通信プロトコル動的リンクと静的リンク（以下の節で議論されます）
. カーネル空間実行（ドライバ等）とユーザー空間実行（ライブラリ、ミドルウェア、アプリケーション）. 共有されたヘッダファイルを使用するコンポーネント特に別のオープン ソース ライセンスで許諾されているような場合、特定のソフトウェア コンポーネントと相互作用する、または依存関係にある、別のオープン ソース


アーキテクチャー レビューの結果は、オープン ソースからプロプライエタリ コンポーネントやサード パーティ コンポーネントへ影響するかもしれないライセンス義務の分析です。
承認

コンプライアンス プロセスの承認段階の一部として、2つの推奨プラクティスがあります。

. コンプライアンス チケットに関連する全てのサブタスクは、コンプライアンス チケットを承認する前に、完了し、クローズされていることを検証します。サブタスクや保留中の小課題は簡単に忘れてしまいますが、そうすると、未解決の課題が残っている時でさえもコンプライアンス チケットをクローズするような未熟なプロセスに陥ってしまいます。
. 承認や却下の判断を下した議論の概要を記録します。そうした文書は、該当するコンポーネントに提示された承認の基礎が何であったのか、課題はどのように解決されたのか、を特定するときに非常に役に立ちます。 





通知

製品やサービスにオープン ソースを利用している組織は、以下が必要となります。

. 著作権や帰属を全て通知することで、オープン ソースを利用していることを知らせます。. （例えば、GPL, LGPLで許諾されたソース コードのように、適用可能な場合には）エンド ユーザーにオープン ソース コードのコピーの入手方法を伝えます。
. 製品に含まれているオープン ソース コードに対応するライセンスの全文を提示します。 

この分野のいくつかの推奨プラクティスには以下のものがあります。

. オープン ソースの利用が承認されるその都度、帰属とライセンス文を追加的に集めます。この方法に従いますと、要求される通知ファイルは、常に最新に更新され、全てのオープン ソースのリスト、ライセンス情報、著作権、帰属通知を含むことになります。
. 書面による申出には、明快な言葉を使い、製品に使われている全てのオープン ソースが含まれるようにします。
. 製品のエンド ユーザーが、この情報が、製品そのものの中、製品文書（ユーザーマニュアルまたはCD-ROM）の中、かつ／またはウェブサイトなど、どこに置かれているかを知ることができるようにします。


検証

コンプライアンス チームが、一貫性を確認して、検証ステップが見落とされていないかを確認する時に従うチェックリストを、作成し維持し発展させるのは大変有益で効率的なことです。頒布前検証の例としては以下があります。





. 頒布されることになっているオープン ソース パッケージは、特定され、承認されている。. 不適切なコメントは、ソース コード パッケージから取り除かれている。（厳密には、これはコンプライアンス課題ではありません。しかしながら、コメントは、見えていないコンプライアンス課題を明らかにするかもしれません。）ソース コード パッケージ（変更分も含めて）は、製品やソフトウェア スタックに入って出荷されるバイナリと一致するものが、入手可能にされる。エンド ユーザーにオープン ソースのソース コードを要求する権利を伝える文書通知に加えて、適切な通知が、製品文書に入れられる。


オープン ソース パッケージが頒布用ウェブサイト（かつ／または、同等のメディアに格納）にアップロードされたとしても、作業は完了していません。以下を検証する必要があります。

. パッケージは、正しくアップロードされている。パッケージは、外部コンピュータでエラー無しにダウンロードして圧縮解凍できる。含まれるパッケージは、適切にコンパイル、ビルドできる。. 開発者は、将来の製品、製品開発コード名、競合他社への言及、その他不適切なコメントを残していない。


ツールと自動化

ツールは、組織がコンプライアンス活動を効率的で正確に実行するのを助ける、コンプライアンス プログラムの中の不可欠要素です。多くのツールは、オープン ソース コンプライアンス プログラムの中で、とても有用であることを証明しています。





. ソース コード スキャンとライセンス特定ツール. プロジェクト管理ツールBoM比較ツールリンク解析ツール


以下の小節では、ツールに関する情報と、ツール利用がコンプライアンス活動にどのように活用できるかを示します。市場では、以下で記述するような様々な機能を提供する、複数の商用、プロプライエタリ、オープン ソースのツールがあります。
Source Code Identification Tools 
Source code and license identification tools provide recognition and analysis capabilities to assist users in identifying the origin of source code and licenses associated with open source software components.
. Antelink Reporter: http://www.antelink.com/
. Black Duck Protex: https://www.blackducksoftware.com/products/
protex
. The Black Duck Hub: https://www.blackducksoftware.com/
products/hub
. FOSSology: http://www.fossology.org/projects/fossology . nexB DejaCode: http://www.nexb.com/products.html
. Open Logic Exchange: http://www.openlogic.com/products-
services/openlogic-exchange
. Palamida Enterprise: http://www.palamida.com/products/enterprise . Protecode Enterprise: http://www.protecode.com/our-products/ . WhiteSource: http://www.whitesourcesoftware.com




Project Management Tools

プロジェクト管理ツールは、コンプライアンス活動を管理し追跡するのに不可欠なものです。いくつかの企業では、カスタマイズしたコンプライアンス ワークフローと共にバグ追跡ツールをすでに実際に利用しています。他の企業では、特定のプロジェクト管理ツールや自社開発ツールを利用しています。どちらにしても、ツールは、プロセスのある段階から別の段階へコンプライアンス チケットを移し、タスクやリソースの管理、時間追跡、email通知、プロジェクト統計、報告機能などを提供して、コンプライアンス プロセスのワークフローを反映させるべきです。
Example bug-tracking tools commonly employed for compliance: 
. Bugzilla: https://www.bugzilla.org/ . IBM Rationale ClearQuest: http://www.ibm.com/software/products/
en/clearquest/
. JIRA: https://www.atlassian.com/software/jira . Redmine: http://www.redmine.org/ . Bugzilla: https://www.bugzilla.org/ 

ソフトウェアBOM差分ツール

ソフトウェアBOM差分ツールの目的は、二つのBOMの差分を計算し、変更リストを生成することです。このようなツールは、（例えば、リリース1.1から1.2へ移行するなど）既存のベース コードの新しいバージョンを扱う時、インクリメンタル コンプライアンスを効率的に実施するのを可能にします。BOM差分ツールへの入力は、製品やサービスのコード ベースの二つのバージョンのコンポーネント リストを示す二つのBOMファイルです。BOM差分ツールの出力は、新しいコンポーネント、使わなくなったコンポーネント、および変更されたコンポーネントのリストです。

BOM管理ツールは、物理的な製造の世界には多くのものがありますが、オープン ソース ソフトウェアの管理用途のものは少ないです。著者の経験では、オープン ソース管理プロセスを支援するBOM差分ツールは、 


通常、自社内製であるか、かつ／または、既存ツールや機能をより集めて作られたものです。BOMのフォーマットにも依存しますが、ウェブベースでBOMバージョン比較を作成するために、コマンドラインのdiffツールや、生産性ツール(spreadsheets等)や、ディレクトリ比較ツール、ビルドや連続統合ツールからの報告に加えて、これらを結合するスクリプトを利用することが可能です。図25は、図での説明目的のために作られてものですが、自社内製のBOM差分ツールのサンプル出力を示しています。

図25Example BOM difference report 
Linkage Analysis Tool 
The goal of the dependency checker is to flag problematic code combinations at the dynamic and static link level, specific to C and C++ programming languages. このツールは、ツールの使用者が事前に定義したライセンス ポリシーに基づいて、バイナリとライブラリのライセンス間のリンクの矛盾を特定します。
上記のソース コード特定ツール、多くの静的解析ツール、ビルドや統合の報告ツール、自社内製のコード解析ツールなど、依存関係を解析するために一緒に利用されるツールが多くあります。依存関係マッピングに対する主な要求事項は、以下の機能です。

. バイナリとライブラリ間のリンクを特定します。バイナリとライブラリのライセンスを特定します。




. ライセンス スキャン ツールと接続します。または、出力を使います。. （GPLで許諾されたコードとのリンクなど）方針から逸脱しているリンクにフラグを付け、企業方針と合うように構成します。 

著者の経験では、依存関係マッピング ツールは、BOMツールとよく似ていますが、通常、自社内製であるか、かつ／または、既存ツールや機能をより集めて作られたものです。
このタイプのオープン ソースの既存ツールとしては、Linux FoundationのDep-Checkerがあります。 (http://git.linuxfoundation.org/dep-checker.git/).



第7章

コンプライアンスに関する照会の管理

この章は、コンプライアンスに関する照会を扱うガイドラインについて示します。これらのガイドラインは、申し立てを調査している間に申立人に対して肯定的で協力的な態度を維持することと、ライセンス違反が実際に起きた時には適切な行動を取ることを、確実にします。

コンプライアンス情報の提供要求を無視した後に、否定的な評判を受けたり、かつ／または、法的手続きを受けた組織、コンプライアンスに関する照会をどう扱えばよいかわからなかった組織、コンプライアンス プログラムを持っていなかったり整備していない組織、ライセンスが強制的でないと（誤って）考えて協力を単に拒む組織があります。今日、ベスト プラクティスは、これらのアプローチがいずれの関係者の利益にもならないことを教えてくれます。従って、企業は、コンプライアンスに関する照会を無視するべきではありません。むしろ、照会を受け取ったことを知らせ、照会者に回答を保留していることを伝え、回答予定日を知らせるべきです。
コンプライアンスに関する照会は、以下の要求も含まれます。

. GPL, LGPLやその他のライセンスで許諾されたソース コードを提供するという文書通知に従って行われる、ソース コードへのアクセス製品内にあることがわかったが、開示されていないコンポーネントに関するソース コードへのアクセス特定のオープン ソース コンポーネントが製品やサービスで利用されているかどうかの確認無効となった帰属や著作権の通知に対する更新ライセンス義務の一環として入手可能になっているオープン ソース パッケージにおいて、抜けているファイルの提供




企業は、通常、コンプライアンスに関する照会を、書面による申出やオープン ソース通知の一部として案内している専用emailアドレス経由で受け取ります。

RESPONDING TO COMPLIANCE INQUIRIES 
This section introduces a method for responding to compliance inquiries. 図26は、照会を受け取ってからクローズするまでの各段階を説明する、コンプライアンスに関する照会への対応プロセス例を提示します。

 
図26Process of responding to compliance inquiries 
Acknowledge

コンプライアンスに関する照会を受け取ったら、照会を受け取ったことを伝え、期日を定めて調査を約束するなどの応答をすぐに行うべきです。 


照会者の身元と動機を理解し、主張が正当で正確なものでその時点で意味のあるものかを確認するのは重要です。照会者がライセンスを十分に理解しておらず、誤った仮定で照会を提出することがしばしばあることを理解します。照会が情報を欠いている時には、追加で次のような確認を要求します。

. 影響のある製品やサービスや、該当するコードの名前違反があると信じる理由プロジェクト コードと違反状態にあるライセンスの名前プロジェクト サイトへのリンク 

通知

照会者との率直な対話を維持することが推奨されます。常に、自分たちのオープン ソース コンプライアンス プラクティスを示し、コンプライアンスに対する長年の誠実な取り組みを行動によって示します。照会者に自社のコンプライアンス手続きとプラクティスを伝え、照会された事項を調査することを確約します。提示可能になったところで、内部調査に関する最新情報を伝えることは良いことです。
調査

この段階では、報告済みの申し立て案件を調査して、問題となっているコンポーネントに関するコンプライアンス記録を参照し、レビューし、コンプライアンス記録と照会とを比較するべきです。
報告

許容できる期間内で内部調査の結論を出して発見された事項を内部記録に残した後、照会者に結果を伝える必要があります。



照会のクローズ

コンプライアンスに関する照会が誤った警告であった場合には、（照会者に結論を伝える以外には）特に何もしないでコンプライアンス チケットをクローズすることができます。

矯正

調査がコンプライアンス課題を明らかにした場合には、照会者に対し、製品やサービスをコンプライアンス遵守の状態に戻すために必要な手順を全て実行することと、これらの作業を完了するのに予想される日程を明確にして、事実を伝えるべきです。協力的で誠意をもって照会者と一緒に課題を解決するのが、担当者の責任です。適用されているライセンスに基づく義務を理解していることを示し、いつまでにどのようにして義務を満足するかを伝える必要があります。and when . you will meet the obligations.

問題を解決したら、紹介者にすぐに伝え、解決策を検証するために来てもらうべきです。

改善

コンプライアンス課題があった場合には、OSRBを招集して、事例を議論し、どのようにしてこのコンプライアンス違反が生じたかを学び、そのような誤りが再び生じないように、既存のプロセスとプラクティスを改善するべきです。

一般的な考察

. 全ての照会は、正式な照会として扱います。照会者とのやりとりの中で開示する情報は、一般に開示する可能性があるという前提で作業をします。
. オープン ソース コンプライアンスに対して努力することは、ライセンス強制を受けた時にいかに役立ち、自社プロセスをいかに改善するかを考えてみて下さい。




第8章

その他のコンプライアンス関連プラクティス

この章は、実際のコンプライアンス プロセスの範囲外ではありますが、コンプライアンスのベスト プラクティスや様々な考察に光を当てます。

EMPLOYEE APPRAISAL 
There are four challenges that all companies face with regard to engineering and compliance enforcement:

. 技術者が利用したいオープン ソース コンポーネント毎に一貫して要求フォームを確実に記入するようにします。コンプライアンス チケットに対して適時に応答するように、技術者に要求します。OSRBによって定められたガイドラインに従って技術者が行動していることを検証します。
. 組織内のオープン ソース コンプライアンスに関するトレーニングを技術者が受けるように義務付けます。 

これらの4つの挑戦に直面した企業をサポートするのに効果的であったプラクティスは、従業員の実績評価の一部としてオープン ソースとコンプライアンス評価項目を含めることです。結果として、従業員のボーナスの一部は、コンプライアンス ポリシーと手順に彼らが従った程度によって決まります。レビューは、従業員が以下の項目を実行したかを評価します。 


. 利用するオープン ソース コンポーネント毎にOSRBフォームを記入する。大きな遅延なしにコンプライアンス チケットに応答する。マネージャによって設定された期限内にオープン ソースとコンプライアンスに関するトレーニングを修了する。OSRBが制定したガイドラインの範囲内でオープン ソースを利用し、コンプライアンス違反を起こさない。


逆に、コンプライアンスを従業員の実績評価として利用するためには、OSRBは各担当者の以下の点を追跡しなければなりません。

. ソフトウェアBOMに含まれているが、承認を受けていないコンポーネントコンプライアンス チケットへの応答時間トレーニングコース修了経営チームへ報告されたコンプライアンス違反


ウェブ ポータル

いくつかの企業は、社内向け、社外向けのオープン ソース ウェブ ポータルを運営しています。社内向けポータルは、コンプライアンス ポリシーやガイドライン、トレーニング教材、通知、関連するメーリング リストなどを提供しています。社外向けポータルは、ライセンス義務を履行する形で、利用しているオープン ソース パッケージのソース コードを一貫した方法で提供します。

意思伝達

意思の伝達に関する最も重要で唯一の推奨事項は、社内にオープンソースに関連する企業目標や懸念事項を説明するか、社外のコミュニティ参加者に対するかに関わらず、明確で一貫性を持つことです。explaining company goals and concerns around open source, or externally . facing community participants. コミュニティとの接点となるサイトを持つことは、コンプライアンスに関する照会に応答する時に特に重要になります。



トレーニング

オープン ソースとコンプライアンスに関するトレーニングの目標は、オープン ソース ポリシーと戦略についての意識を高め、オープン ソース ライセンスの課題と事実について共通理解を形成することです。トレーニングは、製品にオープン ソースを統合することによるビジネスリスク、法的リスクも扱います。また、組織のコンプライアンス ポリシーやプロセスを広めて推進し、コンプライアンス文化を促進する手段でもあります。
公式と非公式のトレーニング方法があります。公式の方法は、修了するために従業員は試験に合格する必要がある、インストラクターが担当するトレーニングコースを含みます。非公式の方法は、ウェブでのトレーニング、ブラウン バッグ セミナー、新規雇用従業員へのオリエンテーションの一部としての説明などを含みます。

非公式トレーニング

ブラウン バッグ セミナー

ブラウン バッグ セミナーは、企業従業員（法務担当者、オープン ソース エキスパート、コンプライアンス オフィサー等）や招待スピーカ（広く行われているのは著名なオープン ソース開発者）による、昼食時の講演会です。これらのセミナーの目標は、製品やソフトウェア スタックに統合されているオープン ソースの様々な面に関して説明して議論を引き出すことです。これらのセッションは、企業のコンプライアンス プログラム、ポリシー、そしてプロセスに関する議論も含みます。
New Employee Orientation 
In some instances, the Compliance Officer presents on organization compliance efforts, rules, policies, and processes to all new employees as part of the new employee orientation session. 初日に、新規従業員は、オープン ソースとコンプライアンスに関する30分のトレーニングを受けます。結果として、新規従業員は、社内で誰がその内容のエキスパートであるか、どういう社内イントラネットがあるか、オープン ソースとコンプライアンスに関するトレーニングがどのように登録されるかなど、必要な情報を受け取ります。 


公式トレーニング

組織の規模や、オープン ソースが商品に使われている範囲にもよりますが、組織は、オープン ソースに携わる従業員が公式な講師の教えるコースを受講し、その領域での習熟度のテストを受けるように命じることができます。

ソース コード変更に関する考察

既存のソース コードを変更する基本ルールを確立するために、平易で法務用語を使わない言葉で表現した、内部利用目的のガイドラインを発行することを強く勧めます。例

. プロプライエタリを残すソース コード変更は、特に派生物への義務を持つような（GPL, LGPL等の）オープン ソース パッケージ内で行っていはいけません。. プロプライエタリ ソース コードは、派生物への義務を持つようなオープン ソース ライブラリにリンクしてはいけません。企業では、通常、それらを実行するには正式なOSRB承認を必要とします。. ソース コードに加えられるいかなる変更も、オープン ソース ライセンスに適合して頒布前に文書化されることを確実にします。. オープン ソース モジュールへの全ての変更は、モジュールの修正履歴（変更ログファイル）で把握されるようにします。 

NOTICES CONSIDERATIONS 
One of the key obligations when using open source is to ensure clear and accurate documentation of copyright, attribution, and license information, and the availability of a written offer (for GPL/LGPL licensed source code). これらの文書化の義務の全体は、しばしばオープン ソース通知と呼ばれます。 


提供物にオープン ソースを利用している企業は、著作権の帰属を全て表示し、ほとんどの場合、製品やサービスに含まれているオープン ソース ソフトウェアのライセンス全文を記載することで、オープン ソース利用を知らせなければなりません。従って、企業は、出荷する全ての製品や提供する全てのサービスの文書に、著作権、帰属、そしてライセンス通知を記載することで、文書化の義務を満たさなければなりません。
文書化義務の要求を満たす2つの主要な選択肢があります。

. 製品自体にオープン ソース通知を表示します。これは、ユーザーと対話してライセンス情報を引き出すか、ライセンス情報を表示するかできるユーザー インタフェースを製品が持っている場合には、実行可能な選択肢です。この選択肢の例は、携帯電話やタブレットです。. 製品マニュアルや、製品に付属する文書に、オープン ソース通知を含めます。 

いくつかの企業は、ウェブサイト（一つの選択肢ではありますが、頻繁に採用され、維持にも手がかかりません。基本的にはウェブサイト上に通知ファイルを置くだけです。）上で通知を維持しながら、可能な時には両方の選択肢を選びます。basically just hosting the notices file on the website). 通知に関する考察から得られる重要なことは、製品出荷やサービス開始前に、全てのオープン ソース通知に対する要求が満たされることを、確実にしなければならないということです。

DISTRIBUTION CONSIDERATIONS 
Generally speaking, companies want to ensure that any source code subject to open source distribution obligations is compliance-ready prior to product shipment. コンプライアンス プラクティスを開発サイクルで徹底的に実施することによって、頒布に関する考察はとても単純で簡素なものになります。



USAGE CONSIDERATIONS 
The following sections address considerations and caveats for using open source in a fully compliant manner.

BoMをクリーンにします。

入るソフトウェアが、利用宣言されていないオープン ソースを含んでいないことを確実にします。供給者から受け取る時に、いつもソースコードを監査します。代わりの方法としては、ソフトウェア供給者が供給するコードの監査報告を必ず提供しなければならないという企業ポリシーを制定します。

それぞれのオープン ソース コンポーネントに対するOSRBフォーム

利用するそれぞれのオープン ソース コンポーネントに対してOSRB利用要求フォームを記入します。明白なOSRB許可がないオープン ソースを利用するのは避けます。
M&Aによるリスクの理解

利用されているオープン ソース コードと関連する事項は、企業間の取引に先立って実施される資産監査対象の一部であることを理解します。

使用しなくなったオープン ソース パッケージ

承認済みのオープン ソース パッケージが利用されなくなったならば、技術者はOSRBに連絡してオープン ソースリストを更新するように通知しなければなりません。さもなければ、OSRBが、BOM差分ツールを実行する際にもはや使われなくなっているパッケージを見つけるでしょう。

大きなソース コード変更

承認済みのパッケージが大きな変更を受けた時には、OSRBにソースコードを再スキャンするように通知します。さもなければ、OSRBがBOM差分ツールを実行する際にパッケージが変更されていることを発見するでしょう。設計や実装での大きな変更は、アーキテクチャー、API、ユースケースにインパクトを与えますし、ある場合にはコンプライアンス面でもインパクトがあります。



参考オリジナル ソース コード

ダウンロードしたパッケージを保存するのに加えて、オープン ソース パッケージをダウンロードしたURLも文書化します。

Upgrading to Newer Versions of open source 
Ensure that each new version of the same open source component is reviewed and approved. バージョン更新の間でライセンス変更が起きることがありますので、オープン ソース パッケージのバージョンを更新する時には、新しいバージョンのライセンスが前のバージョンから変更されていないことを確認します。もしライセンスが変わっていたら、コンプライアンス記録を更新して、新しいライセンスが問題を起こさないように、OSRBに相談します。

コンプライアンス 検証の黄金律

コンプライアンスは製品ごとサービスごとに検証されます。というのは、オープン ソース パッケージは、ある条件での利用を承認されたのであり、2次利用について承認されたわけではないからです。

Copy/Paste 
Avoid using source code snippets, and avoid copying/pasting open source code into proprietary or third-party source code (or vice versa) without prior documented OSRB approval. これらの行動は、コンプライアンスに深く関わります。

ソース コードの異なるライセンスとの結合

多くのオープン ソース ライセンスは互いに両立性を持っていないので、派生物に異なるオープン ソース ライセンスを結合することを避けます。このトピックに関して、法務担当からのサポートを受けることを強く勧めます。
ソース コード コメント

ソース コードに不適切なコメントを残さないようにします。（個人的なコメント、商品コード名、競合他社名等） 


既存ライセンス情報

既存の著作権やライセンスの情報をオープン ソース コンポーネントから削除あるいは変更しないようにします。全ての著作権やライセンスの情報は、ライセンスが変更を許していると完全に確信できるとき以外は、オープン ソース コンポーネントでそのままの状態にしておきます。

帰属についての考察

製品にオープン ソースを組み込んでいる企業は、エンド ユーザーに帰属情報を提供する必要があります。この節では、オープン ソースの帰属に関する義務をどのように達成するかについてのガイドラインを示します。
帰属タイプ

オープン ソースの帰属要求は、ライセンスによって異なりますが、一般的に4つのカテゴリに分けられます。

ライセンス全文

ライセンス全文の逐語的コピーが、ほとんど全てのオープン ソース ライセンスで要求されます。

著作権表記

著作権表記の逐語的コピーが、多くのオープン ソース ライセンスで要求されます。
謝辞表記

いくつかのオープン ソース ライセンスは、明示的に著者の帰属を要求します。ほとんどの場合、オープン ソース プロジェクトは、貢献者のリストを含むAUTHORSと呼ばれるファイルを含んでいますので、帰属表記の一部としてこの情報を使うことができます。 


ソース コード入手についての情報

ソース コード再頒布義務を持つほとんどのライセンスは、製品に付随するソース コード提供か、ソース コードの入手方法を記述した書面による申出かを要求します。GPL と LGPL は、このカテゴリーのライセンスの例です。

帰属の提示

オープン ソースを含むあるいは利用している製品やサービスに関していうと、帰属は、（製品マニュアル等の）印刷されたユーザー文書や、CDまたはウェブサイトからのダウンロードなど、印刷または電子形式で頒布されなくてはなりません。もし、製品やサービスがグラフィカル ユーザー インターフェイスやコマンド ライン インターフェイスを持っているならば、帰属をそのUI経由で表示することも選択肢の一つです。携帯電話での通信での（OTA）製品アップデートに関していうと、製品アップデートが新しいあるいは更新されたオープン ソース コンポーネントを含むのであれば、帰属は、更新されなければなりません。

SPECIFIC LICENSE OBLIGATIONS 
“Must include a copy of the license in documentation available to the end user” 
The license of the open source component in question must be included in the user documentation for all products using this open source.
推奨事項

. 携帯電話やタブレットなど、いくつかの例では、製造会社は、ウェブ ブラウザやPDFビューアを使って（ライセンス文は、HTMLやPDF形式で機器上で利用可能です）、実際の機器上で通知を提示することができます。. ユーザーがアクセス可能なファイルシステムを有する製品では、ライセンスは、意味が分かるようするために、また、オープン ソースのライセンスファイル名と同じようにするために、LICENSEというファイル名でファイルシステムに含まれていることを推奨します。 



. 製品アップデートに関して、ライセンス情報もまたアップデートされなければなりません。例えば、新しいソフトウェア リリースが入手可能になった時、アップデートされたリリースは、新しいリリースで導入されたオープン ソースの全ての変更を反映している、アップデートされたライセンス情報ファイルを含んでいなければなりません。変更は、以下を含むかもしれません：新しいオープン ソース評価が下がった／使われなくなったオープン ソース新しいバージョンにアップグレードされたオープン ソース。帰属／著作権表記の更新を必要とするかもしれません。まれにライセンスの更新を必要とすることもあります。





「エンド ユーザーが利用可能な文書に著作権表記を入れなければならない」

問題となっているオープン ソース コンポーネントのライセンスは、エンド ユーザーが利用可能な製品文書中に著作権表記を必要とするかもしれません。

推奨事項

. 全ての製品に関して、著作権情報は、（ユーザーマニュアルのような）印刷物に含まれていなければなりません。
. グラフィカル ユーザー インタフェースを有する場合には、エンド ユーザーは「製品について」や「ライセンス」の画面から著作権情報を参照することができるようにすべきです。. 製品が、ユーザーが利用可能なファイル システムを有している場合には、著作権情報は、例えば製品で利用されている全オープン ソースに対する全著作権表記は、ファイル システムに含まれているべきです。
. 製品アップデートに関して、著作権情報もまたアップデートされなければなりません。 

「広告資料は、特別な謝辞が必要になるかもしれません。」 


オリジナルのBSDライセンスに由来する広告文は、以下のように書かれています。

All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the University of California, Berkeley and its contributors.

適用可能ならば、全てのマーケティングや広告の資料（ウェブや雑誌、新聞、チラシ等）は謝辞を表示しなければなりません。

一般的なガイドライン

オープン ソース プロジェクト名を推奨に利用しない、自分たちが行ったソース コード変更に印をつける、オリジナルのライセンス、著作権、帰属情報を保持する、などオープン ソース ライセンスを応用するガイドラインのいくつかについては既に良く知っているかもしれません。以下の節では、これらのガイドラインの細かな議論を発展させます。
推奨や推進に利用しない

オープン ソース プロジェクト、著者、貢献者などの名前を、事前に文書による許諾を受けないで、マーケティング、広告や文書（紙媒体、電子媒体、ウェブなど）に利用することはできません。
ソース コード変更の印

変更したオープン ソース コードを再頒布するとき、既存の著作権行をそのまま保持しながら、自分の変更箇所へは、著作権行（会社、年）によって印をつける必要があります。
ある会社は別のアプローチを取りました。オリジナルのオープン ソース コードと共に、そのコードに適用させる自社の貢献修正ファイルを提供しました。このアプローチに従えば、会社の修正は、オリジナル ソース コードと明らかに分離されます。



オリジナルのライセンス、著作権、帰属情報を維持する

オープン ソース コードを再頒布する時にはいつでも、変更が伴っても伴わなくても、オリジナルのライセンス情報、著作権行、やその他の帰属情報を維持しなければいけません。

ソース コード コメント

Do not leave any inappropriate comments in the source code, such as private comments, product code names, mention of competitors, etc. 
Existing Licensing Information

既存のオープン ソースライセンス著作権や他のライセンス情報を、利用するオープン ソース コンポーネントから取り除いたり、他のいかなる方法でも手を入れてはいけません。全ての著作権とライセンス情報は、全てのオープン ソース コンポーネントの中で触らずそのまま残しておく必要があります。 


第9章

オープン ソース法務サポートを拡大させる

オープン ソース コンプライアンスは、しばしば、法務的な問題というよりも運用や物流的な問題です。コンプライアンスを達成するためには、適切なポリシーやプロセス、トレーニング、ツール、著作権者の著作権を尊重し、ライセンス義務を遵守し、組織や顧客や供給者の知的財産を守りながら、オープン ソースを効果的に利用しオープン ソース プロジェクトやコミュニティに貢献する体制が構築できる適切な担当者の配置などが必要です。

しかしながら、法務担当は、オープン ソース コンプライアンス プログラムや適切なコンプライアンスを確実にするもっとも重要なコアチームをサポートする不可欠な役割を果たします。この章では、オープン ソース コンプライアンスを確実にする法務担当の役割を詳細に見て、法務担当がソフトウェア開発チームに与えることができる実際的なアドバイスを提供します。そういう実際的なアドバイスは、ソフトウェア開発者が、法務担当に頼らなくてもできる、細かな問題に対する毎日の判断を可能にします。
実際的な法務アドバイス

法務担当からソフトウェア開発者に向けた実際的なアドバイスは、以下を含むかもしれません

. ライセンス プレーブック：ソフトウェア開発者を意図して書かれた、オープン ソース ライセンスについての簡単に読める要約形式のまとめライセンス両立性マトリックス：ライセンスAがライセンスBと両立性があるか判断するのを助ける表ソフトウェア開発者は、異なるプロジェクトの異なるライセンスにあるコードをマージする際に、そのようなマトリックスを使うことができます。
. ライセンス クラス：異なるライセンスと、これらのライセンスで許諾されたソース コードを利用する際に必要な行動を理解する簡単な方法 



. ソフトウェア相互作用法：異なるライセンスで利用可能なソフトウェア コンポーネントがどのように相互作用するか、相互作用の方法は企業のコンプライアンス ポリシーで許可されているかを理解するガイドチェックリスト：開発やコンプライアンスのプロセスの全てのポイントで必要なことは何かを覚えておくための、一貫性のある、極めて簡単な方法 

以下の節では、これらの5つのアドバイスを確認し、例を示し、これらによって開発者がオープン ソースに関わる時にどのように助けになるかを議論します。

ライセンス プレーブック

ライセンス プレーブックは、広く使われているオープン ソースについての要約です。ライセンスの許諾、制約、義務、特許への影響、その他、このライセンスに関する簡単に理解できる情報が書かれています。ライセンス プレーブックは、法務担当へ来る基本的な質問の数を最小化し、これらのライセンスに関する法務的な情報を即座に開発者に提供します。

図27（次ページ）は、GPL v2に関するライセンス プレーブックの例を示します。このプレーブックは、説明目的で書かれたものであり、その中身は確実と考えないように注意して下さい 




図27GPL v2 ライセンス プレーブック例（説明目的のみに使用）

ライセンス両立性マトリックス

ライセンス両立性とは、ソフトウェア コンポーネントとそのライセンスが一つ以上の他のコンポーネントとそのライセンスと両立できるかどうか（ライセンスが矛盾を起こさないか）を決めることです。両立性は、また、 


二つやそれ以上のライセンス（結合されたアウトライセンス）を結合した作成物に対する適切なライセンスについても言及します。
ライセンス両立性に関する取り組みは、両立しない条件の下に頒布されている様々なオープン ソース ソフトウェア コンポーネントを、ソースやオブジェクト形式で結合する際に、生じます。そのような結合は、純粋に法的な理由から再頒布できないようなソフトウェア コンポーネントの集合、つまり、ライセンス キメラを作り出します。

両立しないライセンスの例は、Apache version 2ライセンスで頒布されたコードをGNU GPL version 2の（古いGPLライセンスには存在していなかった特許終了と免責に関する事項によって）ソフトウェアと結合しようとするときに見られます。ライセンス両立性の例は、明らかにGPL version 2と両立できる、X11ライセンスのコードを結合する時に見られます。

図28は、異なるライセンスで許諾された複数のソースからなる一つのソース コンポーネントを生成する例を示します。このシナリオでは、ソースは矛盾を抱えることなしにバイナリやオブジェクトファイルに結合できるような両立性のあるライセンス条件を持つことを確認しなければなりません。



図28異なるライセンスで許諾されたソースを一つのバイナリへ結合する



ライセンス両立性は、開発チームが法務担当からの詳細なガイドラインを必要とするもので、自分たちだけで結論を出すべきではない分野です。そのようなガイドラインは、一般的なほとんどのライセンスをカバーするライセンス両立性マトリックスによって得られます。マトリックスの例を、表7に示します。

表7ライセンス両立性マトリックスの例（説明目的のみに使用）

License-A

License-B

License-C

License-D

License-E

License-F

License-G

License-A

a

a

a

License-B

a

License-C

a

License-D

a

a

a

License-E

a

License-F

a

License-G

a

a





開発チームは、異なるライセンスで許諾されたコードを結合する必要がある時には、問題となっている結合したソフトウェア コンポーネントがライセンス的な矛盾を発生させるかを確認するために、このマトリックスを参照できます。マトリックスに含まれていない新しいライセンスに出会った時には、そのライセンスは法務担当によって分析されなければなりません。法務担当は、分析結果に基づいて表の更新をするべきです。

ライセンス分類

法務担当が受ける質問数を減らし、ライセンスとコンプライアンス プロセス教育を増やすために、いくつかの会社では製品に使用する最もよく利用するライセンスをいくつかのカテゴリに分類しています。図29（次ページ）は、最もよく使用するライセンスを4つのカテゴリに分類している、ライセンス分類の例です。



Pre-approved Licenses 
Permissive open source licenses often fall under this category. これらのライセンスで許諾されたソース コードは、開発者が、マネージャや法務担当への承認プロセスを通すことなく、利用が事前承認されています。そのような事前承認は、開発者に、全ての通知を抜き取って、文書チームへ送付するように要求します。

マネージャ承認を必要とするライセンス

通知に関する義務（ライセンス文、帰属通知、著作権通知などの表記）に加えて、ソース コード変更を開示する義務があるので、これらのライセンスで許諾されたコンポーネントでは、マネージャによる承認が要求されます。



図29Example license categories (for illustration purposes only) 
Licenses Requiring Legal Counsel Approval

これらのライセンスで許諾されたソース コードは、法務によるレビューを承認を必要とします。これは、通常、特許に関する条項を含むライセンスに適用されます。 


禁止されたライセンス

いくつかの企業では、特定のライセンスには「不許可」のフラグを付けます。企業ポリシーによって利用が許可されていません。
ライセンス分類はいかに役に立つか？
上記のライセンス カテゴリは、これらのライセンスで許諾されたコードを統合する際に、開発者が適切な一連の行動を簡単に知ることができるように分類する一つの方法です。更に、ライセンスとなすべき行動との関連付けを簡単に作成することができます。表8は、開発者が様々なライセンスに関連した適切な行動を思い出すのに簡単な一つの方法です。

表8ライセンス分類のための簡単なハウツー

どのライセンス

行動

License A

問題なく利用

License E

マネージャの承認をもらう

License I

法務に相談する

License M

このソース コードは使えない

Other

一連の行動についてはマネージャに質問する





これらの異なるシナリオは、説明目的のみに提示されています。自分の組織ポリシーやガイドラインに従って、異なる行動を割り当てるような異なる分類モデルを作成することも可能です。

SOFTWARE INTERACTION METHODS 
As part of the compliance process, there is usually an architecture review, the goal of which is to understand how any specific software component interacts with any other software component, and the method of interaction. アーキテクチャー レビューは、以下を特定します。

. （そのまま、または変更して利用される）オープン ソースからなるコンポーネントプロプライエタリ コンポーネント






. サード パーティ プロバイダから提供されたものに由来するコンポーネント
. コンポーネントの依存状態共有ヘッダ ファイルの利用コンポーネントの実行時のコンテキスト(Kernel/dirver/modules, middleware, libraries, applications, etc.)
. APIを超えたコンポーネント間依存関係(s/w buses, IPCs, web APIs, etc.). 言語間の結合


表9と10（次ページ）は、法務担当がソフトウェア開発者に提供できる追加情報を示します。この表は、どのライセンスが、企業ポリシーを考慮した上で、他のライセンスと動的静的にリンク可能であるかを示します。
表9動的リンク マトリックス例

動的リンクできるか

License-A

License-B

License-C

License-D

License-A

a

a

a

a

License-B

a

a

License-C

a

a

License-D

a

「事前承認必要」

a





例えば、表9で、ライセンスBで許諾されたソース コードは、ライセンスDで許諾されたソース コードと動的にリンクすることが可能です。しかしながら、ライセンスCで許諾されたソース コードは、ライセンスBで許諾されたソース コードと動的にリンクすることはできません。また、リンクは、ライセンス間で常に相互に成り立つとは限らないに注意して下さい。

同様に、表10で、ライセンスAで許諾されたソース コードは、ライセンスCで許諾されたソース コードに静的にリンク可能です。しかしながら、ライセンスAで許諾されたソース コードは、ライセンスBで許諾されたソース コードに静的にリンクすることはできません。いくつかのリンクの組み合わせは、ケース バイ ケースで許可されます。そのため、「事前承認必要」と注意が書かれています。

表10Sample static linkage matrix 
Can Statically Link To

License-A

License-B

License-C

License-D

License-A

a

a

License-B

a

「事前承認必要」

License-C

a

a

License-D

「事前承認必要」

a





アーキテクチャー レビューによってリンクに関する課題（リンク マトリックスで示される企業ポリシーに従わない動的リンク静的リンクなど）が発見されたとき、アーキテクチャー レビューを推進した責任者（通常はコンプライアンス オフィサー）は、ソフトウェア コンポーネントに責任を持つソフトウェア開発者に通知して、改善を要求します。
チェックリスト

ほとんどの企業は、開発プロセスの全てのメジャーなマイルストンで利用するチェックリストを確立しています。オープン ソース コンプライアンスで利用する時には、いくつかのチェックリストを作り上げ、製品のソース コード リポジトリへ外部の新しいオープン ソース コードを入れる前にチェックリストを使います。一つの例が、外部向けウェブサイトにソース コードを置く前に利用される、以下のチェックリストです。

. 全てのソース コード コンポーネントは、対応するコンプライアンス チケットを持っています。
. 全てのコンプライアンス チケットは、技術担当と法務担当に承認されています。
. 全てのコンプライアンス チケットは、付属している未解決サブタスクがクリアされています。






. 全てのソフトウェア コンポーネントの通知は、文書チームへ送付され、製品文書に含まれています。
. 法務担当は、書面による申出とコンプライアンス文書全体を承認しています。
. ソース コード パッケージは、準備され、標準開発マシン上でコンパイルできるかテストされます。
. 提供されるソース コードは、完結しており、製品に搭載されるバイナリと一致します。


そのようなチェックリストは、誤る確率を最小化し、オープン ソース管理に携わる全ての人がプロセスの次の段階へ進む前に何をすべきかを気づくようにさせます。

CONCLUSION 
Software developers need to be educated about the licenses on the various open source components they integrate and employ. 法務担当が実際的な方法で教育を実施するようにすることは、とても役に立ちます。ソフトウェア開発者が、法務に関連する日々の質問に答えてくれる文書化された実際的なアドバイスに、アクセスできるからです。この実際的なアドバイスは、通常以下の点を中心に展開します。

. オープン ソース コンポーネントをプロプライエタリやサード パーティ ソース コードへの挿入、またはその逆。オープン ソース コンポーネントをプロプライエタリやサード パーティ ソース コードにリンク、またはその逆。. 様々なソフトウェア コンポーネント間（プロプライエタリ、サード パーティ、オープン ソース）の相互作用法オープン ソース コンポーネントを利用する際に満足しなければならないライセンス義務






オープン ソース コンプライアンスは、コンプライアンス プログラムを確立し、コンプライアンス ポリシーとプロセスを作成し、実行する担当者を確立し、コンプライアンスの自動化の面で助けとなるツールをチームが使えるようにすれば、容易に達成できます。 




著者について

Ibrahim Haddad (Ph.D.) is Vice President of R&D, and the Head of the Open Source Group at Samsung Research America, a wholly owned R&D subsidiary of Samsung Electronics Co. Ltd., South Korea. 彼は、Samsungのオープン ソース戦略立案と実行、社内外との共同R&Dプロジェクト、重要オープン ソース開発プロジェクトへの参画に責任を持っており、様々なオープン ソース財団とオープン標準組織でSamsungの代表を務めています。Samsungに加わる前、ハダッドはLinux Foundationの経営チームにおいて技術と法務コンプライアンス プロジェクトとイニシアティブの責任者でした。ハダッドは、キャリアをEricsson Researchで始めました。そこで彼は、5年間ワイヤレスIPネットワークに関する先端研究と、通信業品質環境へのLinuxとオープン ソース ソフトウェアの導入に携わりました。その後、彼はMotorolaにオープン ソース技術グループの技術担当役員として加わり、Motorolaのオープン ソースでのイニシアティブに貢献しました。Motorolaを離れた後、彼は、Palmにおいて、webOS オープン ソース戦略とコンプライアンスに責任を持つオープン ソース担当役員としてオープン ソース部門を指揮しました。後に彼は、webOSをオープン ソース化したopen webOSプロジェクトで、コンサルティングとして、Hewlett Packardを支援しました。

Haddad graduated with Honors from Concordia University (Montreal, Canada) with a Ph.D. in Computer Science. 彼は、学士と修士（ともに計算機科学）をLebanese American Universityで取得しています。彼は、Linux Journalの寄稿編集者の一人で、Red Hat LinuxとFedoraに関する2つの本の共著者であり、Linux System Administration、Fedora Linux、Ubuntu Linuxに関する4つの本の技術監修者です。彼は、オープン ソース法務コンプライアンスから、ビジネス戦略や共同開発やイノベーションを推進するR&Dツールとしてのオープン ソース利用に至る話題についての著書と講演で知られています。
ハダッドは、アラビア語、英語、フランス語が堪能です。
Twitter: @IbrahimAtLinux



The Linux Foundation は、Linux の普及促進、保護、ならびに標準化に取り組み、Linux/OSS がクローズドなプラットフォームに対抗するのに必要とされる統合されたリソースとサービスを提供します。

The Linux Foundation およびその他の活動については、http://www.linuxfoundation.org/ を参照してください。



