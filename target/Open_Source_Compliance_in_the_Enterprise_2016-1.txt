企業におけるオープン ソース コンプライアンス


Ibrahim Haddad, PhD


本ページは意図的に空白にしています。(This page intentinally left blank.) 


Ibrahim Haddad, Ph.D.

The Linux Foundation

2016

企業におけるオープン ソース コンプライアンス




4


Copyright c 2016 The Linux Foundation

All rights reserved



5


目次


第1章 第1章	オープン ソース コンプライアンス入門

変わりゆくビジネス環境 16

オープンソースコンプライアンス手始め 19

オープンソースのコンプライアンスを保証する利点 20

FAILURE TO COMPLY 21

Intellectual Property Failures 22

License Compliance Problems 24

Process Failures 26

LESSONS LEARNED 28

Ensure Compliance Prior to Product Shipment/Service Launch 28

Non-Compliance is Expensive 29

Relationships Matter 30

Training is Important 30


Chapter 2 ESTABLISHING AN OPEN SOURCE MANAGEMENT PROGRAM 31

OPEN SOURCE COMPLIANCE PROGRAM 31

Compliance Strategy 32

Inquiry Response Strategy 32

Policies and Processes 32

Compliance Teams 33

Tools 34

Web Presence 35

Education 36

Automation 37



Messaging 37

COMPLIANCE CHALLENGES AND SOLUTIONS 37

Long-Term Goals versus Short-Term Execution 39

Communicating Compliance 40

Establishing a Clean Software Baseline 41

Maintaining Compliance 42

Institutionalization and Sustainability 43

Chapter 3 ACHIEVING COMPLIANCE: ROLES AND RESPONSIBILITIES 46

OPEN SOURCE REVIEW BOARD (OSRB) 50

LEGAL 53

ENGINEERING AND PRODUCT TEAMS 55

COMPLIANCE OFFICER 57

OPEN SOURCE EXECUTIVE COMMITTEE 58

DOCUMENTATION 58

LOCALIZATION 59

SUPPLY CHAIN 59

IT 60

CORPORATE DEVELOPMENT 60


Chapter 4 OPEN SOURCE COMPLIANCE PROCESS 62

EFFECTIVE COMPLIANCE 63

ELEMENTS OF AN END-TO-END COMPLIANCE PROCESS 64

ステップ1Identification of Open Source 65

ステップ 2 . Auditing Source Code 67

ステップ3Resolving Issues 70



ステップ4Reviews 70

ステップ5Approvals 72

ステップ6Registration 73

ステップ7Notices 74

ステップ8. Pre-Distribution Verifications 75

ステップ9Distribution 76

ステップ10Final Verifications 76


Chapter 5 COMPLIANCE PROCESSES AND POLICIES 78

POLICY 78

PROCESS 79

Source Code Scan 79

Identification and Resolution 81

Legal Review 81

Architecture Review 82

Final Review 83

PROCESS STAGES’ INPUTS AND OUTPUTS 83

Source Code Scan Phase 84

Identification and Resolution Phase 85

Legal Review Phase 85

Architecture Review Phase 87

Final Approval Phase 87

DETAILED USAGE PROCESS 88

INCREMENTAL COMPLIANCE PROCESS 93

OSRB USAGE FORM 95

Rules Governing the OSRB Usage Form 99



AUDITING 99

SOURCE CODE DISTRIBUTION 100

Distribution Incentives 100

Distribution Policy and Process 101

Distribution Methods and Modes 103

Distribution Checklists 104

Pre-Distribution Checklist 105

Post-Publication Checklist 107

Written Offer 107


Chapter 6 RECOMMENDED PRACTICES FOR COMPLIANCE PROCESS MANAGEMENT 109

COMPLIANCE PROCESS 109

Identification Phase 109

Source Code Auditing 111

Resolving Issues 112

Reviews 113

Approvals 114

Notices 115

Verifications 115

TOOLS AND AUTOMATION 116

Source Code Identification Tools 117

Project Management Tools 118

Software Bill of Material (BOM) Difference Tools 118

Linkage Analysis Tool 119



CHAPTER 7 MANAGING COMPLIANCE INQUIRIES 121

RESPONDING TO COMPLIANCE INQUIRIES 122

Acknowledge 122

Inform 123

Investigate 123

Report 123

Close Inquiry 124

Rectify 124

Improve 124

General Considerations 124


CHAPTER 8 OTHER COMPLIANCE-RELATED PRACTICES 125

EMPLOYEE APPRAISAL 125

WEB PORTALS 126

MESSAGING 126

TRAINING 127

Informal Training 127

Formal Training 128

SOURCE CODE MODIFICATION CONSIDERATIONS 128

NOTICES CONSIDERATIONS 128

DISTRIBUTION CONSIDERATIONS 129

USAGE CONSIDERATIONS 130

ATTRIBUTION CONSIDERATIONS 132

Attribution Types 132

Presentation of Attributions 133



SPECIFIC LICENSE OBLIGATIONS 133

GENERAL GUIDELINES 135


Chapter 9 SCALING OPEN SOURCE LEGAL SUPPORT 137

PRACTICAL LEGAL ADVICE 137

LICENSE PLAYBOOKS 138

LICENSE COMPATIBILITY MATRIX 139

LICENSE CLASSIFICATION 141

SOFTWARE INTERACTION METHODS 143

CHECKLISTS 145

CONCLUSION 146





はじめに

オープンソース コンプライアンスに携わるようになったのは、ソフトウェア開発者として私のキャリアが始まったころでした。そこから今に至る20年、オープンソース コンプライアンスは直接的にも間接的にも私の仕事の一部であり続けています。オープンソース ソフトウェアと共に歩んできた私の旅ですが、振り返るとオープンソース コンプライアンスにおける実践的（プラクティカル）な情報を探すのが大変だった旅でした。
そういったこともあり私自身の経験を公開することに興味が湧いてきました。私の経験を公開することでいろいろな人たちが何かを学び、そして学んだ人が経験したことを公開するようになり、さらに私たち皆が産業において製品デリバリの期間やエンジニアリング リソースに与えるインパクトを最小限にとどめるよう、オープンソース コンプライアンスを実現する、よりよいやり方に向けた取り組みに尽力できるのではないか、と。
このハンドブックは、まさにそういった企業でオープンソース コンプライアンスを推進してきた私の経験をまとめたものであり、オープンソース コンプライアンスプログラムの整備、その運営についての実践的側面にフォーカスしたものとなっています。ただ私の経験の大半が（CやC++が主要プログラミング言語である）組み込み領域中心だったため、本ハンドブックでは全般的にその傾向が色濃く出ている点についてはご留意いただければと思います。
皆さんがオープン ソース コンプライアンスを実現するべく、日々の推進活動で本書が役立ってくれることを願ってやみません。 




前書き

オープン ソースは、ソフトウェアや知的財産に関わる個人によってリードされた理想主義的な運動からばかりでなく、オープン ソースがIT戦略における主要な部分であると認識して、オープン ソース開発に参加したいと考えているような（政府、企業、大学などの）組織における活動によっても、広がってきています。Linuxや他のオープン ソース技術における初期段階の成功は、技術の全ての分野にも広がってきています。

伝統的な組織も注目しています。オープンソース ソフトウェアを優先度の高い項目に挙げ、ソフトウェアを組織活動で戦略的優位を得るために使っています。
エンタープライズITでのオープン ソースの利用は、2010年から倍増しています。

調査した企業の78%は、オープン ソース上でビジネスを運用しています。

64%が、現在、オープン ソース プロジェクトに参加しています。

39%が、自社のオープン ソース プロジェクトを立ち上げています。

North Bridge & Black Duck
「2015年オープン ソースの未来調査」

「オープン ソース ファースト：納税者のお金で開発された全てのソリューションは、納税者のものに（オープン ソース）」GSAにおいて開発された全てのコードは、オープン ライセンスのもとに共有されるべきであり、他の人々はそれから便益を受けることができます。In addition, we will give priority to using open source software as we design now solutions.”
Office of the CIO, U.S. General Services Administration (U.S. agency that oversees $66 billion of procurement annually)

 




「ブロックチェーン技術の開発は、金融サービス業界の業務や経済構造を再定義する可能性を秘めています。業界が、もっと積極的に、もっと効率的に、もっとディジタル化を促進しようと努力している、そういう重要な時期に現れています。Open source development will accelerate the innovation and help drive the scalability of this technology, and we are proud
to support the Hyperledger Project.”
Richard Lumb, Chief Executive, Financial Services, Accenture


「成長し活気ある開発コミュニティへのメンバー投資から、Dronecodeプロジェクトの初年度はかなりエキサイティングなものです。共通プラットフォームを確立するために共に努力し、オープン ソース ベスト プラクティスを利用することで、カメラからクラウドにまで広がるドローン アプリケーションの基盤を確立することができます。Dronecodeの「フルスタック」プラットフォーム アプローチは、メンバーのハードウェアとソフトウェアのイノベーションを結合しており、自律的で、環境を認識し、継続的にネット接続されている新世代ドローンを作り出すことでしょう。an airborne Internet of Things.”
Chris Anderson, CEO, 3DR
(Former Editor in Chief of Wired magazine and author of “The Long Tail”)

「オープン ソースは、我々の開発に本質的なものです。It’s a powerful approach that lets people work together to build great solutions while realizing shared benefits.”
Rob Alexander, CIO, Capital One

組織は、オープン ソース コミュニティへの適切な参加や、法的で責任あるやり方での参加の最善な方法についてのガイダンスを探しています。参加者は、コードとIPを共有することを望み、IP資産（商標、著作権、特許）のための、信頼のおける中立的な管理場所を必要としています。リソース プール（財政、技術）のフレームワークを必要としています。





参加者は、効果的な方法で、自分の競争者といかに協力するかについてのトレーニングを必要としています。そのためにも、本書は、オープン ソース ライセンスの精神と法的項目を固守しながらも、共有される価値とイノベーションを創造する最善の方法について共有理解を作り出すことに焦点を合わせています。 
 
 
 




第1章

オープン ソース コンプライアンス導入

A CHANGING BUSINESS ENVIRONMENT 
Traditionally, platforms and software stacks were implemented using proprietary software, and consisted of various software building blocks that originated as a result of internal development or via third-party software providers with negotiated licensing terms. ビジネス環境は予測可能で、企業は潜在的なリスクをソフトウェアベンダーとのライセンス交渉や契約交渉を通じて軽減していました。全てのソフトウェアコンポーネントについて誰が提供者であるかを知るのは大変容易でした。図１は従来のハードウェア、ソフトウェアのプラットフォームについて主なブロックを示したものです。

図1プロプラエタリなソフトウェアのブロックに依る従来のソフトウェアプラットフォームの単純化したアーキテクチャ





時と共に企業はOSSを自社のプラットフォームやソフトウェアスタックに組み込み、その恩恵に預かるようになってきました。その理由は製品ごとに様々ですが、様々な業界で共通するのは、オープンソースのコンポーネントには即座に使える卓越した特徴があったこと、分散的な開発による市場投入への時間短縮により経済的に有意の利益があったこと、そしてソースコードをカスタマイズするという新しく出来ることを提供したこと、です。その結果、複数のソースによる新たな開発モデルが登場しました。その結果、複数のソースによる新たな開発モデルが登場しました。

この新たなモデルでは、製品は下記の任意の組み合わせとなります。

. プロプラエタリなコード、その製品やサービスを作る企業が開発したものプロプラエタリなコード、元々はその企業によりオープンソースのライセンス下でオープンソースのコンポーネントを統合したり適用したりすることで開発されたが、上流のオープンソースプロジェクトに寄付されず戻されなかったものサードパーティの商用コード、サードパーティのソフトウェアプロバイダにより開発され、製品やサービスを作る企業が商用ライセンスの下で受領したものオープンソースのコード、オープンソースのコミュニティにより開発され、製品やサービスを作る企業がオープンソースライセンスの下で受領したもの


図２（次ページ）に複数のソースによる開発モデル、および入ってくるソースコードの様々な組み合わせを示します。

この開発モデルでは、ソフトウェアコンポーネントは任意の数の出所から来た、様々なライセンス下でライセンスされたソースコードから構成され得ます。たとえば、ソフトウェアコンポーネントAはサードパーティのプロプラエタリのコードに加えプロプラエタリなコードも含んでおり、ソフトウェアコンポーネントBはオープンソースプロジェクトからのソースコードに加えプロプラエタリなコードを含む、などです。







図 2 マルチソース開発モデル

かつては明らかにプロプラエタリなソフトウェアスタックだったものの中にオープンソースのソフトウェアのコンポーネントが増えていくに従い、ビジネス環境は慣れ親しんだ領域、企業が好む環境から離れていきます。
図３（次ページ）はあるプラットフォームやソフトウェアスタックにおいて、様々な階層でオープンソースソフトウェアを受けいれる様子を示したものです。

プロプラエタリな開発モデルと、マルチソースによる開発モデルとの大きな違いの一つは、オープンソースソフトウェアのライセンスは交渉するものではないことです。ソフトウェアの提供者（すなわちオープンソースの開発者やプロジェクト）と調印する契約はありません。そうではなく、オープンソースプロジェクトを開始した人々が所定のライセンスを選びます。そしてプロジェクトがある規模に達すると、変更は事実上不可能となります。マルチソースの開発モデルを使うとは、数十の相異なるライセンス（とライセンスの組み合わせ）に基づく数百人、時には数千人のライセンス提供者やコントリビューター（著作権者）と関わること、を企業は理解しなければなりません。その結果、かつては企業対企業のライセンスや合意に至る交渉を通じて管理されていたリスクは、強固なコンプライアンスプログラムと、注意深いエンジニアリングの実施によって管理されることになります。



図3A simplified view of the architecture of a modern software platform, showing the proliferation of open source inside each of the software building blocks.

ENTER OPEN SOURCE COMPLIANCE 
Open source initiatives and projects provide companies and other organizations with a vehicle to accelerate innovation through collaboration with the hundreds and sometimes thousands of communities that represent the developers of the open source software. しかしながら、オープンソースのコミュニティと組むには責任が伴います。オープンソースのライセンスに伴う義務を順守することを保証しなければなりません。
オープンソースのコンプライアンスとは、オープンソースのユーザー、インテグレーター、開発者が著作権表示をきちんと見て、自らに関わるオープンソースのソフトウェアコンポーネントのライセンス上の義務を満たすプロセスです。適切に規定されたオープンソースのコンプライアンスのプロセスは、ライセンス条項の順守を保証すると同時に、企業自身、あるいはサードパーティのサプライヤの知的財産が意図せず公開されたり、その他不適当な結果を招いたりしないように設計されるべきです。
オープンソースのコンプライアンスは3つの主要な目的の達成に役立ちます。

. ライセンス上の義務に従う
. オープンソースが商用製品で効果的に使われることを助ける. サードパーティとの契約上の義務に従う 

オープンソースのコンプライアンスを保証する利点

オープンソースのコンプライアンスを達成する事にはいくつかの利点があります。確固たるコンプライアンスプログラムを持つ企業は技術的にも利益を得ることが多いです。規定に従っているソフトウェア群の資産はサービスし、試験し、アップグレードし、保守することが容易だからです。更に、コンプライアンスの活動は、様々な製品や部門で使われていてカギとなる、組織にとって高度に戦略的で利益をもたらすオープンソースソフトウェアの洗い出しにつながります。また逆に、レビューを繰り返すことを通じてコンプライアンスは、オープンソースのコンポーネントの利用に伴うコストやリスクを示すことにもなります。

健全なコンプライアンスのプログラムは外部コミュニティと協業する上でも大いに有用です。コンプライアンス上の問題が生じた時、そうしたプログラムは会社が善意であることを示すことができます。

最後に、頻度は下がるが強固なコンプライアンスのプログラムがもたらす利益として、例えば、会社の買収や売却、新製品や新サービスのリリースのためより良い準備となる、が挙げられます。オープンソースへのコンプライアンスの保証はそうした業務が完了する前に終了させることが必須だからです。更には、OEMや下流のベンダーとの取引においてコンプライアンスが検証できることは付加的な優位となります。






コンプライアンスの失敗

ソフトウェア開発の全工程において、コンプライアンスプログラム上のエラーや不十分さはコンプライアンス上の失敗に繋がることがあります。下記はこうした失敗の例です。

. 不適切な帰属表示 (attribution notice)帰属表示は通常、テキストファイルとしてオープンソースのコンポーネントと共に提供され、オープンソースコンポーネントへのコントリビューターが提供したことを示します。
. ライセンス表示提供を怠るライセンス表示とは、製品やスタックに含まれるオープンソースのライセンス文書を含んだファイルで、多くの場合、製品の文書と共に、あるいは製品やアプリケーションのUIと共に提供されます。
. 著作権表示の省略著作権表示は、ソフトウェアのコピーにつけられる識別情報で、著作権者を示します。
. 変更表示の付け忘れ変更表示とは、ソースコードに対する変更をチェンジログ内で表示する、GPLやLGPLで必要になるものです。一例を下記に示します。


/* * Date Author Comment * 10/15/2015 Ibrahim Haddad Fixed memory leak in nextlst() */

. 不十分な、あるいは誤解を招く主張
. ソースコード提供の失敗ソースコードを利用可能とすること（変更を含む）はGPL/LGPLライセンスファミリーの要求の一つです。 





. GPL/LGPL等のライセンスのソースコードを使う際に書面で告知しない書面での告知は、その製品のエンドユーザーに対してその製品に含まれるオープンソースソフトウェアの情報、そして頒布されるべきソースコードをダウンロードする方法を開示します。It is usually provided as part of the product documentation and also accessible from the product’s user interface. 書面告知の基本的な例は下記のようになります。


To obtain a copy of the source code being made publicly available by FooBar, Inc. related to software used in this FooBar product, you can visit http://opensource.foobar.com or send your request in writing by email to opensource@foobar.com or by regular postal mail to:

Foobar株式会社

オープンソースプログラム室

住所、郵便番号

City, State, Postal Code

国名

. ビルド用スクリプトを提供しない　コンパイルに必要なもの（GPLやLGPLファミリのライセンス毎に）。



知的財産権上の失敗

表1 (次ページ) はソフトウェア開発の過程においてプロプラエタリな知財とオープンソースの知財を誤って混ぜてしまい、ライセンスコンプライアンス問題となるありがちな例を示したものです。もっともありがちなのは、異なる、または両立しないライセンス（例：プロプラエタリ、サードパーティやオープンソース）下のソースコードを混ぜてしまう、ことです。そうして混ぜてしまうと企業はプロプラエタリなソースコードをオープンソースライセンスで開示することを強制され、（おそらくは）高い価値を持つ知財の制御を失い、市場における差別化が弱くなってしまいます。





The intellectual property failures can lead to one or more of the following results: 
. 差し止め命令によりコンプライアンス上の懸念が解決されるまで製品が出荷できない問題のバイナリコードに関わるプロプラエタリなソースコードを（ケースに応じた）オープンソースライセンスで配布するよう要求されますコンプライアンス上の懸念を解消するため多大な工数が費やされます顧客、ディストリビュータ、サードパーティのソフトウェア供給者、そしてオープンソースコミュニティを困惑させます


表１Examples of intellectual property failures 
Problem Type

発見する方法

回避方法

オープンソースのコードをサードパーティのコードに挿入

開発プロセスの中で開発者がオープンソースのコード (いわゆるスニペット) をプロプラエタリやサードパーティのコードに挿入して発生

オープンソースのコードとの一致の可能性を求めてソースコードをスキャン

 
コンプライアンスやオープンソースライセンス、プロプラエタリやサードパーティのコードにオープンソースのコードを含めることの意味について認識するためのトレーニングを提供

予期されないライセンスやコードのスニペットのため、定期的にプロジェクトの全ソースコードをスキャン
オープンソースソフトウェアを使う際には製品のレポジトリにコミットする前に承認を必要とするようにします 








問題の類型

発見する方法

回避方法

オープンソースのソフトウェアをプロプラエタリなソースコードのソフトウェアにリンク (またはその逆。C/C++特有の問題) specific to C/
C++ source code) 
Occurs as a result of linking software components that have conflicting or incompatible licenses

異なるソフトウェアコンポーネント間のリンクを検出できる依存性追跡ツールを利用; 企業のオープンソースポリシーで許容されているかを識別

Offer training on linkage scenarios based on company compliance policy 
Regularly run dependency tracking tool to verify all linkage relationships; flag any issues not in line with compliance policies

Inclusion of proprietary code into an open source component 
Occurs when developers copy/paste proprietary source code into OS software

ソースコードをスキャンする。Tool will ID source code that doesn’t match what’s provided by OS component, triggering various flags for Audit 
Train the staff

ソースコードを定期的に検査

プロプラエタリなソースコードをオープンソースのコンポーネントに含めるには承認を必要とするようにします 




ライセンスコンプライアンス問題

ライセンスコンプライアンス問題は知財上の問題に比べ一般に損害は小さいです。自社のプロプラエタリなコードをオープンソースライセンスで開示するといった副作用がないからです。

License compliance failures may result in any (or a combination) of the following: 
. ソースコードが開示されるまで製品出荷を差し止める命令






. バージョンのミスマッチによりカスタマーサポート・カスタマーサービス上の問題となる（サポートホットラインに電話やemailでソースコード開示について問い合わせがくる結果）
. 顧客やオープンソースコミュニティにおいて困惑や悪い評判を招く


表２にソフトウェア開発プロセスでの最も一般的なライセンスコンプライアンス問題の例、および回避方法を示します。

表2Examples of license compliance problems and how to avoid them 
Problem Type

回避方法

ライセンス上の義務の一環としてソースコードのパッケージを出版[05] (publish)したり利用可能としたりし損ねる

詳細なコンプライアンスチェックリストに従い、製品やアプリケーション、ソフトウェアスタックの出荷時には全てのコンプライアンス上のアクションアイテムが完了したことを確認

出荷されたバイナリと異なるバージョンのソースコードを提供

検証作業をコンプライアンスプロセスに追加し、提供するソースコードのバージョンが、出荷される バイナリのバージョンと確かに正確に対応することを確認

出荷製品に組み込まれたオープンソースソフトウェアへの変更をリリース忘れ

Use a bill of material (BOM) difference tool that allows the identification of software components that change across releases 
Re-introduce the newer version of the software component in the compliance process 
Add the “compute diffs” of any modified source code (eligible for open source distribution) to the checklist item before releasing open source used in the product 








問題の類型

回避方法

変更されたオープンソースのコードにマークを付け忘れる、変更の記述を入れ忘れる

ソースコードへのマーク付けをソースコードのリリース前のチェックリストに加え、ダウンロードしたオリジナルのコピーとの差分すべてに確実にマーク

Conduct source code inspections before releasing the source code 
Add milestone in compliance process to verify modified source code has been marked as such

ソースコードの変更履歴をアップデートすることを、開発プロセスの一部とするようスタッフを教育





コンプライアンスプロセス上の失敗

コンプライアンスプロセス上の失敗は、オープンソースのライセンス条件の侵害、例えばライセンス上の義務を満たさない、に繋がる。表３にソフトウェア開発で起きる最も一般的なコンプライアンスプロセス上の失敗のリスト 、および回避方法を示します。 




表3Sample process compliance failures 
Failure

回避方法

開発者が企業内のオープンソース委員会 (時にオープンソース評価委員会と呼ばれる) オープンソースソフトウェアの利用申請をしない、期限までに行わない

コンプライアンスポリシーとプロセスについての教育

Conduct periodic full scans of software platform to detect any OS not corresponding to a given approval form. 定期的にソフトウェアプラットフォーム の全スキャンを行い、承認された型に該当しないオープンソースを検出。もしビルドされたシステムに該当するコンプライアンスチケットがないオープンソースコンポーネントが検出されたら、自動で新チケットを発行（企業がBugzillaのようなツールに埋め込まれているワークフローを使ってソフトウェアコンポーネントを追跡していると仮定）

Include compliance in performance reviews; e.g., failure to abide by the compliance policies directly affects employees’ bonuses 
Mandate that developers file approval requests early, even if they didn’t yet decide on adoption of OS code

オープンソースの訓練を受けない

オープンソースの訓練は従業員のキャリア開発計画の一部であり、業績評価プロセスの一部としてモニタされていることを念押し

ソースコードの監査を行わない

コンプライアンスのスタッフを適切に訓練

Conduct periodic source code scans 
Ensure that auditing is a milestone in the iterative development process 
Provide proper level of staffing so as not to fall behind in the audit schedule

監査で発見された問題を解決しない

監査レポートが完結しない限りコンプライアンスチケットをクローズ させない。チケットのクローズは、関連するサブのタスクが存在しない時のみとする









LESSONS LEARNED 
In the past few years, we have witnessed several cases of non-compliance that made their way to the public eye. そうしたコンプライアンス違反の法的な決着を通じて、オープンソースのプロフェッショナル達は次のような教訓を学びつつあります。

製品出荷やサービス立ち上げに先立ちコンプライアンスを確実に行う

コンプライアンス違反事件の最も重要な教訓は、関係した企業は最終的には問題のライセンス条項に従わなければならなかった、のであり、この事実を踏まえた問題解決のコストは基本的なコンプライアンスのコストを圧倒的に上回っていた、のです。従って、製品出荷やサービス立ち上げに先立ってコンプライアンスを確実に行うのが賢いやり方です。
コンプライアンスは法務部門の業務に留まるものではない、と認識することは重要です。全部門が関わって適切なコンプライアンス、正しいオープンソースの利用、必要に応じた再配布、を確実に行う必要があります。この関わりには首尾一貫したコンプライアンスポリシーや手続きの確立と維持管理、利用中（プロプラエタリ、サードパーティ、オープンソース）の全ソフトウェアコンポーネントのライセンスが共存し得ることを製品出荷やサービス立ち上げ前に確認すること、が含まれます。そのためには企業はオープンソースを管理するインフラを末端まで構築し下記を行う必要があります。

. 製品の中で、サービスが開示している、あるいは内部で利用されている全てのオープンソースを識別アーキテクチャを評価し、オープンソースのライセンス上の義務がプロプラエタリやサードパーティのソフトウェアコンポーネントまで拡大していないか、拡大しているならばどのように、を検証適用可能なオープンソースライセンスを収集し、法務部門が評価






. オープンソースの利用および配布のポリシーと手続きを定めますアーキテクチャ設計と製造の実務においてリスクを低減


コンプライアンス違反は高くつく

コンプライアンス違反が公となった事件の多くはGPLのソースコードが関わっています。これらの紛争解決の合意では下記の一つないし一つ以上 の条項が含まれています。

. コンプライアンスを満たすよう必要なアクションを取る
. コンプライアンスオフィサーを置きコンプライアンスをモニタし確認させます
. 製品を受け取った過去の顧客に、製品はオープンソースソフトウェアを含んでいること、そのソフトウェアについての権利、を通知
. ライセンス告知を企業のウェブサイトに掲載
. 製品説明に告知を追加
. ソースコードをすべての改変と共に利用可能 に（GPL/LGPLファミリのライセンスに限る）
. 問題となっているオープンソースソフトウェアのバイナリの配布を、関連のソースコードが開示されるまで、あるいはコンプライアンス違反で影響を受けた特定顧客が利用可能となるまで差し止め. いくつかの事件では、原告に対し非開示の額の金銭的対価






更に、コンプライアンス異議申し立てを受け、それが成功すると下記のコストを負うことになりました。

. コンプライアンスの照会への対応として申し立てに応じた調査、問題のソースコードのデューデリジェンス、のためのディスカバリとデューデリジェンスのコスト
. 外部・内部のリーガルコストブランドや評判、信頼性へのダメージ


ほぼすべての事件において、オープンソースライセンス上の義務違反は面目の失墜、否定的な記事、オープンソースコミュニティとの関係悪化を招いています。
関係は大事

オープンソースソフトウェアを自社製品で利用する企業は、利用しているコードを開発し維持七得るオープンソースコミュニティと良い関係を持ち、維持することが望ましいです。オープンソースプロジェクトのコミュニティは企業が自社製品に含まれるオープンソースソフトウェアのライセンスを尊重すると期待しています。その方向に動き、オープンかつ正直な関係を気づくことは大いに価値があります。
Training is Important 
Training is an essential building block in a compliance program, to ensure that employees have a good understanding of the policies governing the use of open source software. ソフトウェアに関わる全職員が企業のポリシーとプロセスを理解する必要があります。企業はそうした教育を公式・非公式の教育で提供することが多いです。





第2章

オープンソース管理プログラムの確立

オープンソース管理プログラムはオープンソースソフトウェアの全ての側面、その選択、承認、利用、配布、監査、インベントリ、訓練、コミュニティとの関わり、広報等々の体系を定めます。本賞はオープンソース管理プログラムの様々な構成要素を概観し、新しいコンプライアンスプログラム策定における難しさを概説し、そうした難しさを克服する方法を述べます。
オープンソースコンプライアンスプログラム

最初に、成功するオープンソースコンプライアンスプログラムでコアとなる構成要素を概観します。本章と図4にこれら構成要素の概観を示すします。 


図4オープンソース 管理プログラムの必須構成要素








コンプライアンス戦略

オープンソースコンプライアンス戦略は、ポリシーやプロセスの実装 の主たる側面について、ビジネスに立脚してコンセンサスを推し進めるものです。こうしたハイレベルなコンセンサスに基づかずにポリシーやプロセス の実装の細部について社内合意しようとすると、不可能とは言わないまでも非常な困難に直面します。コンプライアンス戦略はコンプライアンスを確保するために行うべきことを定め、職員のオープンソースソフトウェアの扱いを統べる原則を与えます。オープンソースの承認、取得 (acquisition) , 利用、オープンソースライセンスを含むかオープンソースラインセンスに基づいてライセンスされたソフトウェアをリリースする方法、の正式なプロセスも本戦略に含まれます。
照会応答戦略

照会応答戦略は、コンプライアンスが問われた時に行うべきことを定めます。企業は時として悪評（場合によっては正式な申し立て）を、コンプライアンスについての追加情報提供の要請を無視したり、コンプライアンスの照会を扱う方法を知らなかったり、オープンソースコンプライアンスプログラムが欠落していたり不十分だったり、単に照会者と協力しなかったために、受けてきました。こうしたアプローチは関係者のだれにとっても実りや利益を生みません。従って企業は照会を受けとり、受領したことを応答し、照会者に検討することを伝え、現実的なフォローアップの日程を通知する方法を定めるべきです。後ろの章で、オープンソースコンプライアンスに対する照会を扱うシンプルなプロセスについて述べます。
ポリシーとプロセス

オープンソースコンプライアンスポリシーとは、オープンソースソフトウェアの管理（利用と寄付の双方）を取り仕切るルール群です。プロセスとは、日々の業務にこれらルール群を実装するかを詳細に列挙したものです。コンプライアンスポリシーとプロセスがオープンソースソフトウェアの様々な側面、利用、寄付、監査、配布を取り仕切ります。図５（次ページ）はコンプライアンスプロセスの例を図示したもので、個々のソフトウェアコンポーネントがデューデリジェンスの一環として通るべき様々なステップを示しています。このプロセスの詳細は後ろの章で述べます。

 
図5コンプライアンスデューデリジェンスプロセスの例

コンプライアンスチーム

オープンソースコンプライアンスチームとは、オープンソースコンプライアンスを確実に行うため様々な分野の人々を集めたチームです。コアとなるのはオープンソース評価委員会 (Open Source Review Board, OSRB) と呼ばれることが多い委員会で、エンジニアリング、製品のチームの代表者たち、一人以上の法務顧問、そしてコンプライアンスオフィサーから構成されます。拡大チームは様々な部門からコンプライアンス活動のため随時加わる人々で、文書作成、サプライチェーン、全社開発、IT、ローカル化、オープンソース幹部会議 (Open Source Executive Committee, OSEC)らが含まれます。ただし拡大チームのメンバはコアチームと違い、OSRBから仕事を委任された時だけ活動します。コンプライアンスに常時携わるわけではないです。第３章ではオープンソースコンプライアンスを達成するための個々の人間の役割と責任について詳述します。

図６（次ページ）はコンプライアンス達成のためのこれら二つ、コアチームと拡大チーム、を図示しています。







図6オープンソースコンプライアンスを確かなものとする個人とチーム

ツール

オープンソースコンプライアンスチームはツールを使うことでソースコードの監査、オープンソースコードとそのライセンスの発見、が自動化され楽になります。こうしたツールには

. コンプライアンスプロジェクト管理ツール、コンプライアンスプロジェクトを管理し、タスクやリソースを追跡
. ソフトウェアインベントリツール、個々のソフトウェアコンポーネント、バージョン、それを使用している製品、関連情報を継続的に追跡






. ソースコードとライセンスの識別ツール、ビルドするシステムに含まれるソースコードの由来とライセンスを特定. リンク解析ツール、問題となるC/C++ソフトウェアコンポーネントと、製品に含まれる他のソフトウェアコンポーネントとの関係を特定。本ツールを使うことで、企業のポリシーを満たさないソースコードパッケージとのリンクを発見できます。この目標は、プロプラエタリやサードパーティのソフトウェアコンポーネントにオープンソース上の義務が何ら及んでいないことの確定です。もしリンクが発見されたら、製造部門に対しバグチケットを発行し、問題と解決方法を記述します。. ソースコードのピアレビュー（査読）ツール、ライセンス上の義務を満たすための開示に先立ちオリジナルソースコードに対する変更をレビュー。
. 部品表 (bill of material, BOM) 差分ツール、二つの異なるビルドでの部品表の違いを特定。本ツールはコンプライアンス準拠作業を積み上げで行う場合に非常に有用です。 

ウェブ上のプレゼンス

企業はポータルを２方向で使います。：一つは内向きに、企業内へ。もう一つは外向きに、社会とオープンソースコミュニティへの窓として。内部向けのポータルはコンプライアンスポリシー、ガイドライン、各種文書、訓練、通知、メーリングリストへのアクセスを提供します。外部向けのポータルは社会とオープンソースコミュニティに向けて公開のプラットフォームとなり、またオープンソースのパッケージのソースコードや受領通知ほかの情報開示を投稿する場としてライセンス上の義務を履行します。 




教育

教育はコンプライアンスプログラムにおいて必須の構成要素で、オープンソースソフトウェアの利用を取り仕切るポリシーを従業員がよく理解する基礎となります。オープンソースとコンプライアンスの教育の目標は、公式非公式を問わず、オープンソースのポリシーや戦略、オープンソースのライセンスや、製品やソフトウェアポートフォリオにオープンソースソフトウェアに組み入れることのビジネス的、法的リスクについて共通理解を作り上げ、注意喚起することです。またトレーニング は、企業内でコンプライアンスポリシーを広め推進し実施し、コンプライアンスの文化を育てる場となります。

公式トレーニング

企業の規模やオープンソースの営利活動への浸透度合いに応じて、企業はオープンソースに携わる従業員に公式の講師によるトレーニングコースを命じることができます。実例でのトレーニングがその頂点となりえます。
非公式トレーニング

非公式のトレーニングは下記のいずれか、あるいは全部を含む。

. ブラウンバッグセミナー（茶色鞄のセミナー）：ブラウンバッグセミナーとは一般に、昼食時に従業員や招待者が行うプレゼンテーションです。こうしたセミナーの目標は、商用の製品や企業のソフトウェアポートフォリオの中にオープンソースを組み込むことの様々な側面について講演し、議論を起こすことです。これらのセッションは、企業のコンプライアンス プログラム、ポリシー、そしてプロセスに関する議論も含みます。. 新人研修：時にはコンプライアンスオフィサーが企業のコンプライアンスの努力、規則、ポリシー、プロセスを新人に対して研修の一部として講演し、必要となるオープンソースの管理上の情報（聞くべき人、訪れるべき内部のウェブサイト、オープンソースとコンプライアンスのトレーニングへの参加方法等々）を提供します。






Automation 
Developers who wish to use or contribute to open source software will be requested to submit online requests and get proper approvals. これは自動化されたオンラインシステム、通常はオープンソースコンプライアンスの管理を特に組み込んだワークフローに従うバグ追跡システムで行うのがベストです。

メッセージの発信

メッセージの発信は内部向け、外部向けともコンプライアンスプログラムの必須の構成要素です。ここで最も重要なのは明確で首尾一貫していることで、内部的に従業員に対してオープンソース関連の会社の目標や懸念事項を伝える場合も、外部に向け自社製品やソフトウェアスタックが利用しているオープンソースプロジェクトの開発者コミュニティに伝える場合も同様です。
コンプライアンスの難しさと解決策

企業でのコンプライアンスプログラムの確立では、ほぼ確実に困難に直面します。以下の説では最もありふれた困難を取り上げ、克服する方法を示唆します。

Creating a Compliance Program 
The first challenge is to balance the compliance program and its supporting infrastructure with (existing) internal processes while meeting deadlines to ship products and launch services. こうした難しさを和らげ解決し、開発活動にとって重荷とは見做されない能率的なプログラム確立を助ける様々な手段があります。





解決策

役員のサポート

役員レベルでのオープンソース管理プログラムへのコミットは、その成功と継続のために重要です。
ポリシーとプロセスの負荷の軽さ

プロセスとポリシー は重要である。だが開発プロセスにとって重荷に過ぎると開発チームが見做さないよう軽く効果的でなければなりません。
能率的なオープンソース管理は二つの基盤の上に成り立つ。：簡単で明確なコンプライアンスポリシーと、軽いコンプライアンスプロセスです。

基本ルールを強制

コンプライアンスプログラムを実施する一環として、誰でも従わねばならない幾つかのシンプルな規則を定める必要があります。

. 開発者がオープンソースソフトウェアを製品やソフトウェアスタックに組み入れを計画するときは申請します。
. サードパーティのソフトウェアサプライヤに、提供物に含まれるオープンソースソフトウェアの情報を開示させます。あなたのサプライヤがオープンソースコンプライアンスを見事に実践しているとは限りません。オープンソースの開示に関わる文言を入れるよう、契約を見直すべきです。. アーキテクチャのレビューとコードの検査を指示し、オープンソース評価委員会 (OSRB) がソフトウェアコンポーネント間の関係を理解し、オープンソースからプロプラエタリなソフトウェアへとライセンス上の義務が派生していることを見つけられるようにします。大規模に行うには適切なツールが必要となります。 





. サードパーティのソフトウェアプロバイダから受領するすべてのソフトウェアをスキャンし、オープンソースに関する開示が正しく、完全であることを確認します。 

コンプライアンスを開発プロセスに統合

コンプライアンス確立の最善の方法は、コンプライアンスプロセスやポリシー、チェックポイント、活動を既存のソフトウェア開発プロセスに組み込むことです。
Long-Term Goals versus Short-Term Execution 
Figure 4 described the essential elements needed for a successful compliance program. プログラムのすべてを実装するのに必要な作業の多さに圧倒される関係者もいるかもしれません。実際にはそこまで難しいものではありません。すべての要素を同時に実装しなければならない訳ではないからです。すべての組織において優先されるのは、製品やサービスを期限通りに出荷し、と同時に内部的なオープンソースコンプライアンスのインフラストラクチャー を構築し拡大することです。従って、企業なりのコンプライアンスのインフラストラクチャーを状況の進展に合わせて構築すべきと考えればよく、その際には将来の活動や製品をふまえ拡張性を考えるべきです。カギとなるのは思慮深く現実的な計画です。

解決策

. 長期的な目標に合致する、十全なコンプライアンスのインフラストラクチャーを計画し、短期的な実行の必要性に合わせ、要素を一つずつ実装します。たとえば、もしオープンソースを含む製品開発やサービス提供を始めたばかりであり、すでに動いているコンプライアンスのインフラストラクチャーが何もないならば、最も差し迫った懸念はコンプライアンスチームを作ることであり、プロセスとポリシー、ツールと自動化を確立することであり、従業員を訓練することです。これらの活動を（この順番で）開始し、システム構築を（コンプライアンスの観点から）適切に制御しつつ開始したならば、プログラムの他の要素に進むことができます。
. ポリシーとプロセスを確立
. 開発プロセスの一部としてコンプライアンスを組み込み 





コンプライアンスについての対話

コンプライアンス活動の成功を確かなものとするには、対話は必須です。2種類の対話、あなたの組織内での内部的なもの、あなたの製品で使われているオープンソースのプロジェクトの開発者コミュニティとの外部に向けたもの、を考えることが重要です。
内部的な対話

企業はコンプライアンスについての対話が内部的に必要となります。オープンソースを商業ソフトウェアのポートフォリオへの組み入れが何をもたらすのか従業員が理解していることを確実にするためであり、企業のコンプライアンスポリシー、プロセス、ガイドラインについて教育を受けていることを確かなものとするためです。内部的な対話は下記のいずれでも可能です。

. オープンソースコンプライアンス活動を幹部がサポート する電子メールでの対話オープンソースソフトウェア関連業務に携わる全従業員に対する正式な訓練命令オープンソースとコンプライアンスについてのブラウンバッグセミナーによりコンプライアンスについて更に注意喚起し、活発な議論を奨励内部的なポータルを作り、企業のコンプライアンスポリシーやプロセス、オープンソースに関係した出版物やプレゼンテーション、メーリングリスト、オープンソースとコンプライアンスに関係する討論フォーラムをホスト企業全体に向けたオープンソースのニュースレター。一般に隔月か四半期ごとに、オープンソースのコンプライアンスについて注意喚起 

外部との対話

企業は外部とのコンプライアンスについての対話が必要となります。自社が製品で使うオープンソースソフトウェアについてライセンス上の義務を果たす努力をしていることを、オープンソースのコミュニティに確かに認識させるためです。 




外部との対話は下記のいずれでも可能です。

. コンプライアンス遵守のためにオープンソースを配布するためのウェブサイト. オープンソースの組織への参加 やサポート。こうした活動は企業がオープンソースの組織との関係を確立し、そうした組織の役割を理解し、有意義な貢献をするのを助けます。オープンソースのイベントや会議への参加。参加には様々なレベルがある。イベントのスポンサーから講演や出版物への寄与、あるいは単に開発者を参加させオープンソースの開発者たちと知り合いオープンソースコミュニティのメンバと新たな関係を育成します。


クリーンなソフトウェア起点 の確立

コンプライアンスプログラムの開始当初の困難の一つは、使われているオープンソースソフトウェアとそのライセンスを正確に把握することです。この初期の監査プロセスは、製品やソフトウェアポートフォリオのクリーンなソフトウェア起点の確立、と呼ばれることが多いです。これは数か月かかることもある重い活動で、開発と並行してどの程度早期に作業を開始するかに掛かっています。
解決策

組織は初期のコンプライアンスを以下の活動を通じて達成します。

. オープンソースの利用申請の早めの提出と評価
. 自動化されたソースコードのスキャン を継続的に、事前設定した時間間隔で全ソースコードに対して 実行
. ソースコードのベースを継続的にスキャン。これにはサードパーティのソフトウェアプロバイダから受領したものを含めます。該当するコンプライアンスチケットなしにコードベースにチェックインしたソースコードを捕まえるためです。こうしたソースコードのスキャンはたとえば毎月行います。. 設計とアーキテクチャの評価をソースコードの検査に加えて強制します。これはオープンソース、プロプラエタリ、そしてサードパーティのソフトウェアコンポーネントのコードの関係を解析するためです。これを強制するのは、そうした関係がライセンス上のコンプライアンスの義務に関わるときのみでよいです。 

もし企業がコンプライアンスの起点構築に失敗すると、その製品の将来の改訂版（またはおなじ起点を使った異なる製品）がコンプライアンス問題で苦しむことはほぼ確定となります。
そうしたシナリオを防ぐため、企業は下記を考慮すべきです。

. シンプルだが確実に行われるポリシーと軽量なプロセスを提供
. コンプライアンス上のチェックポイントをソフトウェアの開発プロセスに含め、コンセプトが出荷される製品やソフトウェアスタックとなる時に行います。理想的にはすべての開発上のマイルストーンにおいて対応するコンプライアンス上のマイルストーンを組み込み、ビルドに使われる全ソフトウェアコンポーネントが対応する、承認されたコンプライアンスチケットを確実に持つようにします。
. 専任のコンプライアンスチームを確保します。この点は後ろの章で文章を割きます。
. コンプライアンスチケットを効率的に処理するためツールや自動化を利用します。この点は後ろの章で論じます。


コンプライアンスの維持

オープンソースのコンプライアンスを維持するには、コンプライアンスの起点確立と同様、いくつかの困難があります。実際には踏むべきステップの多くは同じで、ただし規模は小さく、積み増しとなります。コンプライアンスの維持は継続的な努力であり、規律、そして既存の製造およびビジネスのプロセスへのコンプライアンス活動組み込みのコミットメントによります。
図7に積み上げのコンプライアンスの概念を示します。ここでは初期のコンプライアンスの起点と現在のバージョンとの間で起きたソースコードの変更が何であれ、コンプライアンスを確実に満たすことが必要となります。



図7積み上げのコンプライアンスの例

解決策

企業は以下の活動を通じてコンプライアンスを維持することができます。

. 企業のコンプライアンスポリシーとプロセス、加えてあらゆるガイドラインの厳守コードベースに統合されたすべてのソースコードについて、出所を問わず継続的に監査コンプライアンスや自動化に使われるツールを継続的に改善し、コンプライアンスプログラムにおいて可能な限り多くのプロセスを高い効率で実行


内面化と末永い実行 

オープンソースのコンプライアンス活動を維持するのは組織 が成長し、オープンソースを使った更なる製品やサービス出荷に伴う進行中の挑戦です。企業は開発のカルチャーの中へとコンプライアンスを内面化し、末永く実行するためにいくつかの段階を踏むとよいです。 




解決策

後援者

役員レベルのコミットメントがコンプライアンス活動を持続させる上で必須です。進行中のコンプライアンスのリーダーとなり、オープンソースの管理機能を企業としてサポートする役員がいなければなりません。
一貫性

企業全体で一貫性を保つことは複数のビジネスユニットや子会社を持つ大企業では重要です。部門間での一貫したアプローチは、記録の保持、グループ間でのコードの共有促進と並び有用です。

計測と分析

コンプライアンス活動やプロセス、手続きのインパクトや効率性を計測し分析すべきです。パフォーマンスを調べ、コンプライアンスプログラムを改善するためです。計測の尺度は、コンプライアンスプログラムを推進する場合にプログラムの個々の構成要素から得られる生産性向上について対話をする助けとなります。
コンプライアンスプロセスの改善

組織がオープンソースを利用する範囲や目的 は変化します。製品や技術、企業の吸収や合併、海外への委託、その他多くの要因によって動きます。従って、今ぷらインすポリシーとプロセスを絶えず評価し、改善する必要があります。
更に、オープンソースラインセンスの解釈や法的リスクも進化します。こうしたダイナミックな環境の中で、コンプライアンスプログラムも進化する必要があります。 




守らせること 

コンプライアンスプログラムは、守られなければ無意味です。効果を持たせるため、コンプライアンスプログラムにはプログラム厳守を監視し、ポリシーやプロセスやガイドラインを全社的に守らせる メカニズムを含めるべきです。コンプライアンスプログラムを守らせる方法の一つは、ソフトウェア開発プロセスと統合し、従業員の業績査定の幾分かをコンプライアンスプログラム活動へのコミットメントと実行とすることです。

STAFFING 
Ensure that staff is allocated to the compliance function, and that adequate compliance training is provided to every employee in the organization. 大きな組織ではコンプライアンスオフィサー、および関連する職務はフルタイムの仕事となり得ます。小さい組織では分担したり、時間の一部を割くべき活動となる可能性が高いです。





第3章

コンプライアンス達成に向けて：役割と責任

一人の個人では、どれほどの達人であろうとも、オープンソースコンプライアンスを組織全体に実装することはできません。図8はオープンソースコンプライアンスの達成に責任がある様々な部門を書き下したものです。コンプライアンス達成には二つのチームが必要となる。コアチームと拡大チームです。後者は通常、前者を包括するものとなります。



図8オープンソースコンプライアンスを確かなものとする個人とチーム





コアチームはオープンソース評価委員会 (Open Source Review Board, OSRB) と呼ばれることも多いです。エンジニアリングと製品のチームの代表者たち、一人以上の法務顧問、そしてコンプライアンスオフィサーから構成されます。表４に個々の参加者のコアチームにおける役割と責任を示します。

拡大チームは表5 (49ページ) に示す通り、様々な部門からコンプライアンス活動のため随時加わる人々で、文書作成、サプライチェーン、全社開発 、IT、ローカル化、オープンソース幹部会議 (Open Source Executive Committee, OSEC)らが含まれます。ただし拡大チームのメンバは（実体をもつ組織である）コアチームと違い、OSRBから仕事を委任された時だけ活動します。

表4コンプライアンスコアチーム (OSRB) の主な役割と責任

Participant 
Primary Roles and Responsibilities

法務の代表者

代表者はその時の作業に応じ、法律顧問から弁護士補助職員まで変化します

OSRBとOSECへ参加

オープンソースソフトウェアの利用、改変、配布をレビューし承認

ライセンスについてのガイドラインの提供

Contribute to and approve training 
Contribute to improving the OS compliance program

Review and approve content of OS portals 
Review and approve list of obligations to fulfill 
Review and approve open source notices









Participant 
Primary Roles and Responsibilities

エンジニアリングおよび製品チームの代表

企業によってはエンジニアリングと製品のチームは分かれていない

OSRBとOSECへ参加

Follow compliance policies and processes 
Integrate compliance practices in dev process

コンプライアンスプログラムの改善に貢献

技術的なコンプライアンスプログラムの遵守

あらゆる質問への迅速な回答

Conduct design, architecture, and code reviews 
Prepare software packages for distribution

コンプライアンスオフィサー

オープンソースコンプライアンスオフィサーは必ずしも専任である必要はないです。大抵の場合、オープンソース部門の部長や所長が役割を果たします

Drive all compliance activities 
Coordinate source code scans and audits 
Coordinate distribution of source code packages

OSRBとOSECへ参加

Contribute to compliance and OS training 
Contribute to improving compliance program

OSECにコンプライアンス活動について報告

自動化や、開発環境の中にオープンソースのコードを見つける新たなツール作成に寄与 








表5コンプライアンス拡大チームの役割と責任

Participant 
Primary Roles and Responsibilities

オープンソースの戦略を決定するオープンソース幹部会議 (Open Source Executive Committee, OSEC) 

Review and approve proposals to release IP 
Review and approve proposals to release proprietary source code under an open source license. これはそのソースコードはオープンソースにする前提で開発されたならば不要です。

Documentation 
Include open source license information and notices in the product documentation

Localization 
Translate basic information in target languages about open source information related to the product or software stack

Supply Chain 
Mandate third party software providers to disclose open source in licensed or purchased software components

オープンソースソフトウェアが含まれている、またはバンドルされているサードパーティのソフトウェアの納入を手助け

Information Technology (IT) 
Provide support and maintenance for the tools and automation infrastructure used by the compliance program

OSRBの要請に応じ、新しいツールを作成、入手









Participant 
Primary Roles and Responsibilities

Corporate Development 
Request open source compliance be completed before a merger or acquisition 
Request open source compliance be completed when receiving source code from outsourced development centers or third-party software vendors





オープンソース評価委員会 (Open Source Review Board, OSRB)

The OSRB is responsible for: 
. サードパーティのソフトウェアとオープンソースのソフトウェアライセンスとが相互にコンプライアンスを確かに満たすようにします. オープンソースソフトウェアの効果的な利用、およびオープンソースソフトウェアへの寄与を促進
. プロプラエタリな知財（引いては製品の差異化）を、オープンソースのライセンスがプロプラエタリな、またはサードパーティのソフトウェアに確かに及ばないようにすることで防御


日々の活動としては、OSRBのメンバーは下記に従事します。

. エンドツーエンド（端から端まで）のコンプライアンスプロセスの確立します。OSRBはエンドツーエンドのコンプライアンスプロセス、すなわち利用、監査、開発、関与、保障、コンプライアンス管理に責任を持ちます。エンドツーエンドのコンプライアンスプログラムについては4章で概観します。
. コンプライアンスプログラムで使われるコンプライアンスポリシー、プロセス、ガイドライン、テンプレート、フォームを作成し保守 





. オープンソースの利用、改変、配布の申請をレビューする。OSRBはエンジニアリングや製品部門からのオープンソース利用申請 をレビューし承認します。利用のプロセスは6章で論じます。. ソフトウェアの監査の実施：OSRBは製品に含まれる全ソフトウェアについて監査を行う。これは下記が含まれます。ソフトウェアベースに対しソースコードをスキャンするツールを適用スキャンするツールの結果を分析スキャンのツールで発見されたコード合致 、潜在的な合致、ライセンスの衝突を識別 . スキャンのツールで特定されたすべての問題が解決することを監督
. 最終監査報告書を作成し、特定されたすべての問題が解決されたことを確実にする


監査はOSRBか独立した監査チームかが組織の規模に応じて責任を持ち、コンプライアンスオフィサーに報告します。6章で監査のプロセスについて論じます。

. アーキテクチャのレビュー実行。承認過程の一つとして、OSRBはエンジニアリング部門の代表と共にアーキテクチャをレビューし、オープンソースのソースコード、プロプラエタリのコード 、サードパーティのソースコードの関係を解析します。本レビューの目的は、アーキテクチャのガイドラインが尊重され、オープンソース、プロプラエタリ、サードパーティのソフトウェアの関係が、現場が受け入れ可能な法的ガイドラインの範囲内に収まっていることを確認することです。. リンク解析をレビュー。OSRBはAPI呼び出し等によるリンク関係により、何らかのオープンソースのライセンス上の義務がプロプラエタリやサードパーティのソフトウェアに広がっていないかの確認のためリンク解析を行います。






. オープンソースを含む製品のリリースやサービスの開始を取りやめる決定を検証. 社内のスタッフやエンジニアから寄せられるオープンソースに関する質問に対しガイダンスを提供
. 配布前の検証作業の一環としてコードの検査を実施。オープンソースライセンスのテキストや著作権表示が完全な形となっており、ソースコードに対して施された変更を反映するようエンジニアたちが変更ログ をアップデートしていることを確認
. 問題となっているオープンソースソフトウェアで満たすべきライセンス上の義務の一覧を作り、満たすよう関係部門に展開：OSRBがオープンソースを製品に利用することを承認したら、承認プロセスの一部としてOSDBは義務一覧を作り、関係する様々な個人やチームに展開して確実に満たすようにします。配布前のプロセスの一部としてOSDBは製品やサービスのリリース前に最終チェックを行いますが、義務を満たしていることの検証もここに含みます。
. オープンソースとコンプライアンスの訓練を開発し提供。OSRBはオープンソースとコンプライアンスの訓練の開発を主導し、従業員が企業のオープンソースのポリシーやコンプライアンスのプロセスについて良く理解するようにします。更に、OSRBは最も広く利用されるいくつかのオープンソースのライセンス、商用でのオープンソース利用に関わる話題についても教育すべきです。この訓練はオープンソースを使ったソフトウェアの開発や管理に関わる従業員全員が受けなければなりません。. 企業のオープンソースのウェブサイトをホストし維持。：従業員向けの内部のウェブサイトはオープンソースのプロセスやポリシー 、ガイドライン、訓練、告知が主となります。外部向けのサイトは通常、ソースコードのパッケージを利用可能とし、特定のコンプライアンス上の義務を満たすことが第一の目的となります。






. コンプライアンスの質問を取扱う。OSRBは企業に送付されたオープンソースのコンプライアンスに関わるあらゆる質問に答える責任があります。第9章でコンプライアンスの質問を扱うプロセスを述べます。. コンプライアンスの記録を取る：いかなるオープンソースソフトウェアコンポーネントについてもコンプライアンスに関するすべての記録が最新のものとなっていることにOSDBは責任を持ちます。
. エンドユーザー向け文書をレビューし、製品やソフトウェアスタックに含まれるオープンソースについて、消費者へのコピーライト、帰属、ライセンスの告知が適切であることを確認します。またGPL/LGPLファミリのライセンスの場合には、可能であれば ソースコードを得る方法を書面にします。
. コンプライアンスの作業をより自動化し効率的にする、コンプライアンスの基盤の一部として利用されるべき新しいツールを推薦。
. 製品出荷をオープンソースコンプライアンスの観点から承認。. コミュニティに関与するポリシー、プロセス、手続き、ガイドラインを策定。これはコンプライアンスではないが、責任ある事柄のリストの完全性という観点で挙げておく。 

法務

法律顧問はオープンソースライセンスへのコンプライアンスを確かなものとする委員会 、OSDBのコアメンバーです。法律顧問は４つの必須の義務があります。

1. Provide approval regarding the use of open source in products or services 
The approval of the Legal Counsel is required when using open source in a commercial product. 典型的には、法律顧問はコンプライアンスチケットを評価します。これはオンライントラッキングシステム (例えばJIRAやBugzilla) 、ソースコードをスキャンするツールの結果報告、 




ソースコードのパッケージに添付のライセンス情報を使います。次にリスク要因を、エンジニアとオープンソースコンプライアンスオフィサーからの情報に基づいて評価します。この作業の一環として、法律顧問は対象ソフトウェアコンポーネントについて入ってくる、及び出ていくライセンスについて決定を行います。入ってくるライセンスとは、対象となるコードに含まれるソースコード全てのライセンスのこと です。出ていくライセンスとは、製品やサービスの 受領者が利用できるソースコードやオブジェクトファイルのライセンスのことです。
2. Advise on open source licensing 
. オープンソースライセンス 上の義務についてガイドラインを提供. 互換性がなかったり、衝突するライセンスに由来するライセンスの衝突について第一に企業のポリシーに基づいて助言を行います。これは時として関連するオープンソースの組織の法律上の意見表明になど外部条件に依ることもあります。
. オープンソースの利用に伴う知財権について助言します。これは特に、企業が元々はプロプラエタリだったソースコードをオープンソースライセンス下で提供するときに問題となります。
. エンジニアリングチームからのオープンソースについての質問や懸念に対し勧告したり、ガイダンスを提供したりします。



3. Review and approve updates to end-user documentation 
This form of legal support is related to ensuring that appropriate open source notices (copyright, attributions, and license notices) are provided to consumers in relation to any open source included in the product. これに加え、GPL/LGPLファミリのライセンスのいずれかに従ってソースコードがライセンスされるならば、ソースコードを得る方法の情報を書面で提供する必要があります。





4. オープンソースコンプライアンスプログラムの立ち上げと継続に貢献

. オープンソースのポリシーとプロセスを確立し維持. オープンソースのコンプライアンスに関連して企業に送付された質問を取り扱う
. オープンソースのライセンス、企業のポリシー、ガイドラインに関わる訓練を提供


エンジニアリングおよび製品チーム

エンジニアリングと製品のチームはOSRBに一人または複数の代表を出し、エンジニアリングチームに割り当てられたコンプライアンス関連のタスク全てを追跡し、適切、確実に解決します。これと並行し、エンジニアリングと製品のチームはオープンソースのコンプライアンスについていくつかの責任を負います。

. オープンソースソフトウェアについて要望を提出：エンジニアリングと製品のチームは製品の基盤として導入すべき外部のソフトウェアを決定します。これはサードパーティやオープンソースのソフトウェアを含みます。コンプライアンスの観点からのチームの主な責任は、製品やサービスに含まれる予定の全オープンソースについて利用申請書類を出すことです。この書類には問題となるオープンソースの利用方法を記述します。これはソフトウェアの起源と由来について良好な記録を構築し維持する助けとなります。. 技術上のコンプライアンスのガイドラインの順守：エンジニアリングと製品のチームはソースコードに関するOSRBの構想、設計、統合、実装についての技術ガイドラインを遵守すべきです。OSRBのガイドラインは通常以下をカバーします。よくあるミスと回避方法リンクにより起き得る問題を回避するため、ライブラリやその他ミドルウェアを統合するときの規則


. カーネル空間とユーザー空間のどちらで開発を行うか（Linuxの場合）、特に組み込み環境においてプラットフォーム全体を開発する時オープンソースコンプライアンスに関わり得るエンジニアリング上の特別な状況 



. 設計のレビュー：エンジニアリングチームは継続的に設計をレビューし、コンプライアンス問題をタイムリーに発見し救済策を講じるべきです。コンプライアンスオフィサーは設計のレビューを主導し、対象となるソフトウェアコンポーネントに応じて異なる参加者をエンジニアリングチームから招きます。
. OSRBとの協力：エンジニアリングチームはOSRBからの質問に迅速に回答し、コンプライアンスチケットを解決するのに協力しなければなりません。
. 変更の追跡：変更ログを変更したオープンソースコンポーネント毎に維持管理： オープンソースのライセンス上の義務を満たすため変更ログが必要となります。問題となるライセンスに依りますが、ある種のライセンス（GPL/LGPLファミリーなど）では変更されたファイルには、変更したこととその日付を目立つように付けることを求めています。
. 配布のためのソースコードパッケージを準備：エンジニアリングチームはライセンスの義務に従って公開のウェブサイトで利用可能とするソースコードパッケージを準備します（これ以外のソースコードの配布方法については後ろの章で論じます）. コンプライアンス上のマイルストーンを開発プロセスの一部に統合：これはOSRBとコンプライアンスオフィサーと協力して行います。. オープンソースの訓練を受ける：すべてのエンジニアは利用できるオープンソースの訓練を受けねばなりません。. オープンソースのプロジェクトをモニタし、バグフィックスやセキュリティパッチが利用可能となったかを判断し、製品で使われているオープンソースコンポーネントのアップデートに責任を持ちます。個々のパッケージの組織内でのオーナーが通常はこの仕事を行います。 

コンプライアンスオフィサー

コンプライアンスオフィサーはOSRB議長やオープンソース部長/役員とも呼ばれます。OSRBの議長でありコンプライアンスプログラムを管理します。
理想としてはコンプライアンスオフィサーは下記を出来る限り備えている必要があります。

. 法律顧問の業界慣行の知識と討議できる、一般的なオープンソースラインセンスと義務について確たる理解企業全体のポリシーとプロセスを確立できる知識と経験企業の製品についての技術的知識オープンソースについての歴史的な視点コミュニティのコンセンサスと慣行の知識重要なオープンソースプロジェクトのコミュニティとの人脈The Linux Foundation, Apache Foundation, Mozilla Foundation, Software Freedom Law Center (ソフトウェアの自由のための法律センター) などのオープンソースの団体との人脈 

OSRBに帰属する責任に加え、コンプライアンスオフィサーは以下の義務がある。

. コンプライアンスのエンドツーエンド (端から端まで) のデューデリジェンスプロセスを主導し、コンプライアンスプログラムの管理者として、コンプライアンスに関連する全ての業務が適切に認識され製品出荷を妨げるコンプライアンス上の問題が存在しないようにする






. ソースコードのスキャン作業を調整し、すべての監査を終わりまで主導するエンジニアリングチームによる設計のレビュー、コードの検査、配布可能化の評価に参加し、エンジニアリングおよび製品チームがコンプライアンスの全プロセスとポリシーに従っていること、OSRB承認済の利用申請書類に適合することを確認します。オープンソースのパッケージのソースコード配布（ライセンスに規定されている場合）についてエンジニアリングおよび製品チームと調整します。これは個々のオープンソースパッケージの配布チェックリストの用意と確認を含みます。OSECとORSBの間の連絡役となります。コンプライアンス上の課題をOSECに上げます。オープンソースの利用申請書類の承認について、エンジニアリングおよび製品チームとOSRB、OSECの連絡役となります。コンプライアンス活動についてOSECに報告します。これは製品やサービスの出荷を妨げている課題の注意喚起を含みます。


OPEN SOURCE EXECUTIVE COMMITTEE 
The Open Source Executive Committee (OSEC) consists of engineering, legal, and product marketing executives in addition to the Compliance Officer. OSECの責任はオープンソース戦略の設定、知財の評価と解放の承認、従来はプロプラエタリだったソースコードを特定のオープンソースライセンス下で発表することの承認です。
DOCUMENTATION 
The documentation team is responsible for including written offers and any appropriate open source notices in the product documentation. 次ページの図9にそうした告知を準備し承認するプロセスを図示しています。このプロセスはコンプライアンスオフィサーが開始します。コンプライアンスオフィサーは製品が出荷されたら利用可能となる告知の書面や通告の草案を準備します。次に法律顧問が草案をレビューし、修正し、最終版を文書化チームに渡します。最後に、最終稿 を製品添付の文書に含めます。 


図9製品添付の文書を更新し製品に含まれるオープンソースの存在を反映する文書化チームの役割

ローカル化

ローカル化チームは製品に含まれるオープンソースソフトウェアの入手についてユーザーに知らせ、英語での適切な通告が利用可能となる ようにします。
SUPPLY CHAIN 
Supply chain (software procurement) procedures must be updated to address the acquisition and use of open source. サードパーティから供給されたソフトウェアは自分で検査するようにすることが強く望まれます。供給元から自社へのソフトウェアの移管には通常、サプライチェーン関係者が関わります。サプライチェーン部門 はオープンソースのコンプライアンス活動をサードパーティのソフトウェア（そしてハードウェア）のサプライヤに対し、供給した品に含まれる全オープンソースを開示するよう命令することで、またオープンソースのパッケージとバンドルされたり統合されたりしているサードパーティのソフトウェアのライセンスを助けます 。

この分野での最も良い方法は、サードパーティのソフトウェアプロバイダに彼らが提供する品についてのオープンソースすべてを開示するよう命令し、またオープンソース上の義務を満たす計画を表明させることです。もしサードパーティのソフトウェアがオープンソースを含んでいたならば、サプライチェーン部門 はオープンソースライセンス上の義務が確実に満たされるようにしなければなりません。受け入れた後はオープンソースを含む製品やサービスを配送する業者として義務は自社のものとなるからです。自社のコードの受け手に対し、自社の「上流」の供給元を名指しし、ライセンス上の義務を果たす責任は供給元であり自社ではない、ということは受け入れられません。
IT

IT部門はコンプライアンスプログラムで使われるツールのサポートや、自動化の基盤を提供、維持します。これは各種のツールやメーリングリスト、ウェブのポータルの提供が含まれます。さらにIT部門はOSRBからコンプライアンス活動の効率向上のためのツールの開発や調達を要請されることもあります。
企業買収

企業買収部門はオープンソースのコンプライアンスに主に二つの流れで関わります。買収と吸収合併、および開発の外部委託です
合併と買収

他社との合併や、自社が買収されることを考えるならば、コンプライアンスプログラムはしかるべきレベルの開示を行い、説明が出来るように作られるべきです。合併や買収についての全社ポリシーはオープンソースを考慮するように改める必要があります。企業買収部門は合併や買収に先立ちソースコードをコンプライアンスの観点から評価し、議論を脱線させたり企業価値を変えたりする不測の事態が起きないよう命令しなければなりません。買収側の企業にとって、包括的なコードの評価はソフトウェア資産を正確に評価し、将来の企業価値が予期せぬライセンス問題にさらされるリスクを緩和することに繋がります。これに加え、買収側の企業は買収の合意文書にオープンソースについての開示の条項を入れることも考えられます。デューデリジェンスの実務はオープンソースについての開示、開示されたオープンソースとライセンスの評価のガイドを含むよう改める必要があります。
開発の外部委託

ソフトウェア開発の外部委託の合意文書も、コンプライアンス手続きを反映し、またその他の条項（表示や保証など）がオープンソースによるリスクを広く含むよう改める必要があります。企業買収部門は外部の開発センターから受領したソースコード全てがコンプライアンスプロセスを通り、利用されたオープンソースが全て発見されライセンス上の義務を満たすため適切な行動が確かに取られるよう命令しなければなりません。

Other Corporate Transactions 
Corporate Development is also involved with compliance in transactions such as spin-offs and joint ventures. 時にはコンプライアンス上のデューデリジェンスの結果、コンプライアンスの状況が理想からかけ離れており、ためにその活動を止める決定をする場合もあります。 




第4章

オープン ソース コンプライアンス プロセス

オープン ソース コンプライアンス プロセスの実現は、コンプライアンスを組み込む必要がある開発プロセス、コードのサイズと数、関連する製品とサービスの数、外部から導入されたコード量、組織のサイズや体制など、多くの要因に基づいて、組織ごとに変化します。しかし、コンプライアンスの中心的要素は、通常同じです：コード中のオープン ソースを特定し、レビューし、利用を許可し、義務を順守することです。この章では、コンプライアンス プロセスの中心的要素に焦点を当てます。コンプライアンス精査の結果は、外部出荷を意図した製品において使われる全てのフリー オープン ソース ソフトウェアの特定と、それに付随するライセンス義務を遵守するための計画です。図10は、一貫したコンプライアンス プロセスの高水準の概要図の一例を提示しており、外部出荷される製品やサービスへの統合許可を受ける前にフリー オープン ソース ソフトウェアを含むコンポーネントが通過する様々なコンプライアンス ステップやフェーズを図示しています。

 
図10一貫したコンプライアンス プロセスの簡略図

図10に示されているのは一例であり、同じ目的を達成するためにコンプライアンス プロセスを作る方法は多くあります。この章を通じて、これらの様々なフェーズ、各フェーズのインプットとアウトプット、そしてコンプライアンス プロセスによってソフトウエア利用をどのように管理するかを確認していきます。 




EFFECTIVE COMPLIANCE 
The term due diligence refers to a number of concepts involving source code inspection, source code surveillance, or the performance of quality duties and system audits. オープン ソース コンプライアンスのこのケースでは、精査は、以下の項目の確認を要求されるものとします；

. 製品で利用されるオープン ソース ソフトウェアは、特定され、レビューされ、承認されている。製品実装は、承認されたオープン ソース コンポーネントとライセンスのみを含む。
. ライセンスされたものの利用に関する全ての義務は、特定されている。適切な通知は、帰属表記や著作権表記を含む文書で提示されている。変更（適用可能な場合）を含むソース コードは準備されて、製品出荷の時点で入手可能になっている。プロセス中の全段階の検証


簡潔で、組織内で十分に理解されている一貫したコンプライアンス プロセスを持つことには大きな利点があります。そのようなプロセスは：

. 組織に義務を履行させつつ、一方で組織がオープン ソースから恩恵を得られるようにします。オープン ソース利用を一時的なものから標準プロセスへと移行させます。オープン ソース コンポーネント入手の管理を助けます。従業員が、責任ある方法でオープン ソースとどのように取り組めばよいか理解するのを助けます。組織で利用している様々なオープン ソース プロジェクトの開発者との関係を改善します。 





. ソース コード変更の共有を行うことで、統合コードのプロジェクト コミュニティとの間で、情報やアイディアの交換が加速されます。組織は安全にオープン ソース コンポーネントを採用して、新しいサービスや製品の立ち上げに必須のものとして利用できるので、イノベーションを加速できます。 

一貫したコンプライアンス プロセスの要素

一貫したコンプライアンス プロセスの10ステップ

1. 入るソース コードの特定

2. ソース コードの監査

3. Resolving any issues uncovered by the audit 
4. 適切なレビューの完了

5. オープン ソース利用の承認受領

6. ソフトウェア リストへのオープン ソースの登録

7. Updating product documentation to reflect open source usage 
8. 頒布前の上記全段階の検証

9. Distributing source code packages 
10. 頒布に関連した最終検証の実施 






図11End-to-end compliance process 
The remainder of this chapter will address each of these ten steps in detail.

ステップ1Identification of Open Source 
The goal of this initial step is to monitor the ingress and incorporation of open source in a software portfolio, either as a standalone package or embedded within third-party or company-developed software. 製品に利用されるオープン ソースを特定するいくつかの方法があります。

. オープン ソース利用の要求：これは、製品中のオープン ソース利用を特定する最も普通の方法です。技術担当か製品マネージャは、OSRB（3章で説明）かコンプライアンス チームに特定製品やプラットフォーム リリースに特定のオープン ソースを利用したい旨を通知することが求められています。申請者は、レビューと承認の対象であるオープン ソース パッケージの計画した利用に関して情報を提供します。. コンプライアンス基盤として確立するために、全プラットフォームや製品コード ベースを監査し、その上で、後続のリリースで変更されたコード モジュールを監査する。
. サード パーティ ソフトウェア プロバイダー精査：これは、オープン ソース コンプライアンス チームによる開示内容のレビューを伴う、サード パーティ供給者によって提供された製品中にあるオープン ソース コンポーネントの全開示を要求します。あるケースでは、精査の追加として、供給コードの監査結果をサード パーティ ソフトウェア ベンダーに要求することも意味があります。これは、製品へ入るオープン ソースの管理を確実にします。. プロプライエタリ（自社開発の） ソフトウェア コンポーネントの監査：例として、技術者が、オープン ソース コンポーネントにあるソース コードをコピー／ペーストして、プロプライエタリ ソフトウェアに加えるかもしれません。それゆえに、製品出荷日前に発見されなければコンプライアンス違反に陥るようなオープン ソース コードを含んでいるかもしれませんので、自社開発ソフトウェア コンポーネントを監査することは重要です。
. 組織のソース コード リポジトリに入る、オープン ソースの利用要求に対応していない全オープン ソース コンポーネントの検査：オープン ソース利用の意図のフォームへの記載を技術者に頼るのは、全ての入るオープン ソース ソフトウェアを説明するには必ずしも確実な方法とはいえません。それゆえに、バックアップとして、オープン ソース用の分離したフォルダーを持つソース コード管理システムの準備と、このフォルダーにチェックインがされた時の警告を検討して下さい。オープン ソースと自社開発プロプライエタリ ソフトウェアとサード パーティ ソフトウェアをビルド システムで別のフォルダーに分離しておくのは常に奨励されるプラクティスですから、新しいコードが提出された時に警告が出るようにすることはできます。既存の利用（オープン ソース要求）フォームに対応しない新しいコンポーネントが提出されたら、それは新しいコンポーネントであり、新しいフォームに記入する必要があります。 

特定フェーズの前提条件

以下条件の一つが満たされる：

. 特定のオープン ソース利用を要求する入るOSRBフォームプラットフォーム スキャンによって（適切な承認なしに）利用されているオープン ソースの発覚 



. サード パーティ ソフトウェアの一部として利用されているオープン ソースの発覚 

Identification phase outcome 
. コンプライアンス記録は、オープン ソースに対して生成（更新）されます。ソース コードをスキャンするように、監査が要求されます。


ステップ 2 . Auditing Source Code 
The second step in compliance due diligence consists of scanning the source code using automated analysis tools to discover matches with known open source projects.

監査担当者は、リリースに含まれているものは様々な適用可能なオープン ソース ライセンスに適合している証拠を、リリースごとに反復して、ソースコードスキャンを実施します。

監査の目的は：

. 最後のスキャンからの間に、加えられた（削除された）オープン ソースを説明するリリースBOMを更新します。オープン ソースの由来も含めて、ソース コードの由来を確認します。全ての依存関係、コード一致、ライセンス矛盾にフラグを付けます。


監査フェーズの前提条件

適切なコンプライアンス記録（チケットとも呼ばれます）は、特定のオープン ソース利用に関する全ての必要な情報を補足し、内部ビルドシステム内のソース コードの場所を提供するように、作成されます。ある場合には、特にプラットフォームのフル スキャンが実施される時、適切なコンプライアンス報告が作成される前に、オープン ソース コンポーネントはスキャンされることもあります。この場合には、オープン ソース コンポーネントが発見された時に、記録が作成されます。





Auditing phase outcome 
. ソース コードの出自とライセンスを特定する監査報告. 変更要求チケットは、適切な技術チームに対して、監査中に特定された解決すべき課題について記載されます。 

Several actions can trigger discovery and an audit for software components (Figure 12, next page): 
. 開発者からのオープン ソース コンポーネント利用の要求. 全ソフトウェア スタックのソース コード スキャン以前に承認されたコンポーネントでのソース コード変更サード パーティ ベンダーから受け取ったオープン ソースウェブからダウンロードされたソース コード（著者やライセンスが不明）ソース コード リポジトリへ提出されるプロプライエタリ ソフトウェアコード リポジトリへ追加された、利用申請フォームに対応していないオープン ソース以前、異なる製品で承認を受けたオープン ソースの利用





 

図12入るオープン ソースの特定と監査の方法





ステップ3Resolving Issues 
In this step of the compliance due diligence, all issues identified during the auditing step are resolved. OSRBチェアは、監査ステップで技術者に割り当てられたチケットのクローズを監視します。技術者が特定された課題を解決した時には、OSRBチェアは、解決された課題がもはや存在しないことを確認するために監査を要求するべきです。
課題解決フェーズの前提条件

ソース コード スキャンが完了し、ソース コードの出自とライセンスを特定した監査報告が生成される。報告は、特定されていないソース コード ファイルや、異なるライセンスで結合されるソース コードによって生じるライセンス矛盾にフラグを付けます。コンプライアンス オフィサーは、これらの課題解決を推進します。

Resolving Issues phase outcome 
A resolution for each of the flagged files in the report and a resolution for any flagged license conflict.
ステップ4Reviews 
Once the auditing is complete and all issues identified earlier have been resolved, the compliance ticket for a specific software component moves to the review step. 図13（次ページ）に示すように、様々なレビューが実施され、特定された全ての課題は解決していなければなりません。レビュアーは、ソフトウェアの利用、変更、頒布を支配するライセンスを理解し、様々なライセンスの義務を特定する必要があります。For any given software components, the reviewers of the compliance ticket are: 
. 社内パッケージ所有者（特定のソース コード コンポーネントの開発者）ソース コード スキャンか監査の担当者






. OSRBチェア、法務担当、およびOSRB技術代表からなるOSRB (オープン ソース レビュー ボード)OSEC （オープン ソース エグゼクティブ ボード）




図13コンプライアンス チケットのレビュアーとその役割

コンプライアンス精査のこのステップの一部として、2つの重要なレビューがあります：アーキテクチャー レビュー、リンク解析レビュー





アーキテクチャー レビュー

アーキテクチャー レビューの目的は、オープン ソース、サード パーティ、プロプライエタリ コード間の相互作用を解析することです。アーキテクチャー レビューの結果は、オープン ソース コンポーネントからプロプライエタリ コンポーネントへ（その逆も）影響を与えるライセンス義務の解析です。社内パッケージ所有者、OSRB技術代表、そしてオープン ソース エキスパートが、アーキテクチャ レビューを行います。もしライセンスの矛盾になるような依存関係を発見した場合、コンプライアンス オフィサーは、ソース コードの再作業によって依存関係問を題解決するためにチケットを技術担当に発行する。

Linkage Analysis Review 
The goal of a linkage analysis review is to find potentially problematic code combinations at the static and dynamic link level, such as linking a GPL or more commonly an LGPL-licensed library to a proprietary source code component. OSRB チェアは、自動ツールを使用してこの調査を行います。リンク問題は、解決するように技術担当に報告されます。

レビュー フェーズの前提条件

監査されたソース コード、解決されている全ての課題。

Review phase outcome 
OSRB members perform an architecture review and a linkage analysis for the specific component and mark it as ready for the next step (i.e., Approval) if no issues are uncovered.

ステップ5Approvals 
Once all reviews have been completed, the software component’s compliance ticket moves to the approval step, where it is either approved for usage in the product or not. 承認はOSRBが行います。（前の章で説明したように、法務担当、技術代表、オープン ソース エキスパートが含まれます） 




ほとんどのソフトウェア コンポーネントに対して、チケットがコンプライアンス プロセスのこの点まで進めば、承認が与えられます。OSRBがオープン ソース コンポーネントの利用を承認したら、OSRBは製品チームに承認を伝えますので、製品チームは責任を理解し、ライセンス義務履行の準備を始めます。OSRBがオープン ソース コンポーネントの利用を却下する場合、OSRBは却下の理由を要求者に伝え、この情報はコンプライアンス チケットの一部として記録されます。要求者はOSRBに再考を促すことは可能ですが、結果としては、オープン ソース コンポーネントは製品に使用できません。

承認フェーズの前提条件

全てのOSRBメンバーはコンプライアンス チケットをレビューし、OSRBはアーキテクチャー レビューとリンク解析を完了している。

Approvals phase outcome 
Approve or deny usage of the specific component.

ステップ6Registration 
Once a software component has been approved for usage in a product or as part of a service, its compliance ticket will be updated to reflect the approval. ソフトウェア コンポーネントは、オープン ソース利用とユースケースを記録したソフトウェア一覧表に加えられます。

保守的なアプローチの後にコンプライアンス プラクティスを進めるならば、特定のバージョンと、特定の製品やサービスバージョンでの利用に対して、オープン ソース ソフトウェアを承認します。このオープン ソース ソフトウェアの新しいバージョンが入手可能になったら、利用形態とライセンスが内部ポリシーと整合していることを確認するために新しい承認依頼を出します。
登録フェーズの前提条件

OSRBはコンポーネントの製品への利用を承認している。





Registration phase outcome 
The component is registered in the software inventory, with the component name, version, internal owner, and the details of where the component is being used, such as product name, version, release number, etc. 
Step 7 . Notices 
One of the key obligations when using open source is the documentation obligation, also referred to as the notice obligation. 外部に提供する製品やサービスにオープン ソースを利用している企業は以下を行う必要があります：

. エンド ユーザーに、ライセンス義務を満たした結果として入手可能になっているソース コードのコピーをどのおうに入手できるかを通知します（必要に応じて）必要な著作権や帰属を通知することで、オープン ソースを利用していることを知らせます。. 製品に含まれているオープン ソース コードに対応するライセンスの全文を提示します。 

オープン ソース ライセンス義務を順守しない企業は、ライセンスを取得できず、著作権を侵害したとして、著作権所有者に法的行動をさらされる可能性があります。また、対象となるソフトウェアを使用および配布する権利を失う可能性があります。ドキュメント記載義務を履行するには、製品に適切な通知を含める必要があります。コンプライアンス精査の中のこのステップでは、OSRB チェアが通知文を準備し、それを各担当部署に手渡します 。
通知フェーズの前提条件

ソフトウェア コンポーネントについて、使用が承認され、ソフトウェア一覧表への登録が完了している。





Notice phase outcome 
The license, copyright, and attribution notices for a specific component are prepared and passed along to the appropriate departments to be included in the product documentation.

ステップ8. Pre-Distribution Verifications 
The next step in the compliance due diligence is to decide on the method and mode of distribution, type of packages to distribute, and mechanism of distribution.
頒布前検証の目的は、以下を確実にすることです：

. 頒布されることになっているオープン ソース パッケージは、特定され、承認されている。. ソース コード パッケージ（変更を含む）は、製品として出荷されるバイナリと一致することが確認されている。適切な通知が、製品文書に含まれていて、エンド ユーザーに特定のオープン ソースのソース コードを要求する権利があることを知らせている。全てのソース コード コメントはレビューされ、不適切な内容は取り除かれている。これは厳密にはコンプライアンスの課題ではないですが、しかしながら、ある場合には、コードが受け取られた場所に関する無邪気なコメントが大きなコンプライアンスに関する問い合わせを生むきっかけになる可能性があります。 

頒布前検証フェーズの前提条件

コンポーネントは利用が承認され、ソフトウェア一覧表に登録され、全ての通知が収集され義務履行のために送付されている。 




Pre-Distribution Verifications phase outcome 
. 頒布方法と様式を決定します
. 全ての頒布前検証が問題なく完了していることを確実にします。


ステップ9頒布

頒布前検証が全て完了したら、対応する製品とバージョンをラベル付けして（このシナリオは、ソース コードを入手可能になることを想定しています。他の方法は後続の章で議論します。）、オープン ソース パッケージを頒布用ウェブサイトにアップロードします。この作業は、コードのダウンロードを希望する人には役に立ちますが、これ自体でライセンス義務を満たしていることにはなりません。更に、推奨プラクティスでは、コンプライアンスやオープン ソースに関係する問い合わせの受付に関する、電子メールや住所などの情報を提供します。
頒布フェーズの前提条件

全ての頒布前検証がチェックされ、問題が発見されていない。

Distribution phase outcome 
The source code of the component in question is uploaded to the website for distribution (if that is the distribution method of choice).

ステップ10Final Verifications 
Once you upload the open source packages to the distribution website, validate that the packages have been uploaded correctly and can be downloaded and uncompressed on an external computer without errors. もし、パッチを提供する時には、それが容易に適用できること、アップストリーム コンポーネントの適切なバージョンを特定していることを確認します。





最終検証フェーズの前提条件

ソース コードはウェブサイト上で公開される。

Final verifications outcome 
You receive verification that the source code is uploaded correctly and accessible for download, and that it corresponds to the same version that was approved. 
