企業におけるオープン ソースソース コンプライアンス


Ibrahim Haddad, PhD


このページは意図的に空白にしてあります。


Ibrahim Haddad, Ph.D.

The Linux Foundation

2016

企業におけるオープンソース コンプライアンス




4


Copyright c 2016 The Linux Foundation

All Rights Reserved



5


目次


第1章 オープンソース コンプライアンス入門

変わりゆくビジネス環境 16

オープンソース コンプライアンス手始め 19

オープンソースのコンプライアンスを保証する利点 20

コンプライアンスの失敗 21

知的財産権上の失敗 22

ライセンス コンプライアンス問題 24

コンプライアンス プロセス上の失敗 26

得た教訓 28

製品出荷やサービス立ち上げに先立ちコンプライアンスを確実に行う 28

コンプライアンス違反は高くつく 29

関係は大事 30

訓練は重要 30


第2章 オープンソース管理プログラムの確立 31

オープンソース コンプライアンス プログラム 31

コンプライアンス戦略 32

照会応答戦略 32

ポリシーとプロセス 32

コンプライアンス チーム 33

ツール 34

ウェブ上のプレゼンス 35

教育 36

自動化 37



意思伝達 37

コンプライアンスの難しさと解決策 37

長期的な目標と短期的な実行 39

コンプライアンスについての対話 40

クリーンなソフトウェア起点 の確立 41

コンプライアンスの維持 42

制度化と持続可能性 43 

第3章 コンプライアンスの達成：役割と責任 46

オープンソース調査委員会 (Open Source Review Board: OSRB) 50

法務 53 

エンジニアリング チームとプロダクト チーム 55

コンプライアンス オフィサー 57

オープンソース幹部会議 (OSEC) 58

文書化 58

ローカリゼーション 59

サプライ チェーン 59

IT 60

◆◆企業買収 60◆◆


第4章 オープンソース コンプライアンス プロセス 62

効果的なコンプライアンス 63

一貫したコンプライアンス プロセスの要素 64

ステップ1 . オープンソースの特定 65

ステップ2 . ソース コードの監査 67

ステップ3 . 課題解決 70



ステップ4 . レビュー 70

ステップ5 . 承認 72

ステップ6 . 登録 73

ステップ7 . 通知 74

ステップ8 . 頒布前検証 75

ステップ9 . 頒布 76

ステップ10 . 最終検証 76


第5章 コンプライアンス プロセスとポリシー

ポリシー 78

プロセス 79

ソース コード スキャン 79

特定と解決 81

法務レビュー 81

アーキテクチャー レビュー 82

最終レビュー 83

プロセスの各ステージにおけるインプットとアウトプット 83

ソース コード スキャン フェーズ 84

特定と解決フェーズ 85

法務レビュー フェーズ 85

アーキテクチャー レビュー フェーズ 87

最終承認フェーズ

詳細な利用プロセス 88

インクリメンタル コンプライアンス プロセス 93

OSRB利用フォーム 95

OSRB利用フォームに影響する規則 99



監査 99

ソース コード頒布 100

頒布の動機 100

頒布プロセスとポリシー

頒布方法と様式 103

頒布チェックリスト 104

頒布前チェックリスト 105

一般公開後のチェックリスト 107

書面による申出 107


第6章 コンプライアンス プロセス管理の推奨プラクティス 109

コンプライアンス プロセス 109

特定フェーズ 109

ソース コード監査 111

課題解決 112

レビュー 113

承認 114

通知 115

検証 115

ツールと自動化 116

ソース コード特定ツール 117

プロジェクト管理ツール 118

ソフトウェアBOM差分ツール 118

リンク解析ツール 119



第7章 コンプライアンスに関する照会の管理 121

コンプライアンスに関する照会への対応 122

確認 122

通知 123

調査 123

報告 123

照会のクローズ 124

矯正 124

改善 124

一般的な考察 124


第8章 その他のコンプライアンス関連プラクティス 125

従業員の評価 125

ウェブ ポータル 126

意思伝達 126

トレーニング

非公式トレーニング 127

公式トレーニング 128

ソース コード変更に関する考察 128

通知に関する考察 128

頒布に関する考察 129

利用に関する考察 130

帰属についての考察 132

帰属タイプ 132

帰属の提示 133



特定のライセンス義務 133

一般的なガイドライン 135


第9章 オープン ソース法務サポートを拡大させる 137

実際的な法務アドバイス 137

ライセンス プレイブック 138

ライセンス両立性マトリックス 139

ライセンス分類 141

ソフトウェア相互作用法 143

チェックリスト 145

結論 146





序文（Preface）

私がオープン ソース コンプライアンスに携わり始めたのは、ソフトウェア開発者としてキャリアを始めた早い時期で、今に至る20年の間、オープン ソース コンプライアンスは、直接間接に私の仕事の一部であり続けています。オープン ソース ソフトウェアに取り組み続けた旅のような期間を通じて、オープン ソース コンプライアンスに関する実践参考例を見つけることは難しいことでした。私の興味は、自分自身の経験を広く利用できるようにすることに注がれていきました。そうすれば、他の人も私の経験から学んでさらに彼らの経験を公開し、業界として、私たちはオープン ソース コンプライアンスを達成する良い方法を目指して励み、そうしながらエンジニアリング リソースや製品出荷に要する期間を最小化することができるわけです。
このハンドブックは、企業の中でオープン ソース コンプライアンスを推進してきた私の経験をまとめたもので、オープン ソース コンプライアンスを構築し維持する実践的な面に焦点を当てています。私の経験のほとんどは、組み込み系の世界（CやC++が主なプログラミング言語）に注力してきましたので、その影響がこのハンドブック全体を通して強く現れています。
この本がオープン ソース コンプライアンスを推進する皆様の日々の活動に役立てられることを願っています。 




序文（Foreword）

オープン ソースは、ソフトウェアや知的財産に関わる個人によってリードされた理想主義的な運動からばかりでなく、オープン ソースがIT戦略における主要な部分であると認識して、オープン ソース開発に参加したいと考えているような（政府、企業、大学などの）組織における活動によっても、広がってきています。Linuxや他のオープン ソース技術における初期段階の成功は、技術の全ての分野にも広がってきています。

伝統的な組織も注目しています。オープンソース ソフトウェアを優先度の高い項目に挙げ、ソフトウェアを組織活動で戦略的優位を得るために使っています。
エンタープライズITでのオープン ソースの利用は、2010年から倍増しています。

調査した企業の78%は、オープン ソース上でビジネスを運用しています。

64%が、現在、オープン ソース プロジェクトに参加しています。

39%が、自社のオープン ソース プロジェクトを立ち上げています。

North Bridge & Black Duck
“The 2015 Future of Open Source Survey（2015年オープン ソースの未来調査）"

「オープン ソース ファースト：納税者のお金で開発された全てのソリューションは、納税者のものであるべきです（オープン ソース）。GSAにおいて開発された全てのコードは、オープン ライセンスのもとに共有されるべきであり、他の人々はそれから便益を受けることができます。加えて、自分たちが設計したソリューションとしてのオープン ソース ソフトウェアを優先的に利用していきます。」
CIOオフィス, 米国連邦調達庁（年間660億ドルの調達を行う米国政府機関）

 




「ブロックチェーン技術の開発は、金融サービス業界の業務や経済構造を再定義する可能性を秘めています。業界が、もっと積極的に、もっと効率的に、もっとディジタル化を促進しようと努力している、そういう重要な時期に現れています。Open source development will accelerate the innovation and help drive the scalability of this technology, and we are proud
to support the Hyperledger Project.”
リチャード ラム, Chief Executive, 財務サービス, Accenture


「成長し活気ある開発コミュニティへのメンバー投資から、Dronecodeプロジェクトの初年度はかなりエキサイティングなものです。共通プラットフォームを確立するために共に努力し、オープン ソース ベスト プラクティスを利用することで、カメラからクラウドにまで広がるドローン アプリケーションの基盤を確立することができます。Dronecodeの「フルスタック」プラットフォーム アプローチは、メンバーのハードウェアとソフトウェアのイノベーションを結合しており、自律的で、環境を認識し、継続的にネット接続されている新世代ドローンを作り出すことでしょう。それは、飛行するIoTです。」
Chris Anderson, CEO, 3DR
クリス アンダーソン, CEO, 3DR
（ワイアード マガジン 前編集長、「ロング テール」著者）

「オープン ソースは、我々の開発に本質的なものです。偉大なソリューションを構築するために、人々を共に作業させるパワフルなアプローチです。そこからは実際にメリットが共有されます。」
ロブ アレキサンダー, CIO, Capital One

組織は、オープン ソース コミュニティへの適切な参加や、法的で責任あるやり方での参加の最善な方法についてのガイダンスを探しています。参加者は、コードとIPを共有することを望み、IP資産（商標、著作権、特許）のための、信頼のおける中立的な管理場所を必要としています。リソース プール（財政、技術）のフレームワークを必要としています。





参加者は、効果的な方法で、自分の競争者といかに協力するかについてのトレーニングを必要としています。そのためにも、本書は、オープン ソース ライセンスの精神と法的項目を固守しながらも、共有される価値とイノベーションを創造する最善の方法について共有理解を作り出すことに焦点を合わせています。 
 
 
 




第1章

オープン ソース コンプライアンス導入

変わりゆくビジネス環境
従来、プラットフォームやソフトウェアスタックはプロプラエタリなソフトウェアを使って実装され、内部開発されたソフトや交渉の結果であるライセンス条件によるサードパーティのソフトから成る様々なソフトウェアのブロックから構成されていました。ビジネス環境は予測可能で、企業は潜在的なリスクをソフトウェアベンダーとのライセンス交渉や契約交渉を通じて軽減していました。全てのソフトウェアコンポーネントについて誰が提供者であるかを知るのは大変容易でした。図１は従来のハードウェア、ソフトウェアのプラットフォームについて主なブロックを示したものです。

図1プロプラエタリなソフトウェアのブロックに依る従来のソフトウェアプラットフォームの単純化したアーキテクチャ





時と共に企業はOSSを自社のプラットフォームやソフトウェアスタックに組み込み、その恩恵に預かるようになってきました。その理由は製品ごとに様々ですが、様々な業界で共通するのは、オープンソースのコンポーネントには即座に使える卓越した特徴があったこと、分散的な開発による市場投入への時間短縮により経済的に有意の利益があったこと、そしてソースコードをカスタマイズするという新しく出来ることを提供したこと、です。その結果、複数のソースによる新たな開発モデルが登場しました。その結果、複数のソースによる新たな開発モデルが登場しました。

この新たなモデルでは、製品は下記の任意の組み合わせとなります。

. プロプラエタリなコード、その製品やサービスを作る企業が開発したもの
. プロプラエタリなコード、元々はその企業によりオープンソースのライセンス下でオープンソースのコンポーネントを統合したり適用したりすることで開発されたが、上流のオープンソースプロジェクトに寄付されず戻されなかったもの
. サードパーティの商用コード、サードパーティのソフトウェアプロバイダにより開発され、製品やサービスを作る企業が商用ライセンスの下で受領したもの
. オープンソースのコード、オープンソースのコミュニティにより開発され、製品やサービスを作る企業がオープンソースライセンスの下で受領したもの


図２（次ページ）に複数のソースによる開発モデル、および入ってくるソースコードの様々な組み合わせを示します。

この開発モデルでは、ソフトウェアコンポーネントは任意の数の出所から来た、様々なライセンス下でライセンスされたソースコードから構成され得ます。たとえば、ソフトウェアコンポーネントAはサードパーティのプロプラエタリのコードに加えプロプラエタリなコードも含んでおり、ソフトウェアコンポーネントBはオープンソースプロジェクトからのソースコードに加えプロプラエタリなコードを含む、などです。







図 2 マルチソース開発モデル

かつては明らかにプロプラエタリなソフトウェアスタックだったものの中にオープンソースのソフトウェアのコンポーネントが増えていくに従い、ビジネス環境は慣れ親しんだ領域、企業が好む環境から離れていきます。
図３（次ページ）はあるプラットフォームやソフトウェアスタックにおいて、様々な階層でオープンソースソフトウェアを受けいれる様子を示したものです。

プロプラエタリな開発モデルと、マルチソースによる開発モデルとの大きな違いの一つは、オープンソースソフトウェアのライセンスは交渉するものではないことです。ソフトウェアの提供者（すなわちオープンソースの開発者やプロジェクト）と調印する契約はありません。そうではなく、オープンソースプロジェクトを開始した人々が所定のライセンスを選びます。そしてプロジェクトがある規模に達すると、変更は事実上不可能となります。マルチソースの開発モデルを使うとは、数十の相異なるライセンス（とライセンスの組み合わせ）に基づく数百人、時には数千人のライセンス提供者やコントリビューター（著作権者）と関わること、を企業は理解しなければなりません。その結果、かつては企業対企業のライセンスや合意に至る交渉を通じて管理されていたリスクは、強固なコンプライアンスプログラムと、注意深いエンジニアリングの実施によって管理されることになります。



図3A simplified view of the architecture of a modern software platform, showing the proliferation of open source inside each of the software building blocks.

オープンソースコンプライアンス手始め
オープンソースのイニシアチブやプロジェクトを使う事で、企業や組織はオープンソースソフトウェアの開発者を代表する数百、時に数千のコミュニティと協力し、イノベーションを加速できるようになります。しかしながら、オープンソースのコミュニティと組むには責任が伴います。オープンソースのライセンスに伴う義務を順守することを保証しなければなりません。
オープンソースのコンプライアンスとは、オープンソースのユーザー、インテグレーター、開発者が著作権表示をきちんと見て、自らに関わるオープンソースのソフトウェアコンポーネントのライセンス上の義務を満たすプロセスです。適切に規定されたオープンソースのコンプライアンスのプロセスは、ライセンス条項の順守を保証すると同時に、企業自身、あるいはサードパーティのサプライヤの知的財産が意図せず公開されたり、その他不適当な結果を招いたりしないように設計されるべきです。
オープンソースのコンプライアンスは3つの主要な目的の達成に役立ちます。

. ライセンス上の義務に従う
. オープンソースが商用製品で効果的に使われることを助ける. サードパーティとの契約上の義務に従う 

オープンソースのコンプライアンスを保証する利点

オープンソースのコンプライアンスを達成する事にはいくつかの利点があります。確固たるコンプライアンスプログラムを持つ企業は技術的にも利益を得ることが多いです。規定に従っているソフトウェア群の資産はサービスし、試験し、アップグレードし、保守することが容易だからです。更に、コンプライアンスの活動は、様々な製品や部門で使われていてカギとなる、組織にとって高度に戦略的で利益をもたらすオープンソースソフトウェアの洗い出しにつながります。また逆に、レビューを繰り返すことを通じてコンプライアンスは、オープンソースのコンポーネントの利用に伴うコストやリスクを示すことにもなります。

健全なコンプライアンスのプログラムは外部コミュニティと協業する上でも大いに有用です。コンプライアンス上の問題が生じた時、そうしたプログラムは会社が善意であることを示すことができます。

最後に、頻度は下がるが強固なコンプライアンスのプログラムがもたらす利益として、例えば、会社の買収や売却、新製品や新サービスのリリースのためより良い準備となる、が挙げられます。オープンソースへのコンプライアンスの保証はそうした業務が完了する前に終了させることが必須だからです。更には、OEMや下流のベンダーとの取引においてコンプライアンスが検証できることは付加的な優位となります。






コンプライアンスの失敗

ソフトウェア開発の全工程において、コンプライアンスプログラム上のエラーや不十分さはコンプライアンス上の失敗に繋がることがあります。下記はこうした失敗の例です。

. 不適切な帰属表示 (attribution notice)帰属表示は通常、テキストファイルとしてオープンソースのコンポーネントと共に提供され、オープンソースコンポーネントへのコントリビューターが提供したことを示します。
. ライセンス表示提供を怠るライセンス表示とは、製品やスタックに含まれるオープンソースのライセンス文書を含んだファイルで、多くの場合、製品の文書と共に、あるいは製品やアプリケーションのUIと共に提供されます。
. 著作権表示の省略著作権表示は、ソフトウェアのコピーにつけられる識別情報で、著作権者を示します。
. 変更表示の付け忘れ変更表示とは、ソースコードに対する変更をチェンジログ内で表示する、GPLやLGPLで必要になるものです。一例を下記に示します。


/* * Date Author Comment * 10/15/2015 Ibrahim Haddad Fixed memory leak in nextlst() */

. 不十分な、あるいは誤解を招く主張
. ソースコード提供の失敗ソースコードを利用可能とすること（変更を含む）はGPL/LGPLライセンスファミリーの要求の一つです。 





. GPL/LGPL等のライセンスのソースコードを使う際に書面で告知しない書面での告知は、その製品のエンドユーザーに対してその製品に含まれるオープンソースソフトウェアの情報、そして頒布されるべきソースコードをダウンロードする方法を開示します。It is usually provided as part of the product documentation and also accessible from the product’s user interface. 書面告知の基本的な例は下記のようになります。


Foobarの本製品の中で使われているソフトウェアに関連する、FooBar社が公開しているソースコードのコピーを得るには、http://opensource.foobar.com にアクセスするか、opensource@foobar.com にメールでリクエストを送るか、またはリクエストを通常の郵便で

Foobar株式会社

オープンソースプログラム室

住所、郵便番号

City, State, Postal Code

国名

. ビルド用スクリプトを提供しない　コンパイルに必要なもの（GPLやLGPLファミリのライセンス毎に）。



知的財産権上の失敗

表1 (次ページ) はソフトウェア開発の過程においてプロプラエタリな知財とオープンソースの知財を誤って混ぜてしまい、ライセンスコンプライアンス問題となるありがちな例を示したものです。もっともありがちなのは、異なる、または両立しないライセンス（例：プロプラエタリ、サードパーティやオープンソース）下のソースコードを混ぜてしまう、ことです。そうして混ぜてしまうと企業はプロプラエタリなソースコードをオープンソースライセンスで開示することを強制され、（おそらくは）高い価値を持つ知財の制御を失い、市場における差別化が弱くなってしまいます。





知財上の失敗は下記を招く。
. An injunction preventing a company from shipping the product until the compliance issue has been resolved
. A requirement to distribute proprietary source code that corresponds to the binaries in question under an open source license (depending on the specific case)
. A significant re-engineering effort to eliminate the compliance issues
. 顧客、ディストリビュータ、サードパーティのソフトウェア供給者、そしてオープンソースコミュニティを困惑させます


表１知財上の失敗の例
問題の類型

発見する方法

回避方法

オープンソースのコードをサードパーティのコードに挿入

開発プロセスの中で開発者がオープンソースのコード (いわゆるスニペット) をプロプラエタリやサードパーティのコードに挿入して発生

オープンソースのコードとの一致の可能性を求めてソースコードをスキャン

 
コンプライアンスやオープンソースライセンス、プロプラエタリやサードパーティのコードにオープンソースのコードを含めることの意味について認識するためのトレーニングを提供

予期されないライセンスやコードのスニペットのため、定期的にプロジェクトの全ソースコードをスキャン
オープンソースソフトウェアを使う際には製品のレポジトリにコミットする前に承認を必要とするようにします 








問題の類型

発見する方法

回避方法

オープンソースのソフトウェアをプロプラエタリなソースコードのソフトウェアにリンク (またはその逆。C/C++特有の問題) specific to C/
C++ source code)
衝突(conflict)する、または互換性のない(incompatible)[03] ライセンスのソフトウェアコンポーネントをリンクした結果発生

異なるソフトウェアコンポーネント間のリンクを検出できる依存性追跡ツールを利用; 企業のオープンソースポリシーで許容されているかを識別

企業のコンプライアンスポリシーに基づくリンクのシナリオについての訓練を提供
定期的に依存性追跡ツールを動作させ、全てのリンク関係を検証; 企業のポリシーで許容されていないあらゆる事柄にフラグを立てます

オープンソースのコンポーネントにプロプラエタリなコードを含めます
開発者がプロプラエタリなソースコードをオープンソースソフトウェアにコピー/ペーストして発生

ソースコードをスキャンする。ツールでオープンソースのコンポーネント由来ではないソースコードは識別できるので、監査のため各種のフラグをつけます
スタッフを訓練

ソースコードを定期的に検査

プロプラエタリなソースコードをオープンソースのコンポーネントに含めるには承認を必要とするようにします 




ライセンスコンプライアンス問題

ライセンスコンプライアンス問題は知財上の問題に比べ一般に損害は小さいです。自社のプロプラエタリなコードをオープンソースライセンスで開示するといった副作用がないからです。

ライセンスコンプライアンス上の失敗は下記のいずれか（か、その組み合わせ）を招き得ます。
. ソースコードが開示されるまで製品出荷を差し止める命令






. バージョンのミスマッチによりカスタマーサポート・カスタマーサービス上の問題となる（サポートホットラインに電話やemailでソースコード開示について問い合わせがくる結果）
. 顧客やオープンソースコミュニティにおいて困惑や悪い評判を招く


表２にソフトウェア開発プロセスでの最も一般的なライセンスコンプライアンス問題の例、および回避方法を示します。

表2ライセンスコンプライアンス問題の例と回避方法
問題の類型

回避方法

ライセンス上の義務の一環としてソースコードのパッケージを出版[05] (publish)したり利用可能としたりし損ねる

詳細なコンプライアンスチェックリストに従い、製品やアプリケーション、ソフトウェアスタックの出荷時には全てのコンプライアンス上のアクションアイテムが完了したことを確認

出荷されたバイナリと異なるバージョンのソースコードを提供

検証作業をコンプライアンスプロセスに追加し、提供するソースコードのバージョンが、出荷される バイナリのバージョンと確かに正確に対応することを確認

出荷製品に組み込まれたオープンソースソフトウェアへの変更をリリース忘れ

部品表 (bill of material, BOM) 差分検出ツールを使いリリース毎のソフトウェアコンポーネント変更を特定
コンプライアンスプロセスにおいて、より新しいバージョンのソフトウェアコンポーネントを再導入
「diffの計算」を変更された(オープンソースとするにふさわしい) ソースコードのチェックリストに加え 、製品に使われたオープンソースのリリース前に行う 








問題の類型

回避方法

変更されたオープンソースのコードにマークを付け忘れる、変更の記述を入れ忘れる

ソースコードへのマーク付けをソースコードのリリース前のチェックリストに加え、ダウンロードしたオリジナルのコピーとの差分すべてに確実にマーク

ソースコードのリリース前に検査 
変更されたソースコードが適切にマークされていることを、コンプライアンスプロセス上のマイルストーンとする

ソースコードの変更履歴をアップデートすることを、開発プロセスの一部とするようスタッフを教育





コンプライアンスプロセス上の失敗

コンプライアンスプロセス上の失敗は、オープンソースのライセンス条件の侵害、例えばライセンス上の義務を満たさない、に繋がる。表３にソフトウェア開発で起きる最も一般的なコンプライアンスプロセス上の失敗のリスト 、および回避方法を示します。 




表3コンプライアンスプロセス上の失敗の例
失敗

回避方法

開発者が企業内のオープンソース委員会 (時にオープンソース評価委員会と呼ばれる) オープンソースソフトウェアの利用申請をしない、期限までに行わない

コンプライアンスポリシーとプロセスについての教育

Conduct periodic full scans of software platform to detect any OS not corresponding to a given approval form. 定期的にソフトウェアプラットフォーム の全スキャンを行い、承認された型に該当しないオープンソースを検出。もしビルドされたシステムに該当するコンプライアンスチケットがないオープンソースコンポーネントが検出されたら、自動で新チケットを発行（企業がBugzillaのようなツールに埋め込まれているワークフローを使ってソフトウェアコンポーネントを追跡していると仮定）

業績評価にコンプライアンスを含める。例えばコンプライアンスポリシーに従わなかったらボーナス査定に直結
開発者がオープンソースの利用申請を早期に、オープンソースのコード の利用を決める前でも行うよう命令

オープンソースの訓練を受けない

オープンソースの訓練は従業員のキャリア開発計画の一部であり、業績評価プロセスの一部としてモニタされていることを念押し

ソースコードの監査を行わない

コンプライアンスのスタッフを適切に訓練

ソースコードを定期的にスキャン
繰り返される開発プロセスのマイルストーンに監査を確かに入れ込む
適切なレベルのスタッフを揃え、監査がスケジュール遅れとならないようにする

Failure to resolve the audit findings

監査レポートが完結しない限りコンプライアンスチケットをクローズ させない。チケットのクローズは、関連するサブのタスクが存在しない時のみとする









得た教訓
この数年で明るみに出たコンプライアンス違反が数件ありました。そうしたコンプライアンス違反の法的な決着を通じて、オープンソースのプロフェッショナル達は次のような教訓を学びつつあります。

製品出荷やサービス立ち上げに先立ちコンプライアンスを確実に行う

コンプライアンス違反事件の最も重要な教訓は、関係した企業は最終的には問題のライセンス条項に従わなければならなかった、のであり、この事実を踏まえた問題解決のコストは基本的なコンプライアンスのコストを圧倒的に上回っていた、のです。従って、製品出荷やサービス立ち上げに先立ってコンプライアンスを確実に行うのが賢いやり方です。
It is important to acknowledge that compliance is not just a legal-department exercise. 全部門が関わって適切なコンプライアンス、正しいオープンソースの利用、必要に応じた再配布、を確実に行う必要があります。この関わりには首尾一貫したコンプライアンスポリシーや手続きの確立と維持管理、利用中（プロプラエタリ、サードパーティ、オープンソース）の全ソフトウェアコンポーネントのライセンスが共存し得ることを製品出荷やサービス立ち上げ前に確認すること、が含まれます。そのためには企業はオープンソースを管理するインフラを末端まで構築し下記を行う必要があります。

. Identify all open source used in products, presented in services, and/or used internally
. Perform architectural reviews to verify if and how open source license obligations are extending to proprietary and third-party software components
. 適用可能なオープンソースライセンスを収集し、法務部門が評価






. Develop open source use and distribution policies and procedures
. アーキテクチャ設計と製造の実務においてリスクを低減


コンプライアンス違反は高くつく

コンプライアンス違反が公となった事件の多くはGPLのソースコードが関わっています。これらの紛争解決の合意では下記の一つないし一つ以上 の条項が含まれています。

. コンプライアンスを満たすよう必要なアクションを取る
. コンプライアンスオフィサーを置きコンプライアンスをモニタし確認させます
. 製品を受け取った過去の顧客に、製品はオープンソースソフトウェアを含んでいること、そのソフトウェアについての権利、を通知
. ライセンス告知を企業のウェブサイトに掲載
. 製品説明に告知を追加
. ソースコードをすべての改変と共に利用可能 に（GPL/LGPLファミリのライセンスに限る）
. 問題となっているオープンソースソフトウェアのバイナリの配布を、関連のソースコードが開示されるまで、あるいはコンプライアンス違反で影響を受けた特定顧客が利用可能となるまで差し止め. いくつかの事件では、原告に対し非開示の額の金銭的対価






更に、コンプライアンス異議申し立てを受け、それが成功すると下記のコストを負うことになりました。

. Discovery and diligence costs in response to the compliance inquiry, where the company had to investigate the alleged inquiry and perform due diligence on the source code in question
. Outside and in-house legal costs
. ブランドや評判、信頼性へのダメージ


ほぼすべての事件において、オープンソースライセンス上の義務違反は面目の失墜、否定的な記事、オープンソースコミュニティとの関係悪化を招いています。
関係は大事

オープンソースソフトウェアを自社製品で利用する企業は、利用しているコードを開発し維持七得るオープンソースコミュニティと良い関係を持ち、維持することが望ましいです。オープンソースプロジェクトのコミュニティは企業が自社製品に含まれるオープンソースソフトウェアのライセンスを尊重すると期待しています。その方向に動き、オープンかつ正直な関係を気づくことは大いに価値があります。
訓練は重要
訓練はコンプライアンスプログラムにおいて必須の構成要素であり、オープンソースソフトウェアの利用を律するポリシーを従業員がよく理解する礎となります。ソフトウェアに関わる全職員が企業のポリシーとプロセスを理解する必要があります。企業はそうした教育を公式・非公式の教育で提供することが多いです。





第2章

オープンソース管理プログラムの確立

オープンソース管理プログラムはオープンソースソフトウェアの全ての側面、その選択、承認、利用、配布、監査、インベントリ、訓練、コミュニティとの関わり、広報等々の体系を定めます。本賞はオープンソース管理プログラムの様々な構成要素を概観し、新しいコンプライアンスプログラム策定における難しさを概説し、そうした難しさを克服する方法を述べます。
オープンソースコンプライアンスプログラム

最初に、成功するオープンソースコンプライアンスプログラムでコアとなる構成要素を概観します。本章と図4にこれら構成要素の概観を示すします。 


図4オープンソース 管理プログラムの必須構成要素








コンプライアンス戦略

オープンソースコンプライアンス戦略は、ポリシーやプロセスの実装 の主たる側面について、ビジネスに立脚してコンセンサスを推し進めるものです。こうしたハイレベルなコンセンサスに基づかずにポリシーやプロセス の実装の細部について社内合意しようとすると、不可能とは言わないまでも非常な困難に直面します。コンプライアンス戦略はコンプライアンスを確保するために行うべきことを定め、職員のオープンソースソフトウェアの扱いを統べる原則を与えます。オープンソースの承認、取得 (acquisition) , 利用、オープンソースライセンスを含むかオープンソースラインセンスに基づいてライセンスされたソフトウェアをリリースする方法、の正式なプロセスも本戦略に含まれます。
照会応答戦略

照会応答戦略は、コンプライアンスが問われた時に行うべきことを定めます。企業は時として悪評（場合によっては正式な申し立て）を、コンプライアンスについての追加情報提供の要請を無視したり、コンプライアンスの照会を扱う方法を知らなかったり、オープンソースコンプライアンスプログラムが欠落していたり不十分だったり、単に照会者と協力しなかったために、受けてきました。こうしたアプローチは関係者のだれにとっても実りや利益を生みません。従って企業は照会を受けとり、受領したことを応答し、照会者に検討することを伝え、現実的なフォローアップの日程を通知する方法を定めるべきです。後ろの章で、オープンソースコンプライアンスに対する照会を扱うシンプルなプロセスについて述べます。
ポリシーとプロセス

オープンソースコンプライアンスポリシーとは、オープンソースソフトウェアの管理（利用と寄付の双方）を取り仕切るルール群です。プロセスとは、日々の業務にこれらルール群を実装するかを詳細に列挙したものです。コンプライアンスポリシーとプロセスがオープンソースソフトウェアの様々な側面、利用、寄付、監査、配布を取り仕切ります。図５（次ページ）はコンプライアンスプロセスの例を図示したもので、個々のソフトウェアコンポーネントがデューデリジェンスの一環として通るべき様々なステップを示しています。このプロセスの詳細は後ろの章で述べます。

 
図5コンプライアンスデューデリジェンスプロセスの例

コンプライアンスチーム

オープンソースコンプライアンスチームとは、オープンソースコンプライアンスを確実に行うため様々な分野の人々を集めたチームです。コアとなるのはオープンソース評価委員会 (Open Source Review Board, OSRB) と呼ばれることが多い委員会で、エンジニアリング、製品のチームの代表者たち、一人以上の法務顧問、そしてコンプライアンスオフィサーから構成されます。拡大チームは様々な部門からコンプライアンス活動のため随時加わる人々で、文書作成、サプライチェーン、全社開発、IT、ローカル化、オープンソース幹部会議 (Open Source Executive Committee, OSEC)らが含まれます。ただし拡大チームのメンバはコアチームと違い、OSRBから仕事を委任された時だけ活動します。コンプライアンスに常時携わるわけではないです。第３章ではオープンソースコンプライアンスを達成するための個々の人間の役割と責任について詳述します。

図６（次ページ）はコンプライアンス達成のためのこれら二つ、コアチームと拡大チーム、を図示しています。







図6オープンソースコンプライアンスを確かなものとする個人とチーム

ツール

オープンソースコンプライアンスチームはツールを使うことでソースコードの監査、オープンソースコードとそのライセンスの発見、が自動化され楽になります。こうしたツールには

. コンプライアンスプロジェクト管理ツール、コンプライアンスプロジェクトを管理し、タスクやリソースを追跡
. ソフトウェアインベントリツール、個々のソフトウェアコンポーネント、バージョン、それを使用している製品、関連情報を継続的に追跡






. ソースコードとライセンスの識別ツール、ビルドするシステムに含まれるソースコードの由来とライセンスを特定. リンク解析ツール、問題となるC/C++ソフトウェアコンポーネントと、製品に含まれる他のソフトウェアコンポーネントとの関係を特定。本ツールを使うことで、企業のポリシーを満たさないソースコードパッケージとのリンクを発見できます。この目標は、プロプラエタリやサードパーティのソフトウェアコンポーネントにオープンソース上の義務が何ら及んでいないことの確定です。もしリンクが発見されたら、製造部門に対しバグチケットを発行し、問題と解決方法を記述します。. ソースコードのピアレビュー（査読）ツール、ライセンス上の義務を満たすための開示に先立ちオリジナルソースコードに対する変更をレビュー。
. 部品表 (bill of material, BOM) 差分ツール、二つの異なるビルドでの部品表の違いを特定。本ツールはコンプライアンス準拠作業を積み上げで行う場合に非常に有用です。 

ウェブ上のプレゼンス

企業はポータルを２方向で使います。：一つは内向きに、企業内へ。もう一つは外向きに、社会とオープンソースコミュニティへの窓として。内部向けのポータルはコンプライアンスポリシー、ガイドライン、各種文書、訓練、通知、メーリングリストへのアクセスを提供します。外部向けのポータルは社会とオープンソースコミュニティに向けて公開のプラットフォームとなり、またオープンソースのパッケージのソースコードや受領通知ほかの情報開示を投稿する場としてライセンス上の義務を履行します。 




教育

教育はコンプライアンスプログラムにおいて必須の構成要素で、オープンソースソフトウェアの利用を取り仕切るポリシーを従業員がよく理解する基礎となります。オープンソースとコンプライアンスの教育の目標は、公式非公式を問わず、オープンソースのポリシーや戦略、オープンソースのライセンスや、製品やソフトウェアポートフォリオにオープンソースソフトウェアに組み入れることのビジネス的、法的リスクについて共通理解を作り上げ、注意喚起することです。またトレーニング は、企業内でコンプライアンスポリシーを広め推進し実施し、コンプライアンスの文化を育てる場となります。

公式トレーニング

企業の規模やオープンソースの営利活動への浸透度合いに応じて、企業はオープンソースに携わる従業員に公式の講師によるトレーニングコースを命じることができます。実例でのトレーニングがその頂点となりえます。
非公式トレーニング

非公式のトレーニングは下記のいずれか、あるいは全部を含む。

. ブラウンバッグセミナー（茶色鞄のセミナー）：ブラウンバッグセミナーとは一般に、昼食時に従業員や招待者が行うプレゼンテーションです。こうしたセミナーの目標は、商用の製品や企業のソフトウェアポートフォリオの中にオープンソースを組み込むことの様々な側面について講演し、議論を起こすことです。これらのセッションは、企業のコンプライアンス プログラム、ポリシー、そしてプロセスに関する議論も含みます。. 新人研修：時にはコンプライアンスオフィサーが企業のコンプライアンスの努力、規則、ポリシー、プロセスを新人に対して研修の一部として講演し、必要となるオープンソースの管理上の情報（聞くべき人、訪れるべき内部のウェブサイト、オープンソースとコンプライアンスのトレーニングへの参加方法等々）を提供します。






自動化
オープンソースソフトウェアを使いたい、寄付したい開発者はオンラインで申請し、適切な承認を得る必要です。これは自動化されたオンラインシステム、通常はオープンソースコンプライアンスの管理を特に組み込んだワークフローに従うバグ追跡システムで行うのがベストです。

メッセージの発信

メッセージの発信は内部向け、外部向けともコンプライアンスプログラムの必須の構成要素です。ここで最も重要なのは明確で首尾一貫していることで、内部的に従業員に対してオープンソース関連の会社の目標や懸念事項を伝える場合も、外部に向け自社製品やソフトウェアスタックが利用しているオープンソースプロジェクトの開発者コミュニティに伝える場合も同様です。
コンプライアンスの難しさと解決策

企業でのコンプライアンスプログラムの確立では、ほぼ確実に困難に直面します。以下の説では最もありふれた困難を取り上げ、克服する方法を示唆します。

コンプライアンスプログラムの作成
最初の難しさは、コンプライアンスプログラムやそれを支える（既存の）内部手続きのためのインフラと、製品出荷やサービス開始の〆切とのバランスを取ることです。こうした難しさを和らげ解決し、開発活動にとって重荷とは見做されない能率的なプログラム確立を助ける様々な手段があります。





解決策

役員のサポート

役員レベルでのオープンソース管理プログラムへのコミットは、その成功と継続のために重要です。
ポリシーとプロセスの負荷の軽さ

プロセスとポリシー は重要である。だが開発プロセスにとって重荷に過ぎると開発チームが見做さないよう軽く効果的でなければなりません。
能率的なオープンソース管理は二つの基盤の上に成り立つ。：簡単で明確なコンプライアンスポリシーと、軽いコンプライアンスプロセスです。

基本ルールを強制

コンプライアンスプログラムを実施する一環として、誰でも従わねばならない幾つかのシンプルな規則を定める必要があります。

. 開発者がオープンソースソフトウェアを製品やソフトウェアスタックに組み入れを計画するときは申請します。
. サードパーティのソフトウェアサプライヤに、提供物に含まれるオープンソースソフトウェアの情報を開示させます。あなたのサプライヤがオープンソースコンプライアンスを見事に実践しているとは限りません。オープンソースの開示に関わる文言を入れるよう、契約を見直すべきです。. アーキテクチャのレビューとコードの検査を指示し、オープンソース評価委員会 (OSRB) がソフトウェアコンポーネント間の関係を理解し、オープンソースからプロプラエタリなソフトウェアへとライセンス上の義務が派生していることを見つけられるようにします。大規模に行うには適切なツールが必要となります。 





. サードパーティのソフトウェアプロバイダから受領するすべてのソフトウェアをスキャンし、オープンソースに関する開示が正しく、完全であることを確認します。 

コンプライアンスを開発プロセスに統合

コンプライアンス確立の最善の方法は、コンプライアンスプロセスやポリシー、チェックポイント、活動を既存のソフトウェア開発プロセスに組み込むことです。
長期的な目標と短期的な実行
図4はコンプライアンスプログラムの成功に必須の構成要素を示しています。プログラムのすべてを実装するのに必要な作業の多さに圧倒される関係者もいるかもしれません。実際にはそこまで難しいものではありません。すべての要素を同時に実装しなければならない訳ではないからです。すべての組織において優先されるのは、製品やサービスを期限通りに出荷し、と同時に内部的なオープンソースコンプライアンスのインフラストラクチャー を構築し拡大することです。従って、企業なりのコンプライアンスのインフラストラクチャーを状況の進展に合わせて構築すべきと考えればよく、その際には将来の活動や製品をふまえ拡張性を考えるべきです。カギとなるのは思慮深く現実的な計画です。

解決策

. Plan a complete compliance infrastructure to meet your long-term goals, and then implement the pieces stepwise, as needed for short-term execution. たとえば、もしオープンソースを含む製品開発やサービス提供を始めたばかりであり、すでに動いているコンプライアンスのインフラストラクチャーが何もないならば、最も差し迫った懸念はコンプライアンスチームを作ることであり、プロセスとポリシー、ツールと自動化を確立することであり、従業員を訓練することです。これらの活動を（この順番で）開始し、システム構築を（コンプライアンスの観点から）適切に制御しつつ開始したならば、プログラムの他の要素に進むことができます。
. ポリシーとプロセスを確立
. 開発プロセスの一部としてコンプライアンスを組み込み 





コンプライアンスについての対話

コンプライアンス活動の成功を確かなものとするには、対話は必須です。2種類の対話、あなたの組織内での内部的なもの、あなたの製品で使われているオープンソースのプロジェクトの開発者コミュニティとの外部に向けたもの、を考えることが重要です。
内部的な対話

企業はコンプライアンスについての対話が内部的に必要となります。オープンソースを商業ソフトウェアのポートフォリオへの組み入れが何をもたらすのか従業員が理解していることを確実にするためであり、企業のコンプライアンスポリシー、プロセス、ガイドラインについて教育を受けていることを確かなものとするためです。内部的な対話は下記のいずれでも可能です。

. Email communication providing executive support and of open source compliance activities
. オープンソースソフトウェア関連業務に携わる全従業員に対する正式な訓練命令オープンソースとコンプライアンスについてのブラウンバッグセミナーによりコンプライアンスについて更に注意喚起し、活発な議論を奨励内部的なポータルを作り、企業のコンプライアンスポリシーやプロセス、オープンソースに関係した出版物やプレゼンテーション、メーリングリスト、オープンソースとコンプライアンスに関係する討論フォーラムをホスト企業全体に向けたオープンソースのニュースレター。一般に隔月か四半期ごとに、オープンソースのコンプライアンスについて注意喚起 

外部との対話

企業は外部とのコンプライアンスについての対話が必要となります。自社が製品で使うオープンソースソフトウェアについてライセンス上の義務を果たす努力をしていることを、オープンソースのコミュニティに確かに認識させるためです。 




外部との対話は下記のいずれでも可能です。

. Website dedicated to distributing open source software for the purpose of compliance
. オープンソースの組織への参加 やサポート。こうした活動は企業がオープンソースの組織との関係を確立し、そうした組織の役割を理解し、有意義な貢献をするのを助けます。オープンソースのイベントや会議への参加。参加には様々なレベルがある。イベントのスポンサーから講演や出版物への寄与、あるいは単に開発者を参加させオープンソースの開発者たちと知り合いオープンソースコミュニティのメンバと新たな関係を育成します。


クリーンなソフトウェア起点 の確立

コンプライアンスプログラムの開始当初の困難の一つは、使われているオープンソースソフトウェアとそのライセンスを正確に把握することです。この初期の監査プロセスは、製品やソフトウェアポートフォリオのクリーンなソフトウェア起点の確立、と呼ばれることが多いです。これは数か月かかることもある重い活動で、開発と並行してどの程度早期に作業を開始するかに掛かっています。
解決策

組織は初期のコンプライアンスを以下の活動を通じて達成します。

. オープンソースの利用申請の早めの提出と評価
. 自動化されたソースコードのスキャン を継続的に、事前設定した時間間隔で全ソースコードに対して 実行
. ソースコードのベースを継続的にスキャン。これにはサードパーティのソフトウェアプロバイダから受領したものを含めます。該当するコンプライアンスチケットなしにコードベースにチェックインしたソースコードを捕まえるためです。こうしたソースコードのスキャンはたとえば毎月行います。. 設計とアーキテクチャの評価をソースコードの検査に加えて強制します。これはオープンソース、プロプラエタリ、そしてサードパーティのソフトウェアコンポーネントのコードの関係を解析するためです。これを強制するのは、そうした関係がライセンス上のコンプライアンスの義務に関わるときのみでよいです。 

もし企業がコンプライアンスの起点構築に失敗すると、その製品の将来の改訂版（またはおなじ起点を使った異なる製品）がコンプライアンス問題で苦しむことはほぼ確定となります。
そうしたシナリオを防ぐため、企業は下記を考慮すべきです。

. シンプルだが確実に行われるポリシーと軽量なプロセスを提供
. コンプライアンス上のチェックポイントをソフトウェアの開発プロセスに含め、コンセプトが出荷される製品やソフトウェアスタックとなる時に行います。理想的にはすべての開発上のマイルストーンにおいて対応するコンプライアンス上のマイルストーンを組み込み、ビルドに使われる全ソフトウェアコンポーネントが対応する、承認されたコンプライアンスチケットを確実に持つようにします。
. 専任のコンプライアンスチームを確保します。この点は後ろの章で文章を割きます。
. コンプライアンスチケットを効率的に処理するためツールや自動化を利用します。この点は後ろの章で論じます。


コンプライアンスの維持

オープンソースのコンプライアンスを維持するには、コンプライアンスの起点確立と同様、いくつかの困難があります。実際には踏むべきステップの多くは同じで、ただし規模は小さく、積み増しとなります。コンプライアンスの維持は継続的な努力であり、規律、そして既存の製造およびビジネスのプロセスへのコンプライアンス活動組み込みのコミットメントによります。
図7に積み上げのコンプライアンスの概念を示します。ここでは初期のコンプライアンスの起点と現在のバージョンとの間で起きたソースコードの変更が何であれ、コンプライアンスを確実に満たすことが必要となります。



図7積み上げのコンプライアンスの例

解決策

企業は以下の活動を通じてコンプライアンスを維持することができます。

. 企業のコンプライアンスポリシーとプロセス、加えてあらゆるガイドラインの厳守Continuous audits of all source code integrated in the code base, regardless of its origins
. コンプライアンスや自動化に使われるツールを継続的に改善し、コンプライアンスプログラムにおいて可能な限り多くのプロセスを高い効率で実行


内面化と末永い実行 

オープンソースのコンプライアンス活動を維持するのは組織 が成長し、オープンソースを使った更なる製品やサービス出荷に伴う進行中の挑戦です。企業は開発のカルチャーの中へとコンプライアンスを内面化し、末永く実行するためにいくつかの段階を踏むとよいです。 




解決策

後援者

役員レベルのコミットメントがコンプライアンス活動を持続させる上で必須です。進行中のコンプライアンスのリーダーとなり、オープンソースの管理機能を企業としてサポートする役員がいなければなりません。
一貫性

企業全体で一貫性を保つことは複数のビジネスユニットや子会社を持つ大企業では重要です。部門間での一貫したアプローチは、記録の保持、グループ間でのコードの共有促進と並び有用です。

計測と分析

コンプライアンス活動やプロセス、手続きのインパクトや効率性を計測し分析すべきです。パフォーマンスを調べ、コンプライアンスプログラムを改善するためです。計測の尺度は、コンプライアンスプログラムを推進する場合にプログラムの個々の構成要素から得られる生産性向上について対話をする助けとなります。
コンプライアンスプロセスの改善

組織がオープンソースを利用する範囲や目的 は変化します。製品や技術、企業の吸収や合併、海外への委託、その他多くの要因によって動きます。従って、今ぷらインすポリシーとプロセスを絶えず評価し、改善する必要があります。
更に、オープンソースラインセンスの解釈や法的リスクも進化します。こうしたダイナミックな環境の中で、コンプライアンスプログラムも進化する必要があります。 




守らせること 

コンプライアンスプログラムは、守られなければ無意味です。効果を持たせるため、コンプライアンスプログラムにはプログラム厳守を監視し、ポリシーやプロセスやガイドラインを全社的に守らせる メカニズムを含めるべきです。コンプライアンスプログラムを守らせる方法の一つは、ソフトウェア開発プロセスと統合し、従業員の業績査定の幾分かをコンプライアンスプログラム活動へのコミットメントと実行とすることです。

スタッフ割り当て
スタッフがコンプライアンスの職務のために割り当てられ、十分なコンプライアンスの訓練が組織の全従業員に確実に施されていなければなりません。大きな組織ではコンプライアンスオフィサー、および関連する職務はフルタイムの仕事となり得ます。小さい組織では分担したり、時間の一部を割くべき活動となる可能性が高いです。





第3章

コンプライアンス達成に向けて：役割と責任

一人の個人では、どれほどの達人であろうとも、オープンソースコンプライアンスを組織全体に実装することはできません。図8はオープンソースコンプライアンスの達成に責任がある様々な部門を書き下したものです。コンプライアンス達成には二つのチームが必要となる。コアチームと拡大チームです。後者は通常、前者を包括するものとなります。



図8オープンソースコンプライアンスを確かなものとする個人とチーム





コアチームはオープンソース評価委員会 (Open Source Review Board, OSRB) と呼ばれることも多いです。エンジニアリングと製品のチームの代表者たち、一人以上の法務顧問、そしてコンプライアンスオフィサーから構成されます。表４に個々の参加者のコアチームにおける役割と責任を示します。

拡大チームは表5 (49ページ) に示す通り、様々な部門からコンプライアンス活動のため随時加わる人々で、文書作成、サプライチェーン、全社開発 、IT、ローカル化、オープンソース幹部会議 (Open Source Executive Committee, OSEC)らが含まれます。However, unlike the core team (in substantial organizations), members of the extended team are working on compliance only on a part-time basis, based on tasks they receive from the OSRB.

表4コンプライアンスコアチーム (OSRB) の主な役割と責任

参加者
主な役割と責任

法務の代表者

代表者はその時の作業に応じ、法律顧問から弁護士補助職員まで変化します

OSRBとOSECへ参加

オープンソースソフトウェアの利用、改変、配布をレビューし承認

ライセンスについてのガイドラインの提供

トレーニングの提供と承認
オープンソースコンプライアンスプログラム改善への貢献

オープンソースのポータルの内容をレビューし承認
ライセンス上満たすべき義務一覧のレビューと承認
オープンソースに関する告知の承認









参加者
主な役割と責任

エンジニアリングおよび製品チームの代表

企業によってはエンジニアリングと製品のチームは分かれていない

OSRBとOSECへ参加

コンプライアンスポリシーとプロセスの遵守
コンプライアンスの実践を開発プロセスの中に統合

コンプライアンスプログラムの改善に貢献

技術的なコンプライアンスプログラムの遵守

あらゆる質問への迅速な回答

設計、アーキテクチャ、コードのレビューの実施
配布のためのソフトウェアパッケージ準備

コンプライアンスオフィサー

オープンソースコンプライアンスオフィサーは必ずしも専任である必要はないです。大抵の場合、オープンソース部門の部長や所長が役割を果たします

全てのコンプライアンス活動を推進
ソースコードのスキャンと監査を調整
ソースコードパッケージの配布を調整

OSRBとOSECへ参加

コンプライアンスとオープンソースのトレーニングに寄与
コンプライアンスプログラムの改善に寄与

OSECにコンプライアンス活動について報告

自動化や、開発環境の中にオープンソースのコードを見つける新たなツール作成に寄与 








表5コンプライアンス拡大チームの役割と責任

参加者
主な役割と責任

オープンソースの戦略を決定するオープンソース幹部会議 (Open Source Executive Committee, OSEC) 

知財のリリース提案 をレビューし承認
プロプラエタリなコードをオープンソースライセンス下でリリースする提案をレビューし承認これはそのソースコードはオープンソースにする前提で開発されたならば不要です。

文書作成
オープンソースライセンスの情報と告知を製品の文書の中に含めます

ローカル化
製品やソフトウェアスタックに関わるオープンソースについて、基本的情報をターゲットとなる言語に翻訳

サプライチェーン
サードパーティプロバイダからライセンスされた、または購入したソフトウェアコンポーネントに含まれるオープンソースの情報の開示をサードパーティプロバイダに指示

オープンソースソフトウェアが含まれている、またはバンドルされているサードパーティのソフトウェアの納入を手助け

IT (情報技術)
コンプライアンスプログラムで利用されるツールと自動化のインフラをサポートし整備

OSRBの要請に応じ、新しいツールを作成、入手









参加者
主な役割と責任

企業買収
会社の合併や吸収買収に先立ちオープンソースコンプライアンスが完了するよう要請
外部委託した開発会ハウセンター、またはサードパーティのソフトウェアベンダーからソースコードを受領するに先立ちオープンソースコンプライアンスが完了するよう要請 





オープンソース評価委員会 (Open Source Review Board, OSRB)

OSRBは下記に責任を持ちます。
. サードパーティのソフトウェアとオープンソースのソフトウェアライセンスとが相互にコンプライアンスを確かに満たすようにします. オープンソースソフトウェアの効果的な利用、およびオープンソースソフトウェアへの寄与を促進
. プロプラエタリな知財（引いては製品の差異化）を、オープンソースのライセンスがプロプラエタリな、またはサードパーティのソフトウェアに確かに及ばないようにすることで防御


日々の活動としては、OSRBのメンバーは下記に従事します。

. エンドツーエンド（端から端まで）のコンプライアンスプロセスの確立します。OSRBはエンドツーエンドのコンプライアンスプロセス、すなわち利用、監査、開発、関与、保障、コンプライアンス管理に責任を持ちます。エンドツーエンドのコンプライアンスプログラムについては4章で概観します。
. コンプライアンスプログラムで使われるコンプライアンスポリシー、プロセス、ガイドライン、テンプレート、フォームを作成し保守 





. オープンソースの利用、改変、配布の申請をレビューする。OSRBはエンジニアリングや製品部門からのオープンソース利用申請 をレビューし承認します。利用のプロセスは6章で論じます。. Perform software audits: The OSRB performs audits on all software included in a product, which involves the following tasks:
. Run a source code scanning tool over the software base
. Analyze the results provided by the scanning tool
. スキャンのツールで発見されたコード合致 、潜在的な合致、ライセンスの衝突を識別 . Oversee the closure of all issues identified by scanning tools
. 最終監査報告書を作成し、特定されたすべての問題が解決されたことを確実にする


監査はOSRBか独立した監査チームかが組織の規模に応じて責任を持ち、コンプライアンスオフィサーに報告します。6章で監査のプロセスについて論じます。

. アーキテクチャのレビュー実行。承認過程の一つとして、OSRBはエンジニアリング部門の代表と共にアーキテクチャをレビューし、オープンソースのソースコード、プロプラエタリのコード 、サードパーティのソースコードの関係を解析します。本レビューの目的は、アーキテクチャのガイドラインが尊重され、オープンソース、プロプラエタリ、サードパーティのソフトウェアの関係が、現場が受け入れ可能な法的ガイドラインの範囲内に収まっていることを確認することです。. リンク解析をレビュー。OSRBはAPI呼び出し等によるリンク関係により、何らかのオープンソースのライセンス上の義務がプロプラエタリやサードパーティのソフトウェアに広がっていないかの確認のためリンク解析を行います。






. オープンソースを含む製品のリリースやサービスの開始を取りやめる決定を検証. 社内のスタッフやエンジニアから寄せられるオープンソースに関する質問に対しガイダンスを提供
. 配布前の検証作業の一環としてコードの検査を実施。オープンソースライセンスのテキストや著作権表示が完全な形となっており、ソースコードに対して施された変更を反映するようエンジニアたちが変更ログ をアップデートしていることを確認
. 問題となっているオープンソースソフトウェアで満たすべきライセンス上の義務の一覧を作り、満たすよう関係部門に展開：OSRBがオープンソースを製品に利用することを承認したら、承認プロセスの一部としてOSDBは義務一覧を作り、関係する様々な個人やチームに展開して確実に満たすようにします。配布前のプロセスの一部としてOSDBは製品やサービスのリリース前に最終チェックを行いますが、義務を満たしていることの検証もここに含みます。
. オープンソースとコンプライアンスの訓練を開発し提供。OSRBはオープンソースとコンプライアンスの訓練の開発を主導し、従業員が企業のオープンソースのポリシーやコンプライアンスのプロセスについて良く理解するようにします。更に、OSRBは最も広く利用されるいくつかのオープンソースのライセンス、商用でのオープンソース利用に関わる話題についても教育すべきです。この訓練はオープンソースを使ったソフトウェアの開発や管理に関わる従業員全員が受けなければなりません。. 企業のオープンソースのウェブサイトをホストし維持。：従業員向けの内部のウェブサイトはオープンソースのプロセスやポリシー 、ガイドライン、訓練、告知が主となります。外部向けのサイトは通常、ソースコードのパッケージを利用可能とし、特定のコンプライアンス上の義務を満たすことが第一の目的となります。






. コンプライアンスの質問を取扱う。OSRBは企業に送付されたオープンソースのコンプライアンスに関わるあらゆる質問に答える責任があります。第9章でコンプライアンスの質問を扱うプロセスを述べます。. コンプライアンスの記録を取る：いかなるオープンソースソフトウェアコンポーネントについてもコンプライアンスに関するすべての記録が最新のものとなっていることにOSDBは責任を持ちます。
. エンドユーザー向け文書をレビューし、製品やソフトウェアスタックに含まれるオープンソースについて、消費者へのコピーライト、帰属、ライセンスの告知が適切であることを確認します。またGPL/LGPLファミリのライセンスの場合には、可能であれば ソースコードを得る方法を書面にします。
. コンプライアンスの作業をより自動化し効率的にする、コンプライアンスの基盤の一部として利用されるべき新しいツールを推薦。
. 製品出荷をオープンソースコンプライアンスの観点から承認。. コミュニティに関与するポリシー、プロセス、手続き、ガイドラインを策定。これはコンプライアンスではないが、責任ある事柄のリストの完全性という観点で挙げておく。 

法務

法律顧問はオープンソースライセンスへのコンプライアンスを確かなものとする委員会 、OSDBのコアメンバーです。法律顧問は４つの必須の義務があります。

1. 製品やサービスでのオープンソースの利用を承認
オープンソースを商用製品に用いる時には法律顧問の承認が必要です。典型的には、法律顧問はコンプライアンスチケットを評価します。これはオンライントラッキングシステム (例えばJIRAやBugzilla) 、ソースコードをスキャンするツールの結果報告、 




ソースコードのパッケージに添付のライセンス情報を使います。次にリスク要因を、エンジニアとオープンソースコンプライアンスオフィサーからの情報に基づいて評価します。この作業の一環として、法律顧問は対象ソフトウェアコンポーネントについて入ってくる、及び出ていくライセンスについて決定を行います。入ってくるライセンスとは、対象となるコードに含まれるソースコード全てのライセンスのこと です。出ていくライセンスとは、製品やサービスの 受領者が利用できるソースコードやオブジェクトファイルのライセンスのことです。
2. オープンソースのライセンスについて助言
. オープンソースライセンス 上の義務についてガイドラインを提供. 互換性がなかったり、衝突するライセンスに由来するライセンスの衝突について第一に企業のポリシーに基づいて助言を行います。これは時として関連するオープンソースの組織の法律上の意見表明になど外部条件に依ることもあります。
. オープンソースの利用に伴う知財権について助言します。これは特に、企業が元々はプロプラエタリだったソースコードをオープンソースライセンス下で提供するときに問題となります。
. エンジニアリングチームからのオープンソースについての質問や懸念に対し勧告したり、ガイダンスを提供したりします。



3. エンドユーザー向け文書のアップデートをレビューし承認
こうした法務上のサポートは、製品に含まれるすべてのオープンソースについて、適切なオープンソースの告知 (著作権、帰属、ライセンス告知)を確実に消費者に提供するために行います。これに加え、GPL/LGPLファミリのライセンスのいずれかに従ってソースコードがライセンスされるならば、ソースコードを得る方法の情報を書面で提供する必要があります。





4. オープンソースコンプライアンスプログラムの立ち上げと継続に貢献

. オープンソースのポリシーとプロセスを確立し維持. オープンソースのコンプライアンスに関連して企業に送付された質問を取り扱う
. オープンソースのライセンス、企業のポリシー、ガイドラインに関わる訓練を提供


エンジニアリングおよび製品チーム

エンジニアリングと製品のチームはOSRBに一人または複数の代表を出し、エンジニアリングチームに割り当てられたコンプライアンス関連のタスク全てを追跡し、適切、確実に解決します。これと並行し、エンジニアリングと製品のチームはオープンソースのコンプライアンスについていくつかの責任を負います。

. オープンソースソフトウェアについて要望を提出：エンジニアリングと製品のチームは製品の基盤として導入すべき外部のソフトウェアを決定します。これはサードパーティやオープンソースのソフトウェアを含みます。コンプライアンスの観点からのチームの主な責任は、製品やサービスに含まれる予定の全オープンソースについて利用申請書類を出すことです。この書類には問題となるオープンソースの利用方法を記述します。これはソフトウェアの起源と由来について良好な記録を構築し維持する助けとなります。. 技術上のコンプライアンスのガイドラインの順守：エンジニアリングと製品のチームはソースコードに関するOSRBの構想、設計、統合、実装についての技術ガイドラインを遵守すべきです。The OSRB guidelines typically cover:
. Common mistakes and how to avoid them
. リンクにより起き得る問題を回避するため、ライブラリやその他ミドルウェアを統合するときの規則


. Development in kernel space versus user space (on Linux), especially with whole-platform development in embedded environments
. オープンソースコンプライアンスに関わり得るエンジニアリング上の特別な状況 



. 設計のレビュー：エンジニアリングチームは継続的に設計をレビューし、コンプライアンス問題をタイムリーに発見し救済策を講じるべきです。コンプライアンスオフィサーは設計のレビューを主導し、対象となるソフトウェアコンポーネントに応じて異なる参加者をエンジニアリングチームから招きます。
. OSRBとの協力：エンジニアリングチームはOSRBからの質問に迅速に回答し、コンプライアンスチケットを解決するのに協力しなければなりません。
. 変更の追跡：変更ログを変更したオープンソースコンポーネント毎に維持管理： オープンソースのライセンス上の義務を満たすため変更ログが必要となります。問題となるライセンスに依りますが、ある種のライセンス（GPL/LGPLファミリーなど）では変更されたファイルには、変更したこととその日付を目立つように付けることを求めています。
. 配布のためのソースコードパッケージを準備：エンジニアリングチームはライセンスの義務に従って公開のウェブサイトで利用可能とするソースコードパッケージを準備します（これ以外のソースコードの配布方法については後ろの章で論じます）. コンプライアンス上のマイルストーンを開発プロセスの一部に統合：これはOSRBとコンプライアンスオフィサーと協力して行います。. オープンソースの訓練を受ける：すべてのエンジニアは利用できるオープンソースの訓練を受けねばなりません。. オープンソースのプロジェクトをモニタし、バグフィックスやセキュリティパッチが利用可能となったかを判断し、製品で使われているオープンソースコンポーネントのアップデートに責任を持ちます。個々のパッケージの組織内でのオーナーが通常はこの仕事を行います。 

コンプライアンスオフィサー

コンプライアンスオフィサーはOSRB議長やオープンソース部長/役員とも呼ばれます。OSRBの議長でありコンプライアンスプログラムを管理します。
理想としてはコンプライアンスオフィサーは下記を出来る限り備えている必要があります。

. Solid understanding of common open source licenses and obligations to discuss with legal counsel Knowledge of industry practices
. 企業全体のポリシーとプロセスを確立できる知識と経験企業の製品についての技術的知識オープンソースについての歴史的な視点Knowledge of community consensus and practices
. 重要なオープンソースプロジェクトのコミュニティとの人脈The Linux Foundation, Apache Foundation, Mozilla Foundation, Software Freedom Law Center (ソフトウェアの自由のための法律センター) などのオープンソースの団体との人脈 

OSRBに帰属する責任に加え、コンプライアンスオフィサーは以下の義務がある。

. コンプライアンスのエンドツーエンド (端から端まで) のデューデリジェンスプロセスを主導し、コンプライアンスプログラムの管理者として、コンプライアンスに関連する全ての業務が適切に認識され製品出荷を妨げるコンプライアンス上の問題が存在しないようにする






. Coordinate source code scans and drive all auditing issues to closure
. Participate in engineering design reviews, code inspections, and distribution readiness assessments to assure that the engineering and product teams follow all compliance processes and policies and conform to the approved OSRB usage form
. Coordinate source code distribution of open source packages (when stipulated by licenses) with engineering and product teams, including preparing and verifying a distribution checklist for each open source package
. Act as liaison between OSEC and OSRB
. コンプライアンス上の課題をOSECに上げます。Act as liaison between the engineering and product team and the OSRB and OSEC in regard to usage plan approval processes
. コンプライアンス活動についてOSECに報告します。これは製品やサービスの出荷を妨げている課題の注意喚起を含みます。


オープンソース幹部会議 (OSEC)
オープンソース幹部会議 (OSEC) はエンジニアリング、法務、マーケティングの幹部に加えコンプライアンスオフィサーから構成されます。OSECの責任はオープンソース戦略の設定、知財の評価と解放の承認、従来はプロプラエタリだったソースコードを特定のオープンソースライセンス下で発表することの承認です。
文書化
文書化チームは、ソースコードを得る方法についての 書面での告知や、製品に添付するオープンソースの通告すべてについて責任を持ちます。次ページの図9にそうした告知を準備し承認するプロセスを図示しています。このプロセスはコンプライアンスオフィサーが開始します。コンプライアンスオフィサーは製品が出荷されたら利用可能となる告知の書面や通告の草案を準備します。次に法律顧問が草案をレビューし、修正し、最終版を文書化チームに渡します。最後に、最終稿 を製品添付の文書に含めます。 


図9製品添付の文書を更新し製品に含まれるオープンソースの存在を反映する文書化チームの役割

ローカル化

ローカル化チームは製品に含まれるオープンソースソフトウェアの入手についてユーザーに知らせ、英語での適切な通告が利用可能となる ようにします。
サプライチェーン
サプライチェーン (ソフトウェアの調達) 部門 の手続きはオープンソースの取得や利用を書き下したものに更新しなければなりません。サードパーティから供給されたソフトウェアは自分で検査するようにすることが強く望まれます。供給元から自社へのソフトウェアの移管には通常、サプライチェーン関係者が関わります。サプライチェーン部門 はオープンソースのコンプライアンス活動をサードパーティのソフトウェア（そしてハードウェア）のサプライヤに対し、供給した品に含まれる全オープンソースを開示するよう命令することで、またオープンソースのパッケージとバンドルされたり統合されたりしているサードパーティのソフトウェアのライセンスを助けます 。

この分野での最も良い方法は、サードパーティのソフトウェアプロバイダに彼らが提供する品についてのオープンソースすべてを開示するよう命令し、またオープンソース上の義務を満たす計画を表明させることです。もしサードパーティのソフトウェアがオープンソースを含んでいたならば、サプライチェーン部門 はオープンソースライセンス上の義務が確実に満たされるようにしなければなりません。受け入れた後はオープンソースを含む製品やサービスを配送する業者として義務は自社のものとなるからです。自社のコードの受け手に対し、自社の「上流」の供給元を名指しし、ライセンス上の義務を果たす責任は供給元であり自社ではない、ということは受け入れられません。
IT

IT部門はコンプライアンスプログラムで使われるツールのサポートや、自動化の基盤を提供、維持します。これは各種のツールやメーリングリスト、ウェブのポータルの提供が含まれます。In addition, IT may receive requests from the OSRB to develop and/or acquire tools that will be used to improve effectiveness the compliance activities. 

企業買収

企業買収部門はオープンソースのコンプライアンスに主に二つの流れで関わります。買収と吸収合併、および開発の外部委託です
合併と買収

他社との合併や、自社が買収されることを考えるならば、コンプライアンスプログラムはしかるべきレベルの開示を行い、説明が出来るように作られるべきです。合併や買収についての全社ポリシーはオープンソースを考慮するように改める必要があります。企業買収部門は合併や買収に先立ちソースコードをコンプライアンスの観点から評価し、議論を脱線させたり企業価値を変えたりする不測の事態が起きないよう命令しなければなりません。買収側の企業にとって、包括的なコードの評価はソフトウェア資産を正確に評価し、将来の企業価値が予期せぬライセンス問題にさらされるリスクを緩和することに繋がります。これに加え、買収側の企業は買収の合意文書にオープンソースについての開示の条項を入れることも考えられます。デューデリジェンスの実務はオープンソースについての開示、開示されたオープンソースとライセンスの評価のガイドを含むよう改める必要があります。
開発の外部委託

ソフトウェア開発の外部委託の合意文書も、コンプライアンス手続きを反映し、またその他の条項（表示や保証など）がオープンソースによるリスクを広く含むよう改める必要があります。企業買収部門は外部の開発センターから受領したソースコード全てがコンプライアンスプロセスを通り、利用されたオープンソースが全て発見されライセンス上の義務を満たすため適切な行動が確かに取られるよう命令しなければなりません。

その他の企業活動
企業買収部門はスピンオフやジョイントベンチャーのコンプライアンスにも関わります。時にはコンプライアンス上のデューデリジェンスの結果、コンプライアンスの状況が理想からかけ離れており、ためにその活動を止める決定をする場合もあります。 




第4章

オープン ソース コンプライアンス プロセス

オープン ソース コンプライアンス プロセスの実現は、コンプライアンスを組み込む必要がある開発プロセス、コードのサイズと数、関連する製品とサービスの数、外部から導入されたコード量、組織のサイズや体制など、多くの要因に基づいて、組織ごとに変化します。しかし、コンプライアンスの中心的要素は、通常同じです：コード中のオープン ソースを特定し、レビューし、利用を許可し、義務を順守することです。この章では、コンプライアンス プロセスの中心的要素に焦点を当てます。コンプライアンス精査の結果は、外部出荷を意図した製品において使われる全てのフリー オープン ソース ソフトウェアの特定と、それに付随するライセンス義務を遵守するための計画です。図10は、一貫したコンプライアンス プロセスの高水準の概要図の一例を提示しており、外部出荷される製品やサービスへの統合許可を受ける前にフリー オープン ソース ソフトウェアを含むコンポーネントが通過する様々なコンプライアンス ステップやフェーズを図示しています。

 
図10一貫したコンプライアンス プロセスの簡略図

図10に示されているのは一例であり、同じ目的を達成するためにコンプライアンス プロセスを作る方法は多くあります。この章を通じて、これらの様々なフェーズ、各フェーズのインプットとアウトプット、そしてコンプライアンス プロセスによってソフトウエア利用をどのように管理するかを確認していきます。 




効果的なコンプライアンス
精査（due diligence）という用語は、ソース コード検査、ソース コード監視、品質義務やシステム監査の実行などを含む多くの概念を指しています。オープン ソース コンプライアンスのこのケースでは、精査は、以下の項目の確認を要求されるものとします；

. 製品で利用されるオープン ソース ソフトウェアは、特定され、レビューされ、承認されている。製品実装は、承認されたオープン ソース コンポーネントとライセンスのみを含む。
. ライセンスされたものの利用に関する全ての義務は、特定されている。適切な通知は、帰属表記や著作権表記を含む文書で提示されている。変更（適用可能な場合）を含むソース コードは準備されて、製品出荷の時点で入手可能になっている。プロセス中の全段階の検証


簡潔で、組織内で十分に理解されている一貫したコンプライアンス プロセスを持つことには大きな利点があります。そのようなプロセスは：

. 組織に義務を履行させつつ、一方で組織がオープン ソースから恩恵を得られるようにします。Move open source use from ad hoc to a standardized process
. オープン ソース コンポーネント入手の管理を助けます。Help employees understand how to work with open source in a responsible way
. 組織で利用している様々なオープン ソース プロジェクトの開発者との関係を改善します。 





. ソース コード変更の共有を行うことで、統合コードのプロジェクト コミュニティとの間で、情報やアイディアの交換が加速されます。組織は安全にオープン ソース コンポーネントを採用して、新しいサービスや製品の立ち上げに必須のものとして利用できるので、イノベーションを加速できます。 

一貫したコンプライアンス プロセスの要素

一貫したコンプライアンス プロセスの10ステップ

1. 入るソース コードの特定

2. ソース コードの監査

3. 監査で検出された課題の解決
4. 適切なレビューの完了

5. オープン ソース利用の承認受領

6. ソフトウェア リストへのオープン ソースの登録

7. オープン ソース利用を反映した製品文書の更新
8. 頒布前の上記全段階の検証

9. ソース コード パッケージの頒布
10. 頒布に関連した最終検証の実施 






図11一貫したコンプライアンス プロセス
この章の残りの部分では、これらの10ステップについて詳しく説明します。

ステップ1 . オープン ソースの特定
この最初のステップの目的は、標準パッケージや、サード パーティか自社開発ソフトウェアに組み込まれた形で、オープン ソースがソフトウェア ポートフォリオに入り込んだり統合されたりすることを監視することです。製品に利用されるオープン ソースを特定するいくつかの方法があります。

. オープン ソース利用の要求：これは、製品中のオープン ソース利用を特定する最も普通の方法です。技術担当か製品マネージャは、OSRB（3章で説明）かコンプライアンス チームに特定製品やプラットフォーム リリースに特定のオープン ソースを利用したい旨を通知することが求められています。申請者は、レビューと承認の対象であるオープン ソース パッケージの計画した利用に関して情報を提供します。. コンプライアンス基盤として確立するために、全プラットフォームや製品コード ベースを監査し、その上で、後続のリリースで変更されたコード モジュールを監査する。
. サード パーティ ソフトウェア プロバイダー精査：これは、オープン ソース コンプライアンス チームによる開示内容のレビューを伴う、サード パーティ供給者によって提供された製品中にあるオープン ソース コンポーネントの全開示を要求します。あるケースでは、精査の追加として、供給コードの監査結果をサード パーティ ソフトウェア ベンダーに要求することも意味があります。これは、製品へ入るオープン ソースの管理を確実にします。. プロプライエタリ（自社開発の） ソフトウェア コンポーネントの監査：例として、技術者が、オープン ソース コンポーネントにあるソース コードをコピー／ペーストして、プロプライエタリ ソフトウェアに加えるかもしれません。それゆえに、製品出荷日前に発見されなければコンプライアンス違反に陥るようなオープン ソース コードを含んでいるかもしれませんので、自社開発ソフトウェア コンポーネントを監査することは重要です。
. 組織のソース コード リポジトリに入る、オープン ソースの利用要求に対応していない全オープン ソース コンポーネントの検査：オープン ソース利用の意図のフォームへの記載を技術者に頼るのは、全ての入るオープン ソース ソフトウェアを説明するには必ずしも確実な方法とはいえません。それゆえに、バックアップとして、オープン ソース用の分離したフォルダーを持つソース コード管理システムの準備と、このフォルダーにチェックインがされた時の警告を検討して下さい。オープン ソースと自社開発プロプライエタリ ソフトウェアとサード パーティ ソフトウェアをビルド システムで別のフォルダーに分離しておくのは常に奨励されるプラクティスですから、新しいコードが提出された時に警告が出るようにすることはできます。既存の利用（オープン ソース要求）フォームに対応しない新しいコンポーネントが提出されたら、それは新しいコンポーネントであり、新しいフォームに記入する必要があります。 

特定フェーズの前提条件

以下条件の一つが満たされる：

. 特定のオープン ソース利用を要求する入るOSRBフォームプラットフォーム スキャンによって（適切な承認なしに）利用されているオープン ソースの発覚 



. サード パーティ ソフトウェアの一部として利用されているオープン ソースの発覚 

特定フェーズの結果
. コンプライアンス記録は、オープン ソースに対して生成（更新）されます。ソース コードをスキャンするように、監査が要求されます。


ステップ2 . ソース コードの監査
コンプライアンス精査の2番目のステップは、既知のオープン ソース プロジェクトとの一致を検出する自動解析ツールを使ったスキャンで構成されます。

監査担当者は、リリースに含まれているものは様々な適用可能なオープン ソース ライセンスに適合している証拠を、リリースごとに反復して、ソースコードスキャンを実施します。

監査の目的は：

. Update the release bill of materials to account for any open source added (or removed) since the last previous scan
. オープン ソースの由来も含めて、ソース コードの由来を確認します。全ての依存関係、コード一致、ライセンス矛盾にフラグを付けます。


監査フェーズの前提条件

適切なコンプライアンス記録（チケットとも呼ばれます）は、特定のオープン ソース利用に関する全ての必要な情報を補足し、内部ビルドシステム内のソース コードの場所を提供するように、作成されます。ある場合には、特にプラットフォームのフル スキャンが実施される時、適切なコンプライアンス報告が作成される前に、オープン ソース コンポーネントはスキャンされることもあります。この場合には、オープン ソース コンポーネントが発見された時に、記録が作成されます。





監査フェーズの結果
. An audit report identifying the origins and licenses of the source code
. 変更要求チケットは、適切な技術チームに対して、監査中に特定された解決すべき課題について記載されます。 

いくつかの活動が、ソフトウェア コンポーネントの発見と監査の契機となります。（図12、次ページ）
. A request from a developer to use an open source component
. A source code scan of the entire software stack
. 以前に承認されたコンポーネントでのソース コード変更サード パーティ ベンダーから受け取ったオープン ソースSource code downloaded from the web (unknown author or license)
. Proprietary software committed into the source code repository system
. Open source added to the code repository that does not correspond to a usage form
. 以前、異なる製品で承認を受けたオープン ソースの利用





 

図12入るオープン ソースの特定と監査の方法





ステップ3 . 課題解決
コンプライアンス精査のこのステップでは、監査ステップで特定された全ての課題が解決されます。OSRBチェアは、監査ステップで技術者に割り当てられたチケットのクローズを監視します。技術者が特定された課題を解決した時には、OSRBチェアは、解決された課題がもはや存在しないことを確認するために監査を要求するべきです。
課題解決フェーズの前提条件

ソース コード スキャンが完了し、ソース コードの出自とライセンスを特定した監査報告が生成される。報告は、特定されていないソース コード ファイルや、異なるライセンスで結合されるソース コードによって生じるライセンス矛盾にフラグを付けます。コンプライアンス オフィサーは、これらの課題解決を推進します。

課題解決フェーズの結果
報告にあるフラグ付きのファイルの解決と、フラグ付きのライセンス矛盾の解決
ステップ4 . レビュー
監査が完了し、以前に特定された全ての課題が解決されたら、特定のソフトウェア コンポーネントに対するコンプライアンス チケットは、レビュー ステップへ移動します。図13（次ページ）に示すように、様々なレビューが実施され、特定された全ての課題は解決していなければなりません。レビュアーは、ソフトウェアの利用、変更、頒布を支配するライセンスを理解し、様々なライセンスの義務を特定する必要があります。与えられたソフトウェア コンポーネントに対する、コンプライアンス チケットのレビュアーは、
. Internal package owner (the developer working on specific source code component)
. ソース コード スキャンか監査の担当者






. OSRBチェア、法務担当、およびOSRB技術代表からなるOSRB (オープン ソース レビュー ボード)OSEC （オープン ソース エグゼクティブ ボード）




図13コンプライアンス チケットのレビュアーとその役割

コンプライアンス精査のこのステップの一部として、2つの重要なレビューがあります：アーキテクチャー レビュー、リンク解析レビュー





アーキテクチャー レビュー

アーキテクチャー レビューの目的は、オープン ソース、サード パーティ、プロプライエタリ コード間の相互作用を解析することです。アーキテクチャー レビューの結果は、オープン ソース コンポーネントからプロプライエタリ コンポーネントへ（その逆も）影響を与えるライセンス義務の解析です。社内パッケージ所有者、OSRB技術代表、そしてオープン ソース エキスパートが、アーキテクチャ レビューを行います。もしライセンスの矛盾になるような依存関係を発見した場合、コンプライアンス オフィサーは、ソース コードの再作業によって依存関係問を題解決するためにチケットを技術担当に発行する。

リンク解析レビュー
リンク解析の目的は、動的および静的リンク レベルで、GPL ライブラリをプロプライエタリ ソース コード コンポーネントにリンクしているなど、問題発生の可能性のあるコードの組み合わせ を検出することです。OSRB チェアは、自動ツールを使用してこの調査を行います。リンク問題は、解決するように技術担当に報告されます。

レビュー フェーズの前提条件

監査されたソース コード、解決されている全ての課題。

レビュー フェーズの結果
OSRBメンバーは、特定のコンポーネントに対してアーキテクチャ レビューとリンク解析を実施し、もし課題が発見されなければ、次のステップ（つまり承認）への準備が整っているという印をつけます。

ステップ5 . 承認
全てのレビューが完了したら、ソフトウェア コンポーネントのコンプライアンス チケットは、製品に利用して良いかを決定する承認ステップへ移動します。承認はOSRBが行います。（前の章で説明したように、法務担当、技術代表、オープン ソース エキスパートが含まれます） 




ほとんどのソフトウェア コンポーネントに対して、チケットがコンプライアンス プロセスのこの点まで進めば、承認が与えられます。OSRBがオープン ソース コンポーネントの利用を承認したら、OSRBは製品チームに承認を伝えますので、製品チームは責任を理解し、ライセンス義務履行の準備を始めます。OSRBがオープン ソース コンポーネントの利用を却下する場合、OSRBは却下の理由を要求者に伝え、この情報はコンプライアンス チケットの一部として記録されます。要求者はOSRBに再考を促すことは可能ですが、結果としては、オープン ソース コンポーネントは製品に使用できません。

承認フェーズの前提条件

全てのOSRBメンバーはコンプライアンス チケットをレビューし、OSRBはアーキテクチャー レビューとリンク解析を完了している。

承認フェーズの結果
特定コンポーネントの利用の承認または却下

ステップ6 . 登録
ソフトウェア コンポーネントが製品やサービスへの利用を承認されたら、コンプライアンス チケットは、承認を反映するように更新されます。ソフトウェア コンポーネントは、オープン ソース利用とユースケースを記録したソフトウェア一覧表に加えられます。

保守的なアプローチの後にコンプライアンス プラクティスを進めるならば、特定のバージョンと、特定の製品やサービスバージョンでの利用に対して、オープン ソース ソフトウェアを承認します。このオープン ソース ソフトウェアの新しいバージョンが入手可能になったら、利用形態とライセンスが内部ポリシーと整合していることを確認するために新しい承認依頼を出します。
登録フェーズの前提条件

OSRBはコンポーネントの製品への利用を承認している。





登録フェーズの結果
コンポーネントは、コンポーネント名、バージョン、内部所有者、および製品名、バージョン、リリース番号等のコンポーネントが利用される場所の詳細などと共に、ソフトウェア一覧表に登録されます。
ステップ7 . 通知
オープン ソースを利用する際の重要な責務の一つは、ドキュメント記載の義務、または通知義務ともいわれるものです。外部に提供する製品やサービスにオープン ソースを利用している企業は以下を行う必要があります：

. Inform the end user how to obtain a copy of the source code that’s been made available as a result of meeting the license obligations (when applicable)
. Acknowledge the use of open source by providing required copyright and attribution notices
. 製品に含まれているオープン ソース コードに対応するライセンスの全文を提示します。 

オープン ソース ライセンス義務を順守しない企業は、ライセンスを取得できず、著作権を侵害したとして、著作権所有者に法的行動をさらされる可能性があります。また、対象となるソフトウェアを使用および配布する権利を失う可能性があります。ドキュメント記載義務を履行するには、製品に適切な通知を含める必要があります。コンプライアンス精査の中のこのステップでは、OSRB チェアが通知文を準備し、それを各担当部署に手渡します 。
通知フェーズの前提条件

ソフトウェア コンポーネントについて、使用が承認され、ソフトウェア一覧表への登録が完了している。





通知フェーズの結果
対象のコンポーネントのライセンス、著作権、および帰属通知が準備され、製品の資料に含めるべく担当部署に手渡される。

ステップ8 . 頒布前検証
コンプライアンス精査の次のステップは、頒布の方法とモード、頒布するパッケージのタイプ、および頒布メカニズムを決定することです。
頒布前検証の目的は、以下を確実にすることです：

. Open source packages destined for distribution have been identified and approved
. Source code packages (including modifications) have been verified to match the binary equivalent shipping in the product
. 適切な通知が、製品文書に含まれていて、エンド ユーザーに特定のオープン ソースのソース コードを要求する権利があることを知らせている。全てのソース コード コメントはレビューされ、不適切な内容は取り除かれている。これは厳密にはコンプライアンスの課題ではないですが、しかしながら、ある場合には、コードが受け取られた場所に関する無邪気なコメントが大きなコンプライアンスに関する問い合わせを生むきっかけになる可能性があります。 

頒布前検証フェーズの前提条件

コンポーネントは利用が承認され、ソフトウェア一覧表に登録され、全ての通知が収集され義務履行のために送付されている。 




頒布前検証フェーズの結果
. 頒布方法と様式を決定します
. 全ての頒布前検証が問題なく完了していることを確実にします。


ステップ9 . 頒布

頒布前検証が全て完了したら、対応する製品とバージョンをラベル付けして（このシナリオは、ソース コードを入手可能になることを想定しています。他の方法は後続の章で議論します。）、オープン ソース パッケージを頒布用ウェブサイトにアップロードします。この作業は、コードのダウンロードを希望する人には役に立ちますが、これ自体でライセンス義務を満たしていることにはなりません。更に、推奨プラクティスでは、コンプライアンスやオープン ソースに関係する問い合わせの受付に関する、電子メールや住所などの情報を提供します。
頒布フェーズの前提条件

全ての頒布前検証がチェックされ、問題が発見されていない。

頒布フェーズの結果
対象のコンポーネントのソース コードは、頒布用のウェブサイトにアップロードされる。（そういう頒布方法が選択された場合）

ステップ10 . 最終検証
オープン ソース パッケージを頒布用のウェブサイトにアップロードしたら、パッケージが正しくアップロードされ、ダウンロードでき、エラー無しに外部コンピューターで解凍できることを確認します。もし、パッチを提供する時には、それが容易に適用できること、アップストリーム コンポーネントの適切なバージョンを特定していることを確認します。





最終検証フェーズの前提条件

ソース コードはウェブサイト上で公開される。

最終検証の結果
ソース コードは正しくアップロードされ、ダウンロード可能で、承認されたものと同じバージョンに対応しているという確認結果を受けます。 
